{
  ".source.purebasic": {
    "AbortFTPFile (#Ftp)": {
      "prefix": "AbortFTPFile",
      "body": "AbortFTPFile(${1:#Ftp})$2",
      "description": "Abort the current asynchronous file operation"
    },
    "AbortHTTP (HttpConnection)": {
      "prefix": "AbortHTTP",
      "body": "AbortHTTP(${1:HttpConnection})$2",
      "description": "Abort the download of the specified HTTP connection"
    },
    "Abs (Value)": {
      "prefix": "Abs",
      "body": "Abs(${1:Value})$2",
      "description": "Returns the absolute value (no sign) of the given float value"
    },
    "ACos (Number)": {
      "prefix": "ACos",
      "body": "ACos(${1:Number})$2",
      "description": "Returns the arc cosine of the specified number, in radian"
    },
    "ACosH (Number)": {
      "prefix": "ACosH",
      "body": "ACosH(${1:Number})$2",
      "description": "Returns the area hyperbolic cosine of the specified number"
    },
    "Add3DArchive (Name$, Type)": {
      "prefix": "Add3DArchive",
      "body": "Add3DArchive(${1:Name.s})$2",
      "description": "Add a new archive as path to search"
    },
    "AddBillboard (#BillboardGroup, x, y, z)": {
      "prefix": "AddBillboard",
      "body": "AddBillboard(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "description": "Add a billboard to the #BillboardGroup"
    },
    "AddCipherBuffer (#Cipher, *Input, *Output, Size)": {
      "prefix": "AddCipherBuffer",
      "body": "AddCipherBuffer(${1:#Cipher}, ${2:*Input}, ${3:*Output})$4",
      "description": "Add a new buffer to the #Cipher"
    },
    "AddDate (Date, Type, Value)": {
      "prefix": "AddDate",
      "body": "AddDate(${1:Date}, ${2:Type})$3",
      "description": "Returns a new date"
    },
    "AddEntityAnimationTime (#Entity, Animation$, Time)": {
      "prefix": "AddEntityAnimationTime",
      "body": "AddEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3",
      "description": "Add time to the specified #Entity animation"
    },
    "AddFingerprintBuffer (#Fingerprint, *Buffer, Size)": {
      "prefix": "AddFingerprintBuffer",
      "body": "AddFingerprintBuffer(${1:#Fingerprint}, ${2:*Buffer})$3",
      "description": "Add a new buffer to the fingerprint calculation"
    },
    "AddGadgetColumn (#Gadget, Position, Title$, Width)": {
      "prefix": "AddGadgetColumn",
      "body": "AddGadgetColumn(${1:#Gadget}, ${2:Position}, ${3:Title.s})$4",
      "description": "Add a column to the specified #Gadget"
    },
    "AddGadgetItem (#Gadget, Position, Text$ [, ImageID [, Flags]])": {
      "prefix": "AddGadgetItem",
      "body": "AddGadgetItem(${1:#Gadget}, ${2:Position}, ${3:Text.s})$4",
      "description": "Add an item to a gadget (ListView, ComboBox etc...)"
    },
    "AddGadgetItem3D (#Gadget3D, Position, Text$)": {
      "prefix": "AddGadgetItem3D",
      "body": "AddGadgetItem3D(${1:#Gadget3D}, ${2:Position})$3",
      "description": "Add an item to a gadget (ListView, ComboBox etc...)"
    },
    "AddJSONElement (*JSONValue [, Index])": {
      "prefix": "AddJSONElement",
      "body": "AddJSONElement(${1:*JSONValue})$2",
      "description": "Add an element to a JSON array"
    },
    "AddJSONMember (*JSONValue, Key$)": {
      "prefix": "AddJSONMember",
      "body": "AddJSONMember(${1:*JSONValue})$2",
      "description": "Add a member to a JSON object"
    },
    "AddKeyboardShortcut (#Window, Key, Event)": {
      "prefix": "AddKeyboardShortcut",
      "body": "AddKeyboardShortcut(${1:#Window}, ${2:Key})$3",
      "description": "Add a keyboard shortcut to the specified #Window"
    },
    "AddMailAttachment (#Mail, Description$, Filename$ [, MimeType$])": {
      "prefix": "AddMailAttachment",
      "body": "AddMailAttachment(${1:#Mail}, ${2:Description.s})$3",
      "description": "Add a file attachment"
    },
    "AddMailAttachmentData (#Mail, Description$, *Buffer, Size [, MimeType$])": {
      "prefix": "AddMailAttachmentData",
      "body": "AddMailAttachmentData(${1:#Mail}, ${2:Description.s}, ${3:*Buffer})$4",
      "description": "Add a file attachment from a memory area"
    },
    "AddMailRecipient (#Mail, Address$, Flags)": {
      "prefix": "AddMailRecipient",
      "body": "AddMailRecipient(${1:#Mail}, ${2:Address.s})$3",
      "description": "Add a recipient to the specified #Mail"
    },
    ", Key$ [, Flags])": {
      "prefix": "AddMapElement",
      "body": "AddMapElement(${1:Map()})$2",
      "description": "Adds a new empty element in the map"
    },
    "AddMaterialLayer (#Material, TextureID [, Mode [, TextureCoordinateIndex])": {
      "prefix": "AddMaterialLayer",
      "body": "AddMaterialLayer(${1:#Material})$2",
      "description": "Add a new texture layer to the #Material"
    },
    "AddNodeAnimationTime (#NodeAnimation, Time)": {
      "prefix": "AddNodeAnimationTime",
      "body": "AddNodeAnimationTime(${1:#NodeAnimation})$2",
      "description": "Add time to the specified #NodeAnimation"
    },
    "AddPackFile (#Pack, Filename$, PackedFilename$)": {
      "prefix": "AddPackFile",
      "body": "AddPackFile(${1:#Pack}, ${2:Filename.s})$3",
      "description": "Add and compress the file to pack file"
    },
    "AddPackMemory (#Pack, *Buffer, Size, PackedFilename$)": {
      "prefix": "AddPackMemory",
      "body": "AddPackMemory(${1:#Pack}, ${2:*Buffer}, ${3:Size})$4",
      "description": "Add and compress the memory area to pack file"
    },
    "AddPathArc (x1.d, y1.d, x2.d, y2.d, Radius.d, [, Flags])": {
      "prefix": "AddPathArc",
      "body": "AddPathArc(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:Radius.d})$6",
      "description": "Add an arc to the vector drawing path"
    },
    "AddPathBox (x.d, y.d, Width.d, Height.d [, Flags])": {
      "prefix": "AddPathBox",
      "body": "AddPathBox(${1:x.d}, ${2:y.d}, ${3:Width.d})$4",
      "description": "Add a box to the vector drawing path"
    },
    "AddPathCircle (x.d, y.d, Radius.d [, StartAngle.d, EndAngle.d [, Flags]])": {
      "prefix": "AddPathCircle",
      "body": "AddPathCircle(${1:x.d}, ${2:y.d})$3",
      "description": "Add a circle (or part of it) to the vector drawing path"
    },
    "AddPathCurve (x1.d, y1.d, x2.d, y2.d, x3.d, y3.d [, Flags])": {
      "prefix": "AddPathCurve",
      "body": "AddPathCurve(${1:x1.d}, ${2:y1.d}, ${3:x2.d}, ${4:y2.d}, ${5:x3.d})$6",
      "description": "Add a curve to the vector drawing path"
    },
    "AddPathEllipse (x.d, y.d, RadiusX.d, RadiusY.d [, StartAngle.d, EndAngle.d [, Flags]])": {
      "prefix": "AddPathEllipse",
      "body": "AddPathEllipse(${1:x.d}, ${2:y.d}, ${3:RadiusX.d})$4",
      "description": "Add an ellipse (or part of it) to the vector drawing path"
    },
    "AddPathLine (x.d, y.d [, Flags])": {
      "prefix": "AddPathLine",
      "body": "AddPathLine(${1:x.d})$2",
      "description": "Add a straight line to the vector drawing path"
    },
    "AddPathText (Text$)": {
      "prefix": "AddPathText",
      "body": "AddPathText(${1:Text.s})$2",
      "description": "Add text to the vector drawing path"
    },
    "AddStatusBarField (Width)": {
      "prefix": "AddStatusBarField",
      "body": "AddStatusBarField(${1:Width})$2",
      "description": "Add a field to the current Status Bar previously created with CreateStatusBar()"
    },
    "AddSysTrayIcon (#SysTrayIcon, WindowID, ImageID)": {
      "prefix": "AddSysTrayIcon",
      "body": "AddSysTrayIcon(${1:#SysTrayIcon}, ${2:WindowID})$3",
      "description": "Add an icon in the SysTray area"
    },
    "AddTerrainTexture (#Terrain, Layer, WorldSize, DiffuseSpecular$, NormalHeight$)": {
      "prefix": "AddTerrainTexture",
      "body": "AddTerrainTexture(${1:#Terrain}, ${2:Layer}, ${3:WorldSize}, ${4:DiffuseSpecular.s})$5",
      "description": "Add a texture to the #Terrain"
    },
    "AddVertexPoseReference (#Mesh, Animation$, Track, Index, PoseIndex, Influence)": {
      "prefix": "AddVertexPoseReference",
      "body": "AddVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6",
      "description": "Add a new vertex pose reference to the #Mesh track"
    },
    "AddWindowTimer (#Window, Timer, Timeout)": {
      "prefix": "AddWindowTimer",
      "body": "AddWindowTimer(${1:#Window}, ${2:Timer})$3",
      "description": "Add a timer event to the window"
    },
    "AESDecoder (*Input, *Output, Size, *Key, Bits, *InitializationVector [, Mode])": {
      "prefix": "AESDecoder",
      "body": "AESDecoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6",
      "description": "Decodes the specified buffer using the AES algorithm"
    },
    "AESEncoder (*Input, *Output, Size, *Key, Bits, *InitializationVector [, Mode])": {
      "prefix": "AESEncoder",
      "body": "AESEncoder(${1:*Input}, ${2:*Output}, ${3:Size}, ${4:*Key}, ${5:Bits})$6",
      "description": "Encodes the specified buffer using the AES algorithm"
    },
    "AffectedDatabaseRows (#Database)": {
      "prefix": "AffectedDatabaseRows",
      "body": "AffectedDatabaseRows(${1:#Database})$2",
      "description": "Get number of rows affected by a database update"
    },
    "AllocateMemory (Size [, Flags])": {
      "prefix": "AllocateMemory",
      "body": "AllocateMemory(${1:Size})$2",
      "description": "Allocates a contiguous memory area according to the specified size and returns the buffer start"
    },
    "Alpha (Color)": {
      "prefix": "Alpha",
      "body": "Alpha(${1:Color})$2",
      "description": "Returns the alpha component of the given color"
    },
    "AlphaBlend (Color1, Color2)": {
      "prefix": "AlphaBlend",
      "body": "AlphaBlend(${1:Color1})$2",
      "description": "Returns the result of blending Color1 on Color2 with alpha channel"
    },
    "AmbientColor (Color)": {
      "prefix": "AmbientColor",
      "body": "AmbientColor(${1:Color})$2",
      "description": "Changes the ambient color of the world"
    },
    "AntialiasingMode (Mode)": {
      "prefix": "AntialiasingMode",
      "body": "AntialiasingMode(${1:Mode})$2",
      "description": "Set the fullscreen antialiasing mode for the 3D world"
    },
    "ApplyEntityForce (#Entity, x, y, z [, PositionX, PositionY, PositionZ])": {
      "prefix": "ApplyEntityForce",
      "body": "ApplyEntityForce(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Apply a force to the #Entity"
    },
    "ApplyEntityImpulse (#Entity, x, y, z [, PositionX, PositionY, PositionZ])": {
      "prefix": "ApplyEntityImpulse",
      "body": "ApplyEntityImpulse(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Apply a force to the  #Entity"
    },
    "ApplyEntityTorque (#Entity, x, y, z)": {
      "prefix": "ApplyEntityTorque",
      "body": "ApplyEntityTorque(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Apply a rotation force to the  #Entity"
    },
    "ApplyEntityTorqueImpulse (#Entity, x, y, z)": {
      "prefix": "ApplyEntityTorqueImpulse",
      "body": "ApplyEntityTorqueImpulse(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Apply a rotation force to the #Entity"
    },
    "Asc (String)": {
      "prefix": "Asc",
      "body": "Asc(${1:String})$2",
      "description": "Returns the ASCII value of the first character in the string"
    },
    "ASin (Number)": {
      "prefix": "ASin",
      "body": "ASin(${1:Number})$2",
      "description": "Returns the arc sine of the specified number, in radian"
    },
    "ASinH (Number)": {
      "prefix": "ASinH",
      "body": "ASinH(${1:Number})$2",
      "description": "Returns the area hyperbolic sine of the specified number"
    },
    "ATan (Number)": {
      "prefix": "ATan",
      "body": "ATan(${1:Number})$2",
      "description": "Returns the arc tangent of the specified number, in radian"
    },
    "ATan2 (x, y)": {
      "prefix": "ATan2",
      "body": "ATan2(${1:x})$2",
      "description": "Returns the Arc-Tangent of x/y, in radian"
    },
    "ATanH (Number)": {
      "prefix": "ATanH",
      "body": "ATanH(${1:Number})$2",
      "description": "Returns the area hyperbolic tangent of the specified number"
    },
    "AttachEntityObject (#Entity, Bone$, ObjectID [, x, y, z, Pitch, Yaw, Roll])": {
      "prefix": "AttachEntityObject",
      "body": "AttachEntityObject(${1:#Entity}, ${2:Bone.s})$3",
      "description": "Attach an object to the #Entity"
    },
    "AttachNodeObject (#Node, ObjectID)": {
      "prefix": "AttachNodeObject",
      "body": "AttachNodeObject(${1:#Node})$2",
      "description": "Attach an object to the #Node"
    },
    "AttachRibbonEffect (#Effect, NodeID)": {
      "prefix": "AttachRibbonEffect",
      "body": "AttachRibbonEffect(${1:#Effect})$2",
      "description": "Attach the ribbon #Effect to the node"
    },
    "AudioCDLength ()": {
      "prefix": "AudioCDLength",
      "body": "AudioCDLength()$1",
      "description": "Returns the full length of an CD-Audio in seconds"
    },
    "AudioCDName ()": {
      "prefix": "AudioCDName",
      "body": "AudioCDName()$1",
      "description": "Returns the name, system dependent, attached to the current CD-Audio drive"
    },
    "AudioCDStatus ()": {
      "prefix": "AudioCDStatus",
      "body": "AudioCDStatus()$1",
      "description": "Possible values: -1 Ready; 0 Stopped; >0 Audio track which is currently playing"
    },
    "AudioCDTrackLength (TrackNumber)": {
      "prefix": "AudioCDTrackLength",
      "body": "AudioCDTrackLength(${1:TrackNumber})$2",
      "description": "Returns the length of the specified track, in seconds"
    },
    "AudioCDTracks ()": {
      "prefix": "AudioCDTracks",
      "body": "AudioCDTracks()$1",
      "description": "Return the total numbers of tracks on the CD available for playing"
    },
    "AudioCDTrackSeconds ()": {
      "prefix": "AudioCDTrackSeconds",
      "body": "AudioCDTrackSeconds()$1",
      "description": "Return the number of seconds elapsed since the current track has being start to play"
    },
    "AvailableProgramOutput (Program)": {
      "prefix": "AvailableProgramOutput",
      "body": "AvailableProgramOutput(${1:Program})$2",
      "description": "returns the number of bytes available for reading"
    },
    "AvailableSerialPortInput (#SerialPort)": {
      "prefix": "AvailableSerialPortInput",
      "body": "AvailableSerialPortInput(${1:#SerialPort})$2",
      "description": "Return the number of remaining bytes in the input buffer"
    },
    "AvailableSerialPortOutput (#SerialPort)": {
      "prefix": "AvailableSerialPortOutput",
      "body": "AvailableSerialPortOutput(${1:#SerialPort})$2",
      "description": "Return the number of remaining bytes in the output buffer"
    },
    "BackColor (Color)": {
      "prefix": "BackColor",
      "body": "BackColor(${1:Color})$2",
      "description": "Set the default background color for graphic functions and text display"
    },
    "Base64Decoder (*Input, InputSize, *Output, OutputSize)": {
      "prefix": "Base64Decoder",
      "body": "Base64Decoder(${1:*Input}, ${2:InputSize}, ${3:*Output})$4",
      "description": "Decodes the specified buffer using the Base64 algorithm"
    },
    "Base64Encoder (*Input, InputSize, *Output, OutputSize [, Flags])": {
      "prefix": "Base64Encoder",
      "body": "Base64Encoder(${1:*Input}, ${2:InputSize}, ${3:*Output})$4",
      "description": "Encodes the specified buffer using the Base64 algorithm"
    },
    "BeginVectorLayer ([Alpha])": {
      "prefix": "BeginVectorLayer",
      "body": "BeginVectorLayer()$1",
      "description": "Begin a new transparent layer for vector drawing"
    },
    "BillboardGroupCommonDirection (#BillboardGroup, x, y, z)": {
      "prefix": "BillboardGroupCommonDirection",
      "body": "BillboardGroupCommonDirection(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "description": "Set the billboardgroup common direction"
    },
    "BillboardGroupCommonUpVector (#BillboardGroup, x, y, z)": {
      "prefix": "BillboardGroupCommonUpVector",
      "body": "BillboardGroupCommonUpVector(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "description": "Set the billboardgroup common up vector"
    },
    "BillboardGroupID (#BillboardGroup)": {
      "prefix": "BillboardGroupID",
      "body": "BillboardGroupID(${1:#BillboardGroup})$2",
      "description": "Returns the unique ID which identifies the billboard group in the operating system"
    },
    "BillboardGroupMaterial (#BillboardGroup, MaterialID)": {
      "prefix": "BillboardGroupMaterial",
      "body": "BillboardGroupMaterial(${1:#BillboardGroup})$2",
      "description": "Change the #BillboardGroup material used by all the billboards"
    },
    "BillboardGroupX (#BillboardGroup [, Mode])": {
      "prefix": "BillboardGroupX",
      "body": "BillboardGroupX(${1:#BillboardGroup})$2",
      "description": "Returns the #BillboardGroup X absolute position"
    },
    "BillboardGroupY (#BillboardGroup [, Mode])": {
      "prefix": "BillboardGroupY",
      "body": "BillboardGroupY(${1:#BillboardGroup})$2",
      "description": "Returns the #BillboardGroup Y absolute position"
    },
    "BillboardGroupZ (#BillboardGroup [, Mode])": {
      "prefix": "BillboardGroupZ",
      "body": "BillboardGroupZ(${1:#BillboardGroup})$2",
      "description": "Returns the #BillboardGroup Z absolute position"
    },
    "BillboardHeight (#Billboard, #BillboardGroup)": {
      "prefix": "BillboardHeight",
      "body": "BillboardHeight(${1:#Billboard})$2",
      "description": "Returns the #Billboard height, in world metric"
    },
    "BillboardLocate (#Billboard, #BillboardGroup, x, y, z)": {
      "prefix": "BillboardLocate",
      "body": "BillboardLocate(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5",
      "description": "Change the #Billboard absolute location, relative to the #BillboardGroup"
    },
    "BillboardWidth (#Billboard, #BillboardGroup)": {
      "prefix": "BillboardWidth",
      "body": "BillboardWidth(${1:#Billboard})$2",
      "description": "Returns the #Billboard width, in world metric"
    },
    "BillboardX (#Billboard, #BillboardGroup)": {
      "prefix": "BillboardX",
      "body": "BillboardX(${1:#Billboard})$2",
      "description": "Returns the #Billboard X absolute position in the #BillboardGroup"
    },
    "BillboardY (#Billboard, #BillboardGroup)": {
      "prefix": "BillboardY",
      "body": "BillboardY(${1:#Billboard})$2",
      "description": "Returns the #Billboard Y absolute position in the #BillboardGroup"
    },
    "BillboardZ (#Billboard, #BillboardGroup)": {
      "prefix": "BillboardZ",
      "body": "BillboardZ(${1:#Billboard})$2",
      "description": "Returns the #Billboard Z absolute position in the #BillboardGroup"
    },
    "Bin (Number.q [, Type])": {
      "prefix": "Bin",
      "body": "Bin(${1:Number.q})$2",
      "description": "Converts a number in binary string form"
    },
    " [, Window [, Object [, EventType]]])": {
      "prefix": "UnbindEvent",
      "body": "UnbindEvent(${1:Event})$2",
      "description": "Unbind an event callback"
    },
    " [, EventType])": {
      "prefix": "UnbindGadgetEvent",
      "body": "UnbindGadgetEvent(${1:#Gadget})$2",
      "description": "Unbind a gadget event callback"
    },
    "Blue (Color)": {
      "prefix": "Blue",
      "body": "Blue(${1:Color})$2",
      "description": "Returns the blue component of the given color"
    },
    "Box (x, y, Width, Height [, Color])": {
      "prefix": "Box",
      "body": "Box(${1:x}, ${2:y}, ${3:Width})$4",
      "description": "Draw a filled box of given dimensions on the current output"
    },
    "BoxedGradient (x, y, Width, Height)": {
      "prefix": "BoxedGradient",
      "body": "BoxedGradient(${1:x}, ${2:y}, ${3:Width})$4",
      "description": "Use a box shaped gradient when gradient drawing is enabled"
    },
    "BuildTerrain (#Terrain)": {
      "prefix": "BuildTerrain",
      "body": "BuildTerrain(${1:#Terrain})$2",
      "description": "Construct the #Terrain"
    },
    "ButtonGadget (#Gadget, x, y, Width, Height, Text$ [, Flags])": {
      "prefix": "ButtonGadget",
      "body": "ButtonGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a button gadget in the current GadgetList"
    },
    "ButtonGadget3D (#Gadget3D, x, y, Width, Height, Text$)": {
      "prefix": "ButtonGadget3D",
      "body": "ButtonGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a button gadget in the current GadgetList"
    },
    "ButtonImageGadget (#Gadget, x, y, Width, Height, ImageID [, Flags])": {
      "prefix": "ButtonImageGadget",
      "body": "ButtonImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a button gadget in the current GadgetList"
    },
    "CalendarGadget (#Gadget, x, y, Width, Height [, Date [, Flags]])": {
      "prefix": "CalendarGadget",
      "body": "CalendarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create Date selection Calendar"
    },
    "CallCFunction (#Library, FunctionName$, [Arg1, [Arg2, ...]])": {
      "prefix": "CallCFunction",
      "body": "CallCFunction(${1:#Library}, ${2:FunctionName.s})$3",
      "description": "Call a C function using its name"
    },
    "CallCFunctionFast (*Function, [Arg1, [Arg2, ...]])": {
      "prefix": "CallCFunctionFast",
      "body": "CallCFunctionFast(${1:*Function})$2",
      "description": "Call a C function quickly, using its pointer"
    },
    "CallFunction (#Library, FunctionName$, [Arg1, [Arg2, ...]])": {
      "prefix": "CallFunction",
      "body": "CallFunction(${1:#Library}, ${2:FunctionName.s})$3",
      "description": "Call a function using its name"
    },
    "CallFunctionFast (*Function, [Arg1, [Arg2, ...]])": {
      "prefix": "CallFunctionFast",
      "body": "CallFunctionFast(${1:*Function})$2",
      "description": "Call a function quickly, using its pointer"
    },
    "CameraBackColor (#Camera, Color)": {
      "prefix": "CameraBackColor",
      "body": "CameraBackColor(${1:#Camera})$2",
      "description": "Changes the #Camera background color"
    },
    "CameraCustomParameter (#Camera, ParameterIndex, Value1, Value2, Value3, Value4)": {
      "prefix": "CameraCustomParameter",
      "body": "CameraCustomParameter(${1:#Camera}, ${2:ParameterIndex}, ${3:Value1}, ${4:Value2}, ${5:Value3})$6",
      "description": "Set a custom parameter to the #Entity shader script"
    },
    "CameraDirection (#Camera, x, y, z)": {
      "prefix": "CameraDirection",
      "body": "CameraDirection(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Change the #Camera direction"
    },
    "CameraDirectionX (#Camera [, Mode])": {
      "prefix": "CameraDirectionX",
      "body": "CameraDirectionX(${1:#Camera})$2",
      "description": "Retrieve the x direction of the #Camera"
    },
    "CameraDirectionY (#Camera [, Mode])": {
      "prefix": "CameraDirectionY",
      "body": "CameraDirectionY(${1:#Camera})$2",
      "description": "Retrieve the y direction of the #Camera"
    },
    "CameraDirectionZ (#Camera [, Mode])": {
      "prefix": "CameraDirectionZ",
      "body": "CameraDirectionZ(${1:#Camera})$2",
      "description": "Retrieve the z direction of the #Camera"
    },
    "CameraFixedYawAxis (#Camera, Mode [, VectorX, VectorY, VectorZ])": {
      "prefix": "CameraFixedYawAxis",
      "body": "CameraFixedYawAxis(${1:#Camera})$2",
      "description": "Change the way the yaw axis is managed"
    },
    "CameraFOV (#Camera, FOV)": {
      "prefix": "CameraFOV",
      "body": "CameraFOV(${1:#Camera})$2",
      "description": "Changes the #Camera Field Of View (FOV)"
    },
    "CameraID (#Camera)": {
      "prefix": "CameraID",
      "body": "CameraID(${1:#Camera})$2",
      "description": "Returns the unique ID which identifies the camera in the operating system"
    },
    "CameraLookAt (#Camera, x, y, z)": {
      "prefix": "CameraLookAt",
      "body": "CameraLookAt(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Makes the camera to look at the x,y,z point"
    },
    "CameraPitch (#Camera [, Mode])": {
      "prefix": "CameraPitch",
      "body": "CameraPitch(${1:#Camera})$2",
      "description": "Retrieve the pitch of the #Camera"
    },
    "CameraProjectionMode (#Camera, Mode)": {
      "prefix": "CameraProjectionMode",
      "body": "CameraProjectionMode(${1:#Camera})$2",
      "description": "Change the #Camera projection mode"
    },
    "CameraProjectionX (#Camera, x, y, z)": {
      "prefix": "CameraProjectionX",
      "body": "CameraProjectionX(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Return the X position, in pixels, of the 3D point"
    },
    "CameraProjectionY (#Camera, x, y, z)": {
      "prefix": "CameraProjectionY",
      "body": "CameraProjectionY(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Return the Y position, in pixels, of the 3D point"
    },
    "CameraRange (#Camera, Near, Far)": {
      "prefix": "CameraRange",
      "body": "CameraRange(${1:#Camera}, ${2:Near})$3",
      "description": "Change the #Camera range"
    },
    "CameraRenderMode (#Camera, RenderMode)": {
      "prefix": "CameraRenderMode",
      "body": "CameraRenderMode(${1:#Camera})$2",
      "description": "Change the #Camera render mode"
    },
    "CameraRoll (#Camera [, Mode])": {
      "prefix": "CameraRoll",
      "body": "CameraRoll(${1:#Camera})$2",
      "description": "Retrieve the roll of the #Camera"
    },
    "CameraViewHeight (#Camera)": {
      "prefix": "CameraViewHeight",
      "body": "CameraViewHeight(${1:#Camera})$2",
      "description": "Retrieve the height of the #Camera view, in pixels"
    },
    "CameraViewWidth (#Camera)": {
      "prefix": "CameraViewWidth",
      "body": "CameraViewWidth(${1:#Camera})$2",
      "description": "Retrieve the width of the #Camera view, in pixels"
    },
    "CameraViewX (#Camera)": {
      "prefix": "CameraViewX",
      "body": "CameraViewX(${1:#Camera})$2",
      "description": "Retrieve the x position on the screen of the #Camera view, in pixels"
    },
    "CameraViewY (#Camera)": {
      "prefix": "CameraViewY",
      "body": "CameraViewY(${1:#Camera})$2",
      "description": "Retrieve the y position on the screen of the #Camera view, in pixels"
    },
    "CameraX (#Camera [, Mode])": {
      "prefix": "CameraX",
      "body": "CameraX(${1:#Camera})$2",
      "description": "Retrieve the x position of the #Camera"
    },
    "CameraY (#Camera [, Mode])": {
      "prefix": "CameraY",
      "body": "CameraY(${1:#Camera})$2",
      "description": "Retrieve the y position of the #Camera"
    },
    "CameraYaw (#Camera [, Mode])": {
      "prefix": "CameraYaw",
      "body": "CameraYaw(${1:#Camera})$2",
      "description": "Retrieve the yaw of the #Camera"
    },
    "CameraZ (#Camera [, Mode])": {
      "prefix": "CameraZ",
      "body": "CameraZ(${1:#Camera})$2",
      "description": "Retrieve the z position of the #Camera"
    },
    "CanvasGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "CanvasGadget",
      "body": "CanvasGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a canvas gadget in the current GadgetList"
    },
    "CanvasOutput (#Gadget)": {
      "prefix": "CanvasOutput",
      "body": "CanvasOutput(${1:#Gadget})$2",
      "description": "Returns the OutputID of the specified #Gadget to perform 2D rendering operation on it"
    },
    "CanvasVectorOutput (#Gadget [, Unit])": {
      "prefix": "CanvasVectorOutput",
      "body": "CanvasVectorOutput(${1:#Gadget})$2",
      "description": "Returns the OutputID of the specified #Gadget to perform vector drawing on it"
    },
    "CatchImage (#Image, *Memory [, Size])": {
      "prefix": "CatchImage",
      "body": "CatchImage(${1:#Image})$2",
      "description": "Create a new #Image found at the specified memory address"
    },
    "CatchJSON (#JSON, *Buffer, Size [, Flags])": {
      "prefix": "CatchJSON",
      "body": "CatchJSON(${1:#JSON}, ${2:*Buffer})$3",
      "description": "Parse JSON from a memory buffer"
    },
    "CatchMusic (#Music, *Memory, Length)": {
      "prefix": "CatchMusic",
      "body": "CatchMusic(${1:#Music}, ${2:*Memory})$3",
      "description": "Create a new #Music found at the specified memory address"
    },
    "CatchSound (#Sound, *Buffer [, Size [, Flags]])": {
      "prefix": "CatchSound",
      "body": "CatchSound(${1:#Sound})$2",
      "description": "Load a sound found a the specified memory address"
    },
    "CatchSprite (#Sprite, MemoryID [, Mode])": {
      "prefix": "CatchSprite",
      "body": "CatchSprite(${1:#Sprite})$2",
      "description": "Catch a sprite from memory in BMP format"
    },
    "CatchXML (#XML, *Address, Size [, Flags [, Encoding]])": {
      "prefix": "CatchXML",
      "body": "CatchXML(${1:#XML}, ${2:*Address})$3",
      "description": "Parse XML from memory"
    },
    "CGIBuffer ()": {
      "prefix": "CGIBuffer",
      "body": "CGIBuffer()$1",
      "description": "Get the CGI web content buffer pointer"
    },
    "CGICookieName (Index)": {
      "prefix": "CGICookieName",
      "body": "CGICookieName(${1:Index})$2",
      "description": "Get the specified CGI cookie name"
    },
    "CGICookieValue (Name$)": {
      "prefix": "CGICookieValue",
      "body": "CGICookieValue(${1:Name.s})$2",
      "description": "Get the specified CGI cookie value"
    },
    "CGIParameterData (Name$ [, Index]])": {
      "prefix": "CGIParameterData",
      "body": "CGIParameterData(${1:Name.s})$2",
      "description": "Get the specified CGI parameter data"
    },
    "CGIParameterDataSize (Name$ [, Index]])": {
      "prefix": "CGIParameterDataSize",
      "body": "CGIParameterDataSize(${1:Name.s})$2",
      "description": "Get the specified CGI parameter data size"
    },
    "CGIParameterName (Index)": {
      "prefix": "CGIParameterName",
      "body": "CGIParameterName(${1:Index})$2",
      "description": "Get the specified CGI parameter name"
    },
    "CGIParameterType (Name$ [, Index]])": {
      "prefix": "CGIParameterType",
      "body": "CGIParameterType(${1:Name.s})$2",
      "description": "Get the specified CGI parameter type"
    },
    "CGIParameterValue (Name$ [, Index])": {
      "prefix": "CGIParameterValue",
      "body": "CGIParameterValue(${1:Name.s})$2",
      "description": "Get the specified CGI parameter value"
    },
    "CGIVariable (VariableName$)": {
      "prefix": "CGIVariable",
      "body": "CGIVariable(${1:VariableName.s})$2",
      "description": "Get the specified CGI variable content"
    },
    ", *NewElement)": {
      "prefix": "ChangeCurrentElement",
      "body": "ChangeCurrentElement(${1:List()})$2",
      "description": "Changes the current element of the specified list to the given new element"
    },
    "ChangeGamma (RedIntensity, GreenIntensity, BlueIntensity)": {
      "prefix": "ChangeGamma",
      "body": "ChangeGamma(${1:RedIntensity}, ${2:GreenIntensity})$3",
      "description": "Change the Gamma for the current screen"
    },
    "ChangeSysTrayIcon (#SysTrayIcon, ImageID)": {
      "prefix": "ChangeSysTrayIcon",
      "body": "ChangeSysTrayIcon(${1:#SysTrayIcon})$2",
      "description": "Change a specified icon in the SysTray area"
    },
    "CheckBoxGadget (#Gadget, x, y, Width, Height, Text$ [, Flags])": {
      "prefix": "CheckBoxGadget",
      "body": "CheckBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a checkbox gadget in the GadgetList"
    },
    "CheckBoxGadget3D (#Gadget3D, x, y, Width, Height, Text$)": {
      "prefix": "CheckBoxGadget3D",
      "body": "CheckBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a checkbox gadget in the GadgetList"
    },
    "CheckDatabaseNull (#Database, Column)": {
      "prefix": "CheckDatabaseNull",
      "body": "CheckDatabaseNull(${1:#Database})$2",
      "description": "Returns #True if the specified column contains NULL"
    },
    "CheckFilename (Filename$)": {
      "prefix": "CheckFilename",
      "body": "CheckFilename(${1:Filename.s})$2",
      "description": "Check if the filename is valid"
    },
    "CheckFTPConnection (#Ftp)": {
      "prefix": "CheckFTPConnection",
      "body": "CheckFTPConnection(${1:#Ftp})$2",
      "description": "Check if the FTP server is still responding"
    },
    "CheckObjectVisibility (#Camera, ObjectID)": {
      "prefix": "CheckObjectVisibility",
      "body": "CheckObjectVisibility(${1:#Camera})$2",
      "description": "Check if the object is currently visible on the specified camera"
    },
    "ChildXMLNode (Node [, n])": {
      "prefix": "ChildXMLNode",
      "body": "ChildXMLNode(${1:Node})$2",
      "description": "Get the nth child of the given XML node (default is the 1st child)"
    },
    "Chr (ASCII)": {
      "prefix": "Chr",
      "body": "Chr(${1:ASCII})$2",
      "description": "Returns the character associated with the given ASCII value"
    },
    "Circle (x, y, Radius [, Color])": {
      "prefix": "Circle",
      "body": "Circle(${1:x}, ${2:y})$3",
      "description": "Draw a filled circle on the current output"
    },
    "CircularGradient (x, y, Radius)": {
      "prefix": "CircularGradient",
      "body": "CircularGradient(${1:x}, ${2:y})$3",
      "description": "Use a circular gradient when gradient drawing is enabled"
    },
    "ClearBillboards (#BillboardGroup)": {
      "prefix": "ClearBillboards",
      "body": "ClearBillboards(${1:#BillboardGroup})$2",
      "description": "Remove and destroy all the billboards of the #BillboardGroup"
    },
    "ClearClipboard ()": {
      "prefix": "ClearClipboard",
      "body": "ClearClipboard()$1",
      "description": "Clear the clipboard of its content"
    },
    "ClearConsole ()": {
      "prefix": "ClearConsole",
      "body": "ClearConsole()$1",
      "description": "Clear the whole console content"
    },
    "ClearDebugOutput ()": {
      "prefix": "ClearDebugOutput",
      "body": "ClearDebugOutput()$1",
      "description": "Clear the content of the debug output window"
    },
    "ClearGadgetItems (#Gadget)": {
      "prefix": "ClearGadgetItems",
      "body": "ClearGadgetItems(${1:#Gadget})$2",
      "description": "Clear all the items of the specified #Gadget"
    },
    "ClearGadgetItems3D (#Gadget3D)": {
      "prefix": "ClearGadgetItems3D",
      "body": "ClearGadgetItems3D(${1:#Gadget3D})$2",
      "description": "Clear all the items of the specified #Gadget3D"
    },
    "ClearJSONElements (*JSONValue)": {
      "prefix": "ClearJSONElements",
      "body": "ClearJSONElements(${1:*JSONValue})$2",
      "description": "Clear the elements of a JSON array"
    },
    "ClearJSONMembers (*JSONValue)": {
      "prefix": "ClearJSONMembers",
      "body": "ClearJSONMembers(${1:*JSONValue})$2",
      "description": "Clear the members of a JSON object"
    },
    "ClearScreen (Color)": {
      "prefix": "ClearScreen",
      "body": "ClearScreen(${1:Color})$2",
      "description": "Clear the whole screen with the specified RGB color"
    },
    "ClearSpline (#Spline)": {
      "prefix": "ClearSpline",
      "body": "ClearSpline(${1:#Spline})$2",
      "description": "Clear the #Spine"
    },
    "ClipOutput (x, y, Width, Height)": {
      "prefix": "ClipOutput",
      "body": "ClipOutput(${1:x}, ${2:y}, ${3:Width})$4",
      "description": "Restrict drawing output to a clipping rectangle"
    },
    "ClipPath ([Flags])": {
      "prefix": "ClipPath",
      "body": "ClipPath()$1",
      "description": "Add the vector drawing path to the output clipping"
    },
    "ClipSprite (#Sprite, x, y, Width, Height)": {
      "prefix": "ClipSprite",
      "body": "ClipSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Add a clip zone to the specified sprite"
    },
    "CloseConsole ()": {
      "prefix": "CloseConsole",
      "body": "CloseConsole()$1",
      "description": "Close the current console"
    },
    "CloseCryptRandom ()": {
      "prefix": "CloseCryptRandom",
      "body": "CloseCryptRandom()$1",
      "description": "Close the cryptographic random number generator"
    },
    "CloseDatabase (#Database)": {
      "prefix": "CloseDatabase",
      "body": "CloseDatabase(${1:#Database})$2",
      "description": "Close the specified database"
    },
    "CloseFile (#File)": {
      "prefix": "CloseFile",
      "body": "CloseFile(${1:#File})$2",
      "description": "Close the specified file"
    },
    "CloseFTP (#Ftp)": {
      "prefix": "CloseFTP",
      "body": "CloseFTP(${1:#Ftp})$2",
      "description": "Close the specified client connection and send a notification to the server"
    },
    "CloseGadgetList ()": {
      "prefix": "CloseGadgetList",
      "body": "CloseGadgetList()$1",
      "description": "Terminates the current GadgetList creation and go back to the previous GadgetList"
    },
    "CloseGadgetList3D ()": {
      "prefix": "CloseGadgetList3D",
      "body": "CloseGadgetList3D()$1",
      "description": "Terminates the current GadgetList creation and go back to the previous GadgetList"
    },
    "CloseHelp ()": {
      "prefix": "CloseHelp",
      "body": "CloseHelp()$1",
      "description": "Close a previously opened Help window"
    },
    "CloseLibrary (#Library)": {
      "prefix": "CloseLibrary",
      "body": "CloseLibrary(${1:#Library})$2",
      "description": "Close the specified library"
    },
    "CloseNetworkConnection (Connection)": {
      "prefix": "CloseNetworkConnection",
      "body": "CloseNetworkConnection(${1:Connection})$2",
      "description": "Close the specified client connection and send a notification to the server"
    },
    "CloseNetworkServer (#Server)": {
      "prefix": "CloseNetworkServer",
      "body": "CloseNetworkServer(${1:#Server})$2",
      "description": "Shutdown the specified server"
    },
    "ClosePack (#Pack)": {
      "prefix": "ClosePack",
      "body": "ClosePack(${1:#Pack})$2",
      "description": "Close specified pack"
    },
    "ClosePath ()": {
      "prefix": "ClosePath",
      "body": "ClosePath()$1",
      "description": "Close the current vector drawing path by connecting start & end with a straight line"
    },
    "ClosePreferences ()": {
      "prefix": "ClosePreferences",
      "body": "ClosePreferences()$1",
      "description": "Close the currently opened preference file"
    },
    "CloseProgram (Program)": {
      "prefix": "CloseProgram",
      "body": "CloseProgram(${1:Program})$2",
      "description": "Close the interaction with the specified program"
    },
    "CloseScreen ()": {
      "prefix": "CloseScreen",
      "body": "CloseScreen()$1",
      "description": "Close the current screen (Either windowed or full screen mode)"
    },
    "CloseSerialPort (#SerialPort)": {
      "prefix": "CloseSerialPort",
      "body": "CloseSerialPort(${1:#SerialPort})$2",
      "description": "Close the specified #SerialPort"
    },
    "CloseSubMenu ()": {
      "prefix": "CloseSubMenu",
      "body": "CloseSubMenu()$1",
      "description": "Close the actual sub menu and come back to the previous one"
    },
    "CloseWindow (#Window)": {
      "prefix": "CloseWindow",
      "body": "CloseWindow(${1:#Window})$2",
      "description": "Close the specified window"
    },
    "CloseWindow3D (#Window3D)": {
      "prefix": "CloseWindow3D",
      "body": "CloseWindow3D(${1:#Window3D})$2",
      "description": "Close the specified window"
    },
    "ColorRequester ([Color])": {
      "prefix": "ColorRequester",
      "body": "ColorRequester()$1",
      "description": "Open the standard requester to choose a color"
    },
    "ComboBoxGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "ComboBoxGadget",
      "body": "ComboBoxGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a combobox gadget in the current GadgetList"
    },
    "ComboBoxGadget3D (#Gadget3D, x, y, Width, Height [, Flags])": {
      "prefix": "ComboBoxGadget3D",
      "body": "ComboBoxGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a combobox gadget in the current GadgetList"
    },
    "CompareMemory (SourceMemory, DestinationMemory, Length)": {
      "prefix": "CompareMemory",
      "body": "CompareMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "description": "Compares two memory areas and returns 1 if its equal or 0 if it doesn't match"
    },
    "CompareMemoryString (*String1, *String2 [, Mode [, Length [, Flags]]])": {
      "prefix": "CompareMemoryString",
      "body": "CompareMemoryString(${1:*String1})$2",
      "description": "Returns 0 if *String1 equals *String2, -1 or 1 if *String1 is below or above than *String2"
    },
    "ComposeJSON (#JSON [, Flags])": {
      "prefix": "ComposeJSON",
      "body": "ComposeJSON(${1:#JSON})$2",
      "description": "Compose a JSON data into a string"
    },
    "ComposeXML (#XML [, Flags])": {
      "prefix": "ComposeXML",
      "body": "ComposeXML(${1:#XML})$2",
      "description": "Compose an XML tree into a string"
    },
    "CompressMemory (*Buffer, Size, *Output, OutputSize [, PluginID])": {
      "prefix": "CompressMemory",
      "body": "CompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4",
      "description": "Compress the content of the *Buffer into *Output"
    },
    "ComputerName ()": {
      "prefix": "ComputerName",
      "body": "ComputerName()$1",
      "description": "Returns the name of the computer"
    },
    "ComputeSpline (#Spline, Time)": {
      "prefix": "ComputeSpline",
      "body": "ComputeSpline(${1:#Spline})$2",
      "description": "Compute the #Spline at the given time"
    },
    "ConicalGradient (x, y, Angle.f)": {
      "prefix": "ConicalGradient",
      "body": "ConicalGradient(${1:x}, ${2:y})$3",
      "description": "Use a conical gradient when gradient drawing is enabled"
    },
    "ConnectionID (Connection)": {
      "prefix": "ConnectionID",
      "body": "ConnectionID(${1:Connection})$2",
      "description": "Returns the unique system identifier of the connection"
    },
    "ConsoleColor (CharacterColor, BackgroundColor)": {
      "prefix": "ConsoleColor",
      "body": "ConsoleColor(${1:CharacterColor})$2",
      "description": "Change the colors used by the text display"
    },
    "ConsoleCursor (Height)": {
      "prefix": "ConsoleCursor",
      "body": "ConsoleCursor(${1:Height})$2",
      "description": "Change the cursor display"
    },
    "ConsoleError (Message$)": {
      "prefix": "ConsoleError",
      "body": "ConsoleError(${1:Message.s})$2",
      "description": "Write a message to the standard error output"
    },
    "ConsoleLocate (x, y)": {
      "prefix": "ConsoleLocate",
      "body": "ConsoleLocate(${1:x})$2",
      "description": "Move the cursor to the given position, in character"
    },
    "ConsoleTitle (Title$)": {
      "prefix": "ConsoleTitle",
      "body": "ConsoleTitle(${1:Title.s})$2",
      "description": "Change the console title to the new given one"
    },
    "ContainerGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "ContainerGadget",
      "body": "ContainerGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a gadget container in the current GadgetList"
    },
    "ContainerGadget3D (#Gadget3D, x, y, Width, Height)": {
      "prefix": "ContainerGadget3D",
      "body": "ContainerGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a gadget container in the current GadgetList"
    },
    "ConvertCoordinateX (x.d, y.d [, Source, Target])": {
      "prefix": "ConvertCoordinateX",
      "body": "ConvertCoordinateX(${1:x.d})$2",
      "description": "Convert a point between coordinate systems"
    },
    "ConvertCoordinateY (x.d, y.d [, Source, Target])": {
      "prefix": "ConvertCoordinateY",
      "body": "ConvertCoordinateY(${1:x.d})$2",
      "description": "Convert a point between coordinate systems"
    },
    "ConvertLocalToWorldPosition (ObjectID, x, y, z)": {
      "prefix": "ConvertLocalToWorldPosition",
      "body": "ConvertLocalToWorldPosition(${1:ObjectID}, ${2:x}, ${3:y})$4",
      "description": "Convert local position of the object into world coordinate"
    },
    "ConvertWorldToLocalPosition (ObjectID, x, y, z)": {
      "prefix": "ConvertWorldToLocalPosition",
      "body": "ConvertWorldToLocalPosition(${1:ObjectID}, ${2:x}, ${3:y})$4",
      "description": "Convert world position of the object into local coordinate"
    },
    "CopyDebugOutput ()": {
      "prefix": "CopyDebugOutput",
      "body": "CopyDebugOutput()$1",
      "description": "Copy the content of the debug output window into the clipboard"
    },
    "CopyDirectory (SourceDirectory$, DestinationDirectory$, Pattern$ [, Flags])": {
      "prefix": "CopyDirectory",
      "body": "CopyDirectory(${1:SourceDirectory.s}, ${2:DestinationDirectory.s})$3",
      "description": "Copy the source file to the destination"
    },
    "CopyEntity (#Entity, #NewEntity)": {
      "prefix": "CopyEntity",
      "body": "CopyEntity(${1:#Entity})$2",
      "description": "Copy the specified #Entity on the #NewEntity"
    },
    "CopyFile (SourceFileName$, DestinationFileName$)": {
      "prefix": "CopyFile",
      "body": "CopyFile(${1:SourceFileName.s})$2",
      "description": "Copy the source file to the destination"
    },
    "CopyImage (#Image1, #Image2)": {
      "prefix": "CopyImage",
      "body": "CopyImage(${1:#Image1})$2",
      "description": "Create a new #Image2 identical to the source #Image1"
    },
    "CopyLight (#Light, #NewLight)": {
      "prefix": "CopyLight",
      "body": "CopyLight(${1:#Light})$2",
      "description": "Copy the specified #Light on the #NewLight"
    },
    "CopyMaterial (#Material, #NewMaterial)": {
      "prefix": "CopyMaterial",
      "body": "CopyMaterial(${1:#Material})$2",
      "description": "Copy the specified #Material on the #NewMaterial"
    },
    "CopyMemory (SourceMemory, DestinationMemory, Length)": {
      "prefix": "CopyMemory",
      "body": "CopyMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "description": "Copy a memory area from \"SourceMemory\" to \"DestinationMemory\""
    },
    "CopyMemoryString (*String [, DestinationMemory])": {
      "prefix": "CopyMemoryString",
      "body": "CopyMemoryString(${1:*String})$2",
      "description": "Copy the *String to destination memory address or after the last one"
    },
    "CopyMesh (#Mesh, #NewMesh)": {
      "prefix": "CopyMesh",
      "body": "CopyMesh(${1:#Mesh})$2",
      "description": "Copy the specified #Mesh on the #NewMesh"
    },
    "CopySprite (#Sprite1, #Sprite2 [, Mode])": {
      "prefix": "CopySprite",
      "body": "CopySprite(${1:#Sprite1})$2",
      "description": "Copy the #Sprite1 to #Sprite2"
    },
    "CopyTexture (#Texture, #NewTexture)": {
      "prefix": "CopyTexture",
      "body": "CopyTexture(${1:#Texture})$2",
      "description": "Copy the specified #Texture on the #NewTexture"
    },
    "CopyXMLNode (Node, ParentNode [, PreviousNode])": {
      "prefix": "CopyXMLNode",
      "body": "CopyXMLNode(${1:Node})$2",
      "description": "Copy the XML node to a new location (or different XML tree)"
    },
    "Cos (Angle)": {
      "prefix": "Cos",
      "body": "Cos(${1:Angle})$2",
      "description": "Returns the cosinus of the specified angle, in radian"
    },
    "CosH (Angle)": {
      "prefix": "CosH",
      "body": "CosH(${1:Angle})$2",
      "description": "Returns the hyperbolic cosine of the specified angle"
    },
    "CountBillboards (#BillboardGroup)": {
      "prefix": "CountBillboards",
      "body": "CountBillboards(${1:#BillboardGroup})$2",
      "description": "Count the billboards number contained in the #BillboardGroup"
    },
    "CountCGICookies ()": {
      "prefix": "CountCGICookies",
      "body": "CountCGICookies()$1",
      "description": "Get the number of cookies"
    },
    "CountCGIParameters ()": {
      "prefix": "CountCGIParameters",
      "body": "CountCGIParameters()$1",
      "description": "Get the number of cookies"
    },
    "CountCPUs ([Type])": {
      "prefix": "CountCPUs",
      "body": "CountCPUs()$1",
      "description": "Returns the number of processors available"
    },
    "CountGadgetItems (#Gadget)": {
      "prefix": "CountGadgetItems",
      "body": "CountGadgetItems(${1:#Gadget})$2",
      "description": "Count all the items of the specified #Gadget"
    },
    "CountGadgetItems3D (#Gadget3D)": {
      "prefix": "CountGadgetItems3D",
      "body": "CountGadgetItems3D(${1:#Gadget3D})$2",
      "description": "Count all the items of the specified #Gadget3D"
    },
    "CountMaterialLayers (#Material)": {
      "prefix": "CountMaterialLayers",
      "body": "CountMaterialLayers(${1:#Material})$2",
      "description": "Returns the number of textures layers the #Material contains"
    },
    "CountProgramParameters ()": {
      "prefix": "CountProgramParameters",
      "body": "CountProgramParameters()$1",
      "description": "Get the number of parameters passed to this program"
    },
    "CountRegularExpressionGroups (#RegularExpression)": {
      "prefix": "CountRegularExpressionGroups",
      "body": "CountRegularExpressionGroups(${1:#RegularExpression})$2",
      "description": "Return the number of capturing groups in the regular expression"
    },
    "CountSplinePoints (#Spline)": {
      "prefix": "CountSplinePoints",
      "body": "CountSplinePoints(${1:#Spline})$2",
      "description": "Return the number of point in the #Spine"
    },
    "CountString (String$, StringToCount$)": {
      "prefix": "CountString",
      "body": "CountString(${1:String.s})$2",
      "description": "Count the number of occurence of a string"
    },
    "CPUName ()": {
      "prefix": "CPUName",
      "body": "CPUName()$1",
      "description": "Returns the name of the CPU"
    },
    "CreateBillboardGroup (#BillboardGroup, MaterialID, DefaultBillboardWidth, DefaultBillboardHeight, [x, y, z [, VisibilityMask [, Type]]])": {
      "prefix": "CreateBillboardGroup",
      "body": "CreateBillboardGroup(${1:#BillboardGroup}, ${2:MaterialID}, ${3:DefaultBillboardWidth}, ${4:DefaultBillboardHeight})$5",
      "description": "Creates a new #BillboardGroup"
    },
    "CreateCamera (#Camera, x, y, Width, Height [, VisibilityMask])": {
      "prefix": "CreateCamera",
      "body": "CreateCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a new #Camera. All the dimensions are in percent"
    },
    "CreateCubeMapTexture (#Texture, Width, Height, TextureName$ [, BackColor])": {
      "prefix": "CreateCubeMapTexture",
      "body": "CreateCubeMapTexture(${1:#Texture}, ${2:Width}, ${3:Height})$4",
      "description": "Create a new cube map #Texture"
    },
    "CreateDialog (#Dialog)": {
      "prefix": "CreateDialog",
      "body": "CreateDialog(${1:#Dialog})$2",
      "description": "Creates a new dialog"
    },
    "CreateDirectory (DirectoryName$)": {
      "prefix": "CreateDirectory",
      "body": "CreateDirectory(${1:DirectoryName.s})$2",
      "description": "Create a new directory"
    },
    "CreateEntity (#Entity, MeshID, MaterialID [, x, y, z [, PickMask [, VisibilityMask]]])": {
      "prefix": "CreateEntity",
      "body": "CreateEntity(${1:#Entity}, ${2:MeshID})$3",
      "description": "Create a new #Entity based on the specified Mesh and Material at the given position"
    },
    "CreateEntityBody (#Entity, Type [, Mass [, Restitution, Friction]])": {
      "prefix": "CreateEntityBody",
      "body": "CreateEntityBody(${1:#Entity})$2",
      "description": "Create a new body for the #Entity"
    },
    "CreateFile (#File, FileName$ [, Flags])": {
      "prefix": "CreateFile",
      "body": "CreateFile(${1:#File})$2",
      "description": "Create an empty file"
    },
    "CreateFTPDirectory (#Ftp, Directory$)": {
      "prefix": "CreateFTPDirectory",
      "body": "CreateFTPDirectory(${1:#Ftp})$2",
      "description": "Create a new directory on the FTP server"
    },
    "CreateImage (#Image, Width, Height [, Depth [, BackColor]])": {
      "prefix": "CreateImage",
      "body": "CreateImage(${1:#Image}, ${2:Width})$3",
      "description": "Create an empty #Image which can be used to do rendering on it"
    },
    "CreateImageMenu (#Menu, WindowID [, Flags])": {
      "prefix": "CreateImageMenu",
      "body": "CreateImageMenu(${1:#Menu})$2",
      "description": "Creates a new empty menu with images support"
    },
    "CreateJSON (#JSON [, Flags])": {
      "prefix": "CreateJSON",
      "body": "CreateJSON(${1:#JSON})$2",
      "description": "Create new JSON data with a value of type #PB_JSON_Null"
    },
    "CreateLensFlareEffect (#Effect, CameraID, NodeID, BurstSize, HaloSize, HaloMaterialID,\tCircleMaterialID, BurstMaterialID)": {
      "prefix": "CreateLensFlareEffect",
      "body": "CreateLensFlareEffect(${1:#Effect}, ${2:CameraID}, ${3:NodeID}, ${4:BurstSize}, ${5:HaloSize}, ${6:HaloMaterialID}, ${7:\tCircleMaterialID})$8",
      "description": "Create a new lens flare #Effect"
    },
    "CreateLight (#Light, Color [, x, y, z [, Flags]])": {
      "prefix": "CreateLight",
      "body": "CreateLight(${1:#Light})$2",
      "description": "Create a new #Light"
    },
    "CreateMail (#Mail, From$, Subject$ [, Encoding])": {
      "prefix": "CreateMail",
      "body": "CreateMail(${1:#Mail}, ${2:From.s})$3",
      "description": "Create a new mail"
    },
    "CreateMaterial (#Material, TextureID)": {
      "prefix": "CreateMaterial",
      "body": "CreateMaterial(${1:#Material})$2",
      "description": "Create a new #Material based on the specified Texture"
    },
    "CreateMenu (#Menu, WindowID)": {
      "prefix": "CreateMenu",
      "body": "CreateMenu(${1:#Menu})$2",
      "description": "Creates a new empty menu"
    },
    "CreateMesh (#Mesh [, Type [, Mode]])": {
      "prefix": "CreateMesh",
      "body": "CreateMesh(${1:#Mesh})$2",
      "description": "Create a new empty #Mesh"
    },
    "CreateMutex ()": {
      "prefix": "CreateMutex",
      "body": "CreateMutex()$1",
      "description": "Create a new mutex synchronisation object"
    },
    "CreateNetworkServer (ServerID, Port [, Type [, BindedIP$]])": {
      "prefix": "CreateNetworkServer",
      "body": "CreateNetworkServer(${1:ServerID}, ${2:Port})$3",
      "description": "Create a new network server on the local computer at the specified port"
    },
    "CreateNode (#Node [, x, y, z])": {
      "prefix": "CreateNode",
      "body": "CreateNode(${1:#Node})$2",
      "description": "Create a new #Node"
    },
    "CreateNodeAnimation (#NodeAnimation, NodeID, Length, Interpolation, RotationInterpolation)": {
      "prefix": "CreateNodeAnimation",
      "body": "CreateNodeAnimation(${1:#NodeAnimation}, ${2:NodeID}, ${3:Length}, ${4:Interpolation})$5",
      "description": "Create a new #NodeAnimation"
    },
    "CreateNodeAnimationKeyFrame (#NodeAnimation, Time, x, y, z)": {
      "prefix": "CreateNodeAnimationKeyFrame",
      "body": "CreateNodeAnimationKeyFrame(${1:#NodeAnimation}, ${2:Time}, ${3:x}, ${4:y})$5",
      "description": "Create a new keyframe for the #NodeAnimation"
    },
    "CreatePack (#Pack, Filename$ [, PluginID])": {
      "prefix": "CreatePack",
      "body": "CreatePack(${1:#Pack})$2",
      "description": "Creates a new empty pack file"
    },
    "CreateParticleEmitter (#ParticleEmitter, Width, Height, Depth, Type [, x, y, z])": {
      "prefix": "CreateParticleEmitter",
      "body": "CreateParticleEmitter(${1:#ParticleEmitter}, ${2:Width}, ${3:Height}, ${4:Depth})$5",
      "description": "Create a new #ParticleEmitter at the given position"
    },
    "CreatePopupImageMenu (#Menu [, Flags])": {
      "prefix": "CreatePopupImageMenu",
      "body": "CreatePopupImageMenu(${1:#Menu})$2",
      "description": "Creates a new empty popup menu with images support"
    },
    "CreatePopupMenu (#Menu)": {
      "prefix": "CreatePopupMenu",
      "body": "CreatePopupMenu(${1:#Menu})$2",
      "description": "Creates a new empty popup menu"
    },
    "CreatePreferences (Filename$ [, Flags])": {
      "prefix": "CreatePreferences",
      "body": "CreatePreferences(${1:Filename.s})$2",
      "description": "Creates a new empty preference file"
    },
    "CreateRegularExpression (#RegularExpression, Pattern$ [, Flags])": {
      "prefix": "CreateRegularExpression",
      "body": "CreateRegularExpression(${1:#RegularExpression})$2",
      "description": "Create a new regular expression"
    },
    "CreateRenderTexture (#Texture, CameraID, Width, Height [, Flags [, RenderTextureName$]])": {
      "prefix": "CreateRenderTexture",
      "body": "CreateRenderTexture(${1:#Texture}, ${2:CameraID}, ${3:Width})$4",
      "description": "Create a new render #Texture"
    },
    "CreateSemaphore ([InitialCount])": {
      "prefix": "CreateSemaphore",
      "body": "CreateSemaphore()$1",
      "description": "Create a new semaphore synchronisation object"
    },
    "CreateSpline (#Spline)": {
      "prefix": "CreateSpline",
      "body": "CreateSpline(${1:#Spline})$2",
      "description": "Create a new empty #Spline"
    },
    "CreateSprite (#Sprite, Width, Height [, Mode])": {
      "prefix": "CreateSprite",
      "body": "CreateSprite(${1:#Sprite}, ${2:Width})$3",
      "description": "Create a new blank sprite"
    },
    "CreateStatusBar (#StatusBar, WindowID)": {
      "prefix": "CreateStatusBar",
      "body": "CreateStatusBar(${1:#StatusBar})$2",
      "description": "Create and add an empty StatusBar to the specified WindowID"
    },
    "CreateTerrain (#Terrain, Size, WorldSize, Scale, NbLayers, Filename$, Extension$)": {
      "prefix": "CreateTerrain",
      "body": "CreateTerrain(${1:#Terrain}, ${2:Size}, ${3:WorldSize}, ${4:Scale}, ${5:NbLayers}, ${6:Filename.s})$7",
      "description": "Create a new #Terrain"
    },
    "CreateTerrainBody (#Terrain, Restitution, Friction)": {
      "prefix": "CreateTerrainBody",
      "body": "CreateTerrainBody(${1:#Terrain}, ${2:Restitution})$3",
      "description": "Add a static physic body to the #Terrain"
    },
    "CreateTexture (#Texture, Width, Height [, TextureName$])": {
      "prefix": "CreateTexture",
      "body": "CreateTexture(${1:#Texture}, ${2:Width}, ${3:Height})$4",
      "description": "Create a new blank #Texture"
    },
    "CreateThread(@ProcedureName(), *Value)": {
      "prefix": "CreateThread",
      "body": "CreateThread(${1:@Procedure()}, ${2:*Value})$3",
      "description": "Create a new thread running in the application background"
    },
    "CreateToolBar (#ToolBar, WindowID [, Flags])": {
      "prefix": "CreateToolBar",
      "body": "CreateToolBar(${1:#ToolBar}, ${2:WindowID})$3",
      "description": "Create an empty toolbar identified by the number \"#ToolBar\""
    },
    "CreateVertexAnimation (#Mesh, Animation$, Length)": {
      "prefix": "CreateVertexAnimation",
      "body": "CreateVertexAnimation(${1:#Mesh}, ${2:Animation.s})$3",
      "description": "Create a new vertex animation for the #mesh"
    },
    "CreateVertexPoseKeyFrame (#Mesh, Animation$, Track, Time)": {
      "prefix": "CreateVertexPoseKeyFrame",
      "body": "CreateVertexPoseKeyFrame(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4",
      "description": "Create a new keyframe to the #Mesh track"
    },
    "CreateVertexTrack (#Mesh, Animation$, Index)": {
      "prefix": "CreateVertexTrack",
      "body": "CreateVertexTrack(${1:#Mesh}, ${2:Animation.s})$3",
      "description": "Create a new track to the #Mesh animation"
    },
    "CreateWater (#Camera, x, y, z, Transparency, Flags)": {
      "prefix": "CreateWater",
      "body": "CreateWater(${1:#Camera}, ${2:x}, ${3:y}, ${4:z}, ${5:Transparency})$6",
      "description": "Create a water plane at the given position"
    },
    "CreateXML (#XML [, Encoding])": {
      "prefix": "CreateXML",
      "body": "CreateXML(${1:#XML})$2",
      "description": "Create a new empty XML tree"
    },
    "CreateXMLNode (ParentNode, Name$ [, PreviousNode [, Type]])": {
      "prefix": "CreateXMLNode",
      "body": "CreateXMLNode(${1:ParentNode})$2",
      "description": "Create a new node inside the XML tree"
    },
    "CryptRandom (Maximum)": {
      "prefix": "CryptRandom",
      "body": "CryptRandom(${1:Maximum})$2",
      "description": "Get a number from the cryptographic random number generator"
    },
    "CryptRandomData (*Buffer, Length)": {
      "prefix": "CryptRandomData",
      "body": "CryptRandomData(${1:*Buffer})$2",
      "description": "Fill a buffer with data from the cryptographic random number generator"
    },
    " [, Flags [, StartOffset.d]])": {
      "prefix": "CustomDashPath",
      "body": "CustomDashPath(${1:Width.d})$2",
      "description": "Draw a dashed line with custom dash lengths along the vector drawing path"
    },
    "DashPath (Width.d, Length.d [, Flags [, StartOffset.d]])": {
      "prefix": "DashPath",
      "body": "DashPath(${1:Width.d})$2",
      "description": "Draw an evenly dashed line along the vector drawing path"
    },
    "DatabaseColumnIndex (#Database, ColumnName$)": {
      "prefix": "DatabaseColumnIndex",
      "body": "DatabaseColumnIndex(${1:#Database})$2",
      "description": "Returns the zero-based index of the specified column name"
    },
    "DatabaseColumnName (#Database, Column)": {
      "prefix": "DatabaseColumnName",
      "body": "DatabaseColumnName(${1:#Database})$2",
      "description": "Returns the name of the specified column"
    },
    "DatabaseColumns (#Database)": {
      "prefix": "DatabaseColumns",
      "body": "DatabaseColumns(${1:#Database})$2",
      "description": "Returns the numbers of columns (fields) in the specified opened database"
    },
    "DatabaseColumnSize (#Database, Column)": {
      "prefix": "DatabaseColumnSize",
      "body": "DatabaseColumnSize(${1:#Database})$2",
      "description": "Returns the type of the specified column"
    },
    "DatabaseColumnType (#Database, Column)": {
      "prefix": "DatabaseColumnType",
      "body": "DatabaseColumnType(${1:#Database})$2",
      "description": "Returns the type of the specified column"
    },
    "DatabaseDriverDescription ()": {
      "prefix": "DatabaseDriverDescription",
      "body": "DatabaseDriverDescription()$1",
      "description": "Returns the description of the current database driver"
    },
    "DatabaseDriverName ()": {
      "prefix": "DatabaseDriverName",
      "body": "DatabaseDriverName()$1",
      "description": "Returns the name of the current database driver"
    },
    "DatabaseError ()": {
      "prefix": "DatabaseError",
      "body": "DatabaseError()$1",
      "description": "Returns last error (if any) in human readable form"
    },
    "DatabaseID (#Database)": {
      "prefix": "DatabaseID",
      "body": "DatabaseID(${1:#Database})$2",
      "description": "Returns the database handle for direct access with the related API"
    },
    "DatabaseQuery (#Database, Request$ [, Flags])": {
      "prefix": "DatabaseQuery",
      "body": "DatabaseQuery(${1:#Database})$2",
      "description": "Executes the SQL Request$ on the specified database"
    },
    "DatabaseUpdate (#Database, Request$)": {
      "prefix": "DatabaseUpdate",
      "body": "DatabaseUpdate(${1:#Database})$2",
      "description": "Executes the SQL Request$ on the specified database (update mode)"
    },
    "Date ([Year, Month, Day, Hour, Minute, Second])": {
      "prefix": "Date",
      "body": "Date()$1",
      "description": "Returns the number of seconds elapsed since the 1st January 1970"
    },
    "DateGadget (#Gadget, x, y, Width, Height [, Mask$ [, Date [, Flags]]])": {
      "prefix": "DateGadget",
      "body": "DateGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a Date/Time selector Gadget"
    },
    "Day (Date)": {
      "prefix": "Day",
      "body": "Day(${1:Date})$2",
      "description": "Returns the day value of the specified date (between 1 and 31)"
    },
    "DayOfWeek (Date)": {
      "prefix": "DayOfWeek",
      "body": "DayOfWeek(${1:Date})$2",
      "description": "Returns the day value in the week of the specified date (0=Sunday, 6=Saturday)"
    },
    "DayOfYear (Date)": {
      "prefix": "DayOfYear",
      "body": "DayOfYear(${1:Date})$2",
      "description": "Returns the number of days elapsed since the beginning of the year of the specified date (between 1 and 366)"
    },
    "DefaultPrinter ()": {
      "prefix": "DefaultPrinter",
      "body": "DefaultPrinter()$1",
      "description": "Use the default printer to print"
    },
    "DefineTerrainTile (#Terrain, TileX, TileY, HeightMap$, FlipX, FlipY)": {
      "prefix": "DefineTerrainTile",
      "body": "DefineTerrainTile(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:HeightMap.s}, ${5:FlipX})$6",
      "description": "Defines a new #Terrain tile"
    },
    "Degree (Angle)": {
      "prefix": "Degree",
      "body": "Degree(${1:Angle})$2",
      "description": "Converts the given angle from radian to degree"
    },
    "Delay (Time)": {
      "prefix": "Delay",
      "body": "Delay(${1:Time})$2",
      "description": "Waits the specified time (in milliseconds)"
    },
    "DeleteDirectory (SourceDirectory$, Pattern$ [, Flags])": {
      "prefix": "DeleteDirectory",
      "body": "DeleteDirectory(${1:SourceDirectory.s})$2",
      "description": "Delete the directory"
    },
    " [, Flags])": {
      "prefix": "ExtractXMLMap",
      "body": "ExtractXMLMap(${1:Node})$2",
      "description": "Extract an XML node into the specified Map()"
    },
    "DeleteFile (FileName$ [, Flags])": {
      "prefix": "DeleteFile",
      "body": "DeleteFile(${1:FileName.s})$2",
      "description": "Delete the specified file"
    },
    "DeleteFTPDirectory (#Ftp, Directory$)": {
      "prefix": "DeleteFTPDirectory",
      "body": "DeleteFTPDirectory(${1:#Ftp})$2",
      "description": "Delete a directory on the FTP server"
    },
    "DeleteFTPFile (#Ftp, Filename$)": {
      "prefix": "DeleteFTPFile",
      "body": "DeleteFTPFile(${1:#Ftp})$2",
      "description": "Delete a file on the FTP server"
    },
    " [, Key$])": {
      "prefix": "DeleteMapElement",
      "body": "DeleteMapElement(${1:Map()})$2",
      "description": "Remove the current element from the map"
    },
    "DeleteXMLNode (Node)": {
      "prefix": "DeleteXMLNode",
      "body": "DeleteXMLNode(${1:Node})$2",
      "description": "Delete the given XML node and all its children from its XML tree"
    },
    "DESFingerprint (Password$, Key$)": {
      "prefix": "DESFingerprint",
      "body": "DESFingerprint(${1:Password.s})$2",
      "description": "Returns the 13 characters DES (Unix Crypt: Salt2) hash code"
    },
    "DesktopDepth (#Desktop)": {
      "prefix": "DesktopDepth",
      "body": "DesktopDepth(${1:#Desktop})$2",
      "description": "Returns the depth (bits per pixels) of the specified desktop"
    },
    "DesktopFrequency (#Desktop)": {
      "prefix": "DesktopFrequency",
      "body": "DesktopFrequency(${1:#Desktop})$2",
      "description": "Returns the frequency (in Hz) of the specified desktop"
    },
    "DesktopHeight (#Desktop)": {
      "prefix": "DesktopHeight",
      "body": "DesktopHeight(${1:#Desktop})$2",
      "description": "Returns the height (in pixels) of the specified desktop"
    },
    "DesktopMouseX ()": {
      "prefix": "DesktopMouseX",
      "body": "DesktopMouseX()$1",
      "description": "Returns the absolute x mouse position"
    },
    "DesktopMouseY ()": {
      "prefix": "DesktopMouseY",
      "body": "DesktopMouseY()$1",
      "description": "Returns the absolute y mouse position"
    },
    "DesktopName (#Desktop)": {
      "prefix": "DesktopName",
      "body": "DesktopName(${1:#Desktop})$2",
      "description": "Returns the system name of the specified desktop, if any"
    },
    "DesktopWidth (#Desktop)": {
      "prefix": "DesktopWidth",
      "body": "DesktopWidth(${1:#Desktop})$2",
      "description": "Returns the width (in pixels) of the specified desktop"
    },
    "DesktopX (#Desktop)": {
      "prefix": "DesktopX",
      "body": "DesktopX(${1:#Desktop})$2",
      "description": "Returns X coordinate of the upper right desktop corner"
    },
    "DesktopY (#Desktop)": {
      "prefix": "DesktopY",
      "body": "DesktopY(${1:#Desktop})$2",
      "description": "Returns Y coordinate of the upper right desktop corner"
    },
    "DetachEntityObject (#Entity, ObjectID)": {
      "prefix": "DetachEntityObject",
      "body": "DetachEntityObject(${1:#Entity})$2",
      "description": "Detach the object from the #Entity"
    },
    "DetachNodeObject (#Node, ObjectID)": {
      "prefix": "DetachNodeObject",
      "body": "DetachNodeObject(${1:#Node})$2",
      "description": "Detach the object of the #Node"
    },
    "DetachRibbonEffect (#Effect, NodeID)": {
      "prefix": "DetachRibbonEffect",
      "body": "DetachRibbonEffect(${1:#Effect})$2",
      "description": "Detach the ribbon #Effect from the node"
    },
    "DialogError (#Dialog)": {
      "prefix": "DialogError",
      "body": "DialogError(${1:#Dialog})$2",
      "description": "Returns the error occured in the #Dialog creation"
    },
    "DialogGadget (#Dialog, Name$)": {
      "prefix": "DialogGadget",
      "body": "DialogGadget(${1:#Dialog})$2",
      "description": "Returns the specified #Gadget associated with the dialog"
    },
    "DialogID (#Dialog)": {
      "prefix": "DialogID",
      "body": "DialogID(${1:#Dialog})$2",
      "description": "Returns the unique ID which identifies the dialog in the operating system"
    },
    "DialogWindow (#Dialog)": {
      "prefix": "DialogWindow",
      "body": "DialogWindow(${1:#Dialog})$2",
      "description": "Returns the #Window associated with the dialog"
    },
    "DirectoryEntryAttributes (#Directory)": {
      "prefix": "DirectoryEntryAttributes",
      "body": "DirectoryEntryAttributes(${1:#Directory})$2",
      "description": "Return the attributes of the current entry in the directory"
    },
    "DirectoryEntryDate (#Directory, Type)": {
      "prefix": "DirectoryEntryDate",
      "body": "DirectoryEntryDate(${1:#Directory})$2",
      "description": "Return the modified/created/accessed date of the current entry in the directory"
    },
    "DirectoryEntryName (#Directory)": {
      "prefix": "DirectoryEntryName",
      "body": "DirectoryEntryName(${1:#Directory})$2",
      "description": "Return the name of the current entry in the directory"
    },
    "DirectoryEntrySize (#Directory)": {
      "prefix": "DirectoryEntrySize",
      "body": "DirectoryEntrySize(${1:#Directory})$2",
      "description": "Return the size of the current entry in the directory"
    },
    "DirectoryEntryType (#Directory)": {
      "prefix": "DirectoryEntryType",
      "body": "DirectoryEntryType(${1:#Directory})$2",
      "description": "Return the type of the current entry in the directory"
    },
    "DisableEntityBody (#Entity, Disable)": {
      "prefix": "DisableEntityBody",
      "body": "DisableEntityBody(${1:#Entity})$2",
      "description": "Disable the #Entity body, so the physics are ignored"
    },
    "DisableGadget (#Gadget, State)": {
      "prefix": "DisableGadget",
      "body": "DisableGadget(${1:#Gadget})$2",
      "description": "Disable or enable a gadget"
    },
    "DisableGadget3D (#Gadget3D, State)": {
      "prefix": "DisableGadget3D",
      "body": "DisableGadget3D(${1:#Gadget3D})$2",
      "description": "Disable or enable a gadget"
    },
    "DisableMaterialLighting (#Material, Disable)": {
      "prefix": "DisableMaterialLighting",
      "body": "DisableMaterialLighting(${1:#Material})$2",
      "description": "Disable the dynamic lighting on the #Material"
    },
    "DisableMenuItem (#Menu, MenuItem, State)": {
      "prefix": "DisableMenuItem",
      "body": "DisableMenuItem(${1:#Menu}, ${2:MenuItem})$3",
      "description": "Disable or enable a menu item"
    },
    "DisableParticleEmitter (#ParticleEmitter, State)": {
      "prefix": "DisableParticleEmitter",
      "body": "DisableParticleEmitter(${1:#ParticleEmitter})$2",
      "description": "Disable or enable a particle emitter"
    },
    "DisableToolBarButton (#ToolBar, ButtonID, State)": {
      "prefix": "DisableToolBarButton",
      "body": "DisableToolBarButton(${1:#ToolBar}, ${2:ButtonID})$3",
      "description": "Disable or enable the given toolbar button (1=Disable, 0=Enable)"
    },
    "DisableWindow (#Window, State)": {
      "prefix": "DisableWindow",
      "body": "DisableWindow(${1:#Window})$2",
      "description": "Disable all user input to the window"
    },
    "DisableWindow3D (#Window3D, State)": {
      "prefix": "DisableWindow3D",
      "body": "DisableWindow3D(${1:#Window3D})$2",
      "description": "Disable all user input to the window"
    },
    " [, x, y])": {
      "prefix": "DisplayPopupMenu",
      "body": "DisplayPopupMenu(${1:#Menu})$2",
      "description": "Display a previously created #PopupMenu"
    },
    "DisplaySprite (#Sprite, x, y)": {
      "prefix": "DisplaySprite",
      "body": "DisplaySprite(${1:#Sprite}, ${2:x})$3",
      "description": "Display the #Sprite at the specified position on the current sprite buffer"
    },
    "DisplayTransparentSprite (#Sprite, x, y [, Intensity [, Color]])": {
      "prefix": "DisplayTransparentSprite",
      "body": "DisplayTransparentSprite(${1:#Sprite}, ${2:x})$3",
      "description": "Display the #Sprite at the specified position on the current screen"
    },
    "DotPath (Width.d, Distance.d [, Flags [, StartOffset.d]])": {
      "prefix": "DotPath",
      "body": "DotPath(${1:Width.d})$2",
      "description": "Draw a dotted line along the vector drawing path"
    },
    "DoubleClickTime ()": {
      "prefix": "DoubleClickTime",
      "body": "DoubleClickTime()$1",
      "description": "Returns the systen setting for the double-click time in milliseconds"
    },
    "DragFiles (Files$ [, Actions])": {
      "prefix": "DragFiles",
      "body": "DragFiles(${1:Files.s})$2",
      "description": "Start a Drag and Drop operation with a list of Files"
    },
    "DragImage (ImageID [, Actions])": {
      "prefix": "DragImage",
      "body": "DragImage(${1:ImageID})$2",
      "description": "Start a Drag and Drop operation with the given Image"
    },
    ", Count [, Actions])": {
      "prefix": "DragOSFormats",
      "body": "DragOSFormats(${1:Formats()})$2",
      "description": "Start a Drag and Drop operation with multiple clipboard formats"
    },
    "DragPrivate (Type [, Actions])": {
      "prefix": "DragPrivate",
      "body": "DragPrivate(${1:Type})$2",
      "description": "Start a Drag and Drop operation within the current program only with the given private type"
    },
    "DragText (Text$ [, Actions])": {
      "prefix": "DragText",
      "body": "DragText(${1:Text.s})$2",
      "description": "Start a Drag and Drop operation with the given Text"
    },
    "DrawAlphaImage (ImageID, x, y [, Alpha])": {
      "prefix": "DrawAlphaImage",
      "body": "DrawAlphaImage(${1:ImageID}, ${2:x})$3",
      "description": "Display the image on the current output, using the alpha information"
    },
    "DrawImage (ImageID, x, y [, Width, Height])": {
      "prefix": "DrawImage",
      "body": "DrawImage(${1:ImageID}, ${2:x})$3",
      "description": "Display the image on the current output. On the fly resize is possible"
    },
    "DrawingBuffer ()": {
      "prefix": "DrawingBuffer",
      "body": "DrawingBuffer()$1",
      "description": "Returns the current drawing memory buffer"
    },
    "DrawingBufferPitch ()": {
      "prefix": "DrawingBufferPitch",
      "body": "DrawingBufferPitch()$1",
      "description": "Returns the number of bytes need for a full line"
    },
    "DrawingBufferPixelFormat ()": {
      "prefix": "DrawingBufferPixelFormat",
      "body": "DrawingBufferPixelFormat()$1",
      "description": "Returns the pixel format of the current drawing buffer"
    },
    "DrawingMode (Mode)": {
      "prefix": "DrawingMode",
      "body": "DrawingMode(${1:Mode})$2",
      "description": "Change the drawing mode for graphic and text output"
    },
    "DrawRotatedText (x, y, Text$, Angle.f [, Color])": {
      "prefix": "DrawRotatedText",
      "body": "DrawRotatedText(${1:x}, ${2:y}, ${3:Text.s})$4",
      "description": "Display the given string at the given angle"
    },
    "DrawText (x, y, Text$ [, FrontColor [, BackColor]])": {
      "prefix": "DrawText",
      "body": "DrawText(${1:x}, ${2:y})$3",
      "description": "Display the given string on the current output"
    },
    "DrawVectorImage (ImageID [, Alpha [, Width.d, Height.d]])": {
      "prefix": "DrawVectorImage",
      "body": "DrawVectorImage(${1:ImageID})$2",
      "description": "Draw an image to the vector output"
    },
    "DrawVectorParagraph (Text$, Width.d, Height.d [, Flags])": {
      "prefix": "DrawVectorParagraph",
      "body": "DrawVectorParagraph(${1:Text.s}, ${2:Width.d})$3",
      "description": "Draw a paragraph of text inside a bounding box"
    },
    "DrawVectorText (Text$)": {
      "prefix": "DrawVectorText",
      "body": "DrawVectorText(${1:Text.s})$2",
      "description": "Draw text directly to the vector drawing output"
    },
    "EditorGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "EditorGadget",
      "body": "EditorGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create an Editor gadget in the current GadgetList"
    },
    "EditorGadget3D (#Gadget3D, x, y, Width, Height [, Flags])": {
      "prefix": "EditorGadget3D",
      "body": "EditorGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create an Editor gadget in the current GadgetList"
    },
    "EjectAudioCD (State)": {
      "prefix": "EjectAudioCD",
      "body": "EjectAudioCD(${1:State})$2",
      "description": "Eject (open) or close the current CD-Drive"
    },
    "ElapsedMilliseconds ()": {
      "prefix": "ElapsedMilliseconds",
      "body": "ElapsedMilliseconds()$1",
      "description": "Returns the number of milliseconds elapsed since the computer start"
    },
    "Ellipse (x, y, RadiusX, RadiusY [, Color])": {
      "prefix": "Ellipse",
      "body": "Ellipse(${1:x}, ${2:y}, ${3:RadiusX})$4",
      "description": "Draw a filled ellipse on the current output"
    },
    "EllipticalGradient (x, y, RadiusX, RadiusY)": {
      "prefix": "EllipticalGradient",
      "body": "EllipticalGradient(${1:x}, ${2:y}, ${3:RadiusX})$4",
      "description": "Use an elliptical gradient when gradient drawing is enabled"
    },
    "EnableGadgetDrop (#Gadget, Format, Actions [, PrivateType])": {
      "prefix": "EnableGadgetDrop",
      "body": "EnableGadgetDrop(${1:#Gadget}, ${2:Format})$3",
      "description": "Enable the Gadget as a Drag and Drop target for the given Format"
    },
    "EnableGraphicalConsole (State)": {
      "prefix": "EnableGraphicalConsole",
      "body": "EnableGraphicalConsole(${1:State})$2",
      "description": "Enable or disable the graphical console"
    },
    "EnableHingeJointAngularMotor (#Joint, Enable, TargetVelocity, MaxMotorImpulse)": {
      "prefix": "EnableHingeJointAngularMotor",
      "body": "EnableHingeJointAngularMotor(${1:#Joint}, ${2:Enable}, ${3:TargetVelocity})$4",
      "description": "Enable the angular motor on the hinge #Joint"
    },
    "EnableManualEntityBoneControl (#Entity, Bone$, State, InheritOrientation)": {
      "prefix": "EnableManualEntityBoneControl",
      "body": "EnableManualEntityBoneControl(${1:#Entity}, ${2:Bone.s}, ${3:State})$4",
      "description": "Enable the #Entity bone manual control"
    },
    "EnableWindowDrop (#Window, Format, Actions [, PrivateType])": {
      "prefix": "EnableWindowDrop",
      "body": "EnableWindowDrop(${1:#Window}, ${2:Format})$3",
      "description": "Enable the Window as a Drag and Drop target for the given Format"
    },
    "EnableWorldCollisions (Enable)": {
      "prefix": "EnableWorldCollisions",
      "body": "EnableWorldCollisions(${1:Enable})$2",
      "description": "Enable the world collisions"
    },
    "EnableWorldPhysics (Enable)": {
      "prefix": "EnableWorldPhysics",
      "body": "EnableWorldPhysics(${1:Enable})$2",
      "description": "Enable the world physics"
    },
    "EncodeImage (#Image [, Format [, Flags [, Depth]]])": {
      "prefix": "EncodeImage",
      "body": "EncodeImage(${1:#Image})$2",
      "description": "Encode the specified image into memory"
    },
    "EndVectorLayer ()": {
      "prefix": "EndVectorLayer",
      "body": "EndVectorLayer()$1",
      "description": "End a transparent layer for vector drawing"
    },
    "Engine3DStatus (Type)": {
      "prefix": "Engine3DStatus",
      "body": "Engine3DStatus(${1:Type})$2",
      "description": "Get the state of the 3D engine"
    },
    "EntityAngularFactor (#Entity, x, y, z)": {
      "prefix": "EntityAngularFactor",
      "body": "EntityAngularFactor(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Change the angular factor of the #Entity"
    },
    "EntityAnimationBlendMode (#Entity, Mode)": {
      "prefix": "EntityAnimationBlendMode",
      "body": "EntityAnimationBlendMode(${1:#Entity})$2",
      "description": "Change the entity blend mode"
    },
    "EntityAnimationStatus (#Entity, Animation$)": {
      "prefix": "EntityAnimationStatus",
      "body": "EntityAnimationStatus(${1:#Entity})$2",
      "description": "Return the specified #Entity animation status"
    },
    "EntityBonePitch (#Entity, Bone$)": {
      "prefix": "EntityBonePitch",
      "body": "EntityBonePitch(${1:#Entity})$2",
      "description": "Return the pitch of the bone, relative to the #Entity"
    },
    "EntityBoneRoll (#Entity, Bone$)": {
      "prefix": "EntityBoneRoll",
      "body": "EntityBoneRoll(${1:#Entity})$2",
      "description": "Return the roll of the bone, relative to the #Entity"
    },
    "EntityBoneX (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ])": {
      "prefix": "EntityBoneX",
      "body": "EntityBoneX(${1:#Entity})$2",
      "description": "Return the x position of the bone, relative to the #Entity"
    },
    "EntityBoneY (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ])": {
      "prefix": "EntityBoneY",
      "body": "EntityBoneY(${1:#Entity})$2",
      "description": "Return the y position of the bone, relative to the #Entity"
    },
    "EntityBoneYaw (#Entity, Bone$)": {
      "prefix": "EntityBoneYaw",
      "body": "EntityBoneYaw(${1:#Entity})$2",
      "description": "Return the yaw of the bone, relative to the #Entity"
    },
    "EntityBoneZ (#Entity, Bone$ [, OffsetX, OffsetY, OffsetZ])": {
      "prefix": "EntityBoneZ",
      "body": "EntityBoneZ(${1:#Entity})$2",
      "description": "Return the z position of the bone, relative to the #Entity"
    },
    "EntityBoundingBox (#Entity, Flags)": {
      "prefix": "EntityBoundingBox",
      "body": "EntityBoundingBox(${1:#Entity})$2",
      "description": "Return the position of the #Entity bounding box"
    },
    "EntityCollide (#Entity, #Entity2)": {
      "prefix": "EntityCollide",
      "body": "EntityCollide(${1:#Entity})$2",
      "description": "Test if the entities are colliding"
    },
    "EntityCubeMapTexture (#Texture, #Entity)": {
      "prefix": "EntityCubeMapTexture",
      "body": "EntityCubeMapTexture(${1:#Texture})$2",
      "description": "Apply the cube map #Texture to the #Entity"
    },
    "EntityCustomParameter (#Entity, SubEntityIndex, ParameterIndex, Value1, Value2, Value3, Value4)": {
      "prefix": "EntityCustomParameter",
      "body": "EntityCustomParameter(${1:#Entity}, ${2:SubEntityIndex}, ${3:ParameterIndex}, ${4:Value1}, ${5:Value2}, ${6:Value3})$7",
      "description": "Set a custom parameter to the #Entity shader script"
    },
    "EntityFixedYawAxis (#Entity, Mode [, VectorX, VectorY, VectorZ])": {
      "prefix": "EntityFixedYawAxis",
      "body": "EntityFixedYawAxis(${1:#Entity})$2",
      "description": "Change the way the yaw axis is managed"
    },
    "EntityID (#Entity)": {
      "prefix": "EntityID",
      "body": "EntityID(${1:#Entity})$2",
      "description": "Return the unique #Entity system identifier"
    },
    "EntityLinearFactor (#Entity, x, y, z)": {
      "prefix": "EntityLinearFactor",
      "body": "EntityLinearFactor(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Change the linear factor of the #Entity"
    },
    "EntityLookAt (#Entity, x, y, z [, DirectionX, DirectionY, DirectionZ])": {
      "prefix": "EntityLookAt",
      "body": "EntityLookAt(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Change the #Entity orientation to look at the specified point"
    },
    "EntityMesh (#Entity, MeshID)": {
      "prefix": "EntityMesh",
      "body": "EntityMesh(${1:#Entity})$2",
      "description": "Change the #Entity mesh with the new one"
    },
    "EntityParentNode (#Entity)": {
      "prefix": "EntityParentNode",
      "body": "EntityParentNode(${1:#Entity})$2",
      "description": "Return the parent #Entity node"
    },
    "EntityPitch (#Entity [, Mode])": {
      "prefix": "EntityPitch",
      "body": "EntityPitch(${1:#Entity})$2",
      "description": "Return the pitch of the #Entity"
    },
    "EntityRenderMode (#Entity, Mode)": {
      "prefix": "EntityRenderMode",
      "body": "EntityRenderMode(${1:#Entity})$2",
      "description": "Change the way the #Entity will be rendered"
    },
    "EntityRoll (#Entity [, Mode])": {
      "prefix": "EntityRoll",
      "body": "EntityRoll(${1:#Entity})$2",
      "description": "Return the roll of the #Entity"
    },
    "EntityVelocity (#Entity, x, y, z)": {
      "prefix": "EntityVelocity",
      "body": "EntityVelocity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Change the linear velocity of the #Entity"
    },
    "EntityX (#Entity [, Mode])": {
      "prefix": "EntityX",
      "body": "EntityX(${1:#Entity})$2",
      "description": "Return the x position of the #Entity"
    },
    "EntityY (#Entity [, Mode])": {
      "prefix": "EntityY",
      "body": "EntityY(${1:#Entity})$2",
      "description": "Return the y position of the #Entity"
    },
    "EntityYaw (#Entity [, Mode])": {
      "prefix": "EntityYaw",
      "body": "EntityYaw(${1:#Entity})$2",
      "description": "Return the yaw of the #Entity"
    },
    "EntityZ (#Entity [, Mode])": {
      "prefix": "EntityZ",
      "body": "EntityZ(${1:#Entity})$2",
      "description": "Return the z position of the #Entity"
    },
    "EnvironmentVariableName ()": {
      "prefix": "EnvironmentVariableName",
      "body": "EnvironmentVariableName()$1",
      "description": "Get the name of the currently examined environment variable"
    },
    "EnvironmentVariableValue ()": {
      "prefix": "EnvironmentVariableValue",
      "body": "EnvironmentVariableValue()$1",
      "description": "Get the value of the currently examined environment variable"
    },
    "Eof (#File)": {
      "prefix": "Eof",
      "body": "Eof(${1:#File})$2",
      "description": "Returns not null if the end of file has been reached. 0 Else"
    },
    "ErrorAddress ()": {
      "prefix": "ErrorAddress",
      "body": "ErrorAddress()$1",
      "description": "get the Code address at which the error happened"
    },
    "ErrorCode ()": {
      "prefix": "ErrorCode",
      "body": "ErrorCode()$1",
      "description": "Returns the current error code"
    },
    "ErrorFile ()": {
      "prefix": "ErrorFile",
      "body": "ErrorFile()$1",
      "description": "Returns the source filename in which the current error occured"
    },
    "ErrorLine ()": {
      "prefix": "ErrorLine",
      "body": "ErrorLine()$1",
      "description": "Returns the line number at which the current error occured"
    },
    "ErrorMessage ([ErrorNumber])": {
      "prefix": "ErrorMessage",
      "body": "ErrorMessage()$1",
      "description": "Returns a string message for the current error or the given error number"
    },
    "ErrorRegister (Register)": {
      "prefix": "ErrorRegister",
      "body": "ErrorRegister(${1:Register})$2",
      "description": "get the content of a register at the time of the error"
    },
    "ErrorTargetAddress ()": {
      "prefix": "ErrorTargetAddress",
      "body": "ErrorTargetAddress()$1",
      "description": "get the Memory address for a memory access error"
    },
    "EscapeString (String [, Flags])": {
      "prefix": "EscapeString",
      "body": "EscapeString(${1:String})$2",
      "description": "Returns the escaped string"
    },
    "EventClient ()": {
      "prefix": "EventClient",
      "body": "EventClient()$1",
      "description": "Server side: allow to know which client has sent the data"
    },
    "EventData ()": {
      "prefix": "EventData",
      "body": "EventData()$1",
      "description": "Returns the data associated to the event"
    },
    "EventDropAction ()": {
      "prefix": "EventDropAction",
      "body": "EventDropAction()$1",
      "description": "Return the action that is to be taken with the dropped data"
    },
    "EventDropBuffer ()": {
      "prefix": "EventDropBuffer",
      "body": "EventDropBuffer()$1",
      "description": "Return the raw memory buffer of the data received from a Drag and Drop event"
    },
    "EventDropFiles ()": {
      "prefix": "EventDropFiles",
      "body": "EventDropFiles()$1",
      "description": "Return the file names received from a Drag and Drop event"
    },
    "EventDropImage (#Image [, Depth])": {
      "prefix": "EventDropImage",
      "body": "EventDropImage(${1:#Image})$2",
      "description": "Create a new Image from the data received from a Drag and Drop event"
    },
    "EventDropPrivate ()": {
      "prefix": "EventDropPrivate",
      "body": "EventDropPrivate()$1",
      "description": "Return the type that was specified when starting a private Drag and Drop operation"
    },
    "EventDropSize ()": {
      "prefix": "EventDropSize",
      "body": "EventDropSize()$1",
      "description": "Return the size of the buffer of data received from a Drag and Drop event"
    },
    "EventDropText ()": {
      "prefix": "EventDropText",
      "body": "EventDropText()$1",
      "description": "Return the text received from a Drag and Drop event"
    },
    "EventDropType ()": {
      "prefix": "EventDropType",
      "body": "EventDropType()$1",
      "description": "Return the type of format that was received from the Drag and Drop event"
    },
    "EventDropX ()": {
      "prefix": "EventDropX",
      "body": "EventDropX()$1",
      "description": "Return the X position where the drop event took place in the gadget/window"
    },
    "EventDropY ()": {
      "prefix": "EventDropY",
      "body": "EventDropY()$1",
      "description": "Return the Y position where the drop event took place in the gadget/window"
    },
    "EventGadget ()": {
      "prefix": "EventGadget",
      "body": "EventGadget()$1",
      "description": "Returns which gadget has been pushed (return the #Gadget identifier)"
    },
    "EventGadget3D ()": {
      "prefix": "EventGadget3D",
      "body": "EventGadget3D()$1",
      "description": "Returns which gadget has been pushed (return the #Gadget3D number)"
    },
    "EventMenu ()": {
      "prefix": "EventMenu",
      "body": "EventMenu()$1",
      "description": "Returns which menu item has been selected (return the #MenuItem identifier)"
    },
    "EventServer ()": {
      "prefix": "EventServer",
      "body": "EventServer()$1",
      "description": "Server side: allow to know on which server the data has been received"
    },
    "EventTimer ()": {
      "prefix": "EventTimer",
      "body": "EventTimer()$1",
      "description": "Returns the Timer that fired the event"
    },
    "EventType ()": {
      "prefix": "EventType",
      "body": "EventType()$1",
      "description": "After a WindowEvent() or WaitWindowEvent() command, use this function to determine of which type the event is"
    },
    "EventType3D ()": {
      "prefix": "EventType3D",
      "body": "EventType3D()$1",
      "description": "After a WindowEvent3D() command, use this function to determine of which type the event is"
    },
    "EventWindow ()": {
      "prefix": "EventWindow",
      "body": "EventWindow()$1",
      "description": "Returns on which window the event has occured (return the #Window identifier)"
    },
    "EventWindow3D ()": {
      "prefix": "EventWindow3D",
      "body": "EventWindow3D()$1",
      "description": "Returns on which window the event has occured (return the #Window3D number)"
    },
    "ExamineAssembly (*Address [, *EndAddress])": {
      "prefix": "ExamineAssembly",
      "body": "ExamineAssembly(${1:*Address})$2",
      "description": "Start disassembling code at the given address"
    },
    "ExamineDatabaseDrivers ()": {
      "prefix": "ExamineDatabaseDrivers",
      "body": "ExamineDatabaseDrivers()$1",
      "description": "Examines the installed database drivers available on the system"
    },
    "ExamineDesktops ()": {
      "prefix": "ExamineDesktops",
      "body": "ExamineDesktops()$1",
      "description": "Retrieves information about user's desktops and returns the number of desktops"
    },
    "ExamineDirectory (#Directory, DirectoryName$, Pattern$)": {
      "prefix": "ExamineDirectory",
      "body": "ExamineDirectory(${1:#Directory}, ${2:DirectoryName.s})$3",
      "description": "Start to examine the specified directory for future listing"
    },
    "ExamineEnvironmentVariables ()": {
      "prefix": "ExamineEnvironmentVariables",
      "body": "ExamineEnvironmentVariables()$1",
      "description": "Start examining the environment block"
    },
    "ExamineFTPDirectory (#Ftp)": {
      "prefix": "ExamineFTPDirectory",
      "body": "ExamineFTPDirectory(${1:#Ftp})$2",
      "description": "Examine the current directory on the FTP server"
    },
    "ExamineIPAddresses ([Format])": {
      "prefix": "ExamineIPAddresses",
      "body": "ExamineIPAddresses()$1",
      "description": "Start to examine the host current IPs"
    },
    "ExamineJoystick (#Joystick)": {
      "prefix": "ExamineJoystick",
      "body": "ExamineJoystick(${1:#Joystick})$2",
      "description": "Examine the current state of the #Joystick"
    },
    "ExamineJSONMembers (*JSONValue)": {
      "prefix": "ExamineJSONMembers",
      "body": "ExamineJSONMembers(${1:*JSONValue})$2",
      "description": "Examine the members of a JSON object"
    },
    "ExamineKeyboard ()": {
      "prefix": "ExamineKeyboard",
      "body": "ExamineKeyboard()$1",
      "description": "Update the keyboard state"
    },
    "ExamineMouse ()": {
      "prefix": "ExamineMouse",
      "body": "ExamineMouse()$1",
      "description": "Update the mouse state"
    },
    "ExaminePack (#Pack)": {
      "prefix": "ExaminePack",
      "body": "ExaminePack(${1:#Pack})$2",
      "description": "Examine the pack content"
    },
    "ExaminePreferenceGroups ()": {
      "prefix": "ExaminePreferenceGroups",
      "body": "ExaminePreferenceGroups()$1",
      "description": "Start examining the groups in the preference file"
    },
    "ExaminePreferenceKeys ()": {
      "prefix": "ExaminePreferenceKeys",
      "body": "ExaminePreferenceKeys()$1",
      "description": "Start examining the keys in the current group of the preference file"
    },
    "ExamineRegularExpression (#RegularExpression, String$)": {
      "prefix": "ExamineRegularExpression",
      "body": "ExamineRegularExpression(${1:#RegularExpression})$2",
      "description": "Examine each match of the regular expression individually"
    },
    "ExamineScreenModes ()": {
      "prefix": "ExamineScreenModes",
      "body": "ExamineScreenModes()$1",
      "description": "Examines all the available screen mode"
    },
    "ExamineWorldCollisions (Contacts)": {
      "prefix": "ExamineWorldCollisions",
      "body": "ExamineWorldCollisions(${1:Contacts})$2",
      "description": "Start to examine the occured collisions in the world"
    },
    "ExamineXMLAttributes (Node)": {
      "prefix": "ExamineXMLAttributes",
      "body": "ExamineXMLAttributes(${1:Node})$2",
      "description": "Examine the attribute list of the given XML node"
    },
    "Exp (Exponent)": {
      "prefix": "Exp",
      "body": "Exp(${1:Exponent})$2",
      "description": "Returns the e^Exponent"
    },
    "ExplorerComboGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags])": {
      "prefix": "ExplorerComboGadget",
      "body": "ExplorerComboGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a File/Directory Combo Gadget"
    },
    "ExplorerListGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags])": {
      "prefix": "ExplorerListGadget",
      "body": "ExplorerListGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a File/Directory List Gadget"
    },
    "ExplorerTreeGadget (#Gadget, x, y, Width, Height, Directory$ [, Flags])": {
      "prefix": "ExplorerTreeGadget",
      "body": "ExplorerTreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create a File/Directory Tree"
    },
    "ExportJSON (#JSON, *Buffer, Size [, Flags])": {
      "prefix": "ExportJSON",
      "body": "ExportJSON(${1:#JSON}, ${2:*Buffer})$3",
      "description": "Export JSON data to a memory buffer"
    },
    "ExportJSONSize (#JSON [, Flags])": {
      "prefix": "ExportJSONSize",
      "body": "ExportJSONSize(${1:#JSON})$2",
      "description": "Get the size that JSON data needs for the ExportJSON() function"
    },
    "ExportXML (#XML, *Address, Size [, Flags])": {
      "prefix": "ExportXML",
      "body": "ExportXML(${1:#XML}, ${2:*Address})$3",
      "description": "Export a XML tree to a memory buffer"
    },
    "ExportXMLSize (#XML [, Flags])": {
      "prefix": "ExportXMLSize",
      "body": "ExportXMLSize(${1:#XML})$2",
      "description": "Get the number of bytes required to export a XML tree"
    },
    "ExtractJSONStructure (*JSONValue, *Buffer, Structure)": {
      "prefix": "ExtractJSONStructure",
      "body": "ExtractJSONStructure(${1:*JSONValue}, ${2:*Buffer})$3",
      "description": "Extract a JSON value into the specified structure"
    },
    "ExtractXMLStructure (Node, *Buffer, Structure [, Flags])": {
      "prefix": "ExtractXMLStructure",
      "body": "ExtractXMLStructure(${1:Node}, ${2:*Buffer})$3",
      "description": "Extract an XML node into the specified structure"
    },
    "FetchEntityMaterial (#Entity, #Material, [, SubEntity])": {
      "prefix": "FetchEntityMaterial",
      "body": "FetchEntityMaterial(${1:#Entity}, ${2:#Material})$3",
      "description": "Fetch the #Entity material"
    },
    "FetchOrientation (ObjectID [, Mode])": {
      "prefix": "FetchOrientation",
      "body": "FetchOrientation(${1:ObjectID})$2",
      "description": "Fetch the orientation for the specified object (use GetX(), GetY(), GetZ() and GetW() to get the values)"
    },
    "FileBuffersSize (#File, Size)": {
      "prefix": "FileBuffersSize",
      "body": "FileBuffersSize(${1:#File})$2",
      "description": "Change the size of the buffers for the specified file"
    },
    "FileFingerprint (Filename$ , Plugin [, Bits [, Offset [, Length]]])": {
      "prefix": "FileFingerprint",
      "body": "FileFingerprint(${1:Filename.s})$2",
      "description": "Returns the fingerprint of the file"
    },
    "FileID (#File)": {
      "prefix": "FileID",
      "body": "FileID(${1:#File})$2",
      "description": "Returns the unique ID which identifies the file in the operating system"
    },
    "FileSeek (#File, NewPosition [, Mode])": {
      "prefix": "FileSeek",
      "body": "FileSeek(${1:#File})$2",
      "description": "Change the read/write pointer position of the specified file"
    },
    "FileSize (FileName$)": {
      "prefix": "FileSize",
      "body": "FileSize(${1:FileName.s})$2",
      "description": "Return the size of the specified file"
    },
    "FillArea (x, y, OutlineColor [, FillColor])": {
      "prefix": "FillArea",
      "body": "FillArea(${1:x}, ${2:y})$3",
      "description": "Fill a shape with the specified color"
    },
    "FillMemory (Memory, Size [, Value [, Type]])": {
      "prefix": "FillMemory",
      "body": "FillMemory(${1:Memory})$2",
      "description": "Fill a memory area with the specified value"
    },
    "FillPath ([Flags])": {
      "prefix": "FillPath",
      "body": "FillPath()$1",
      "description": "Fill the area defined by the vector drawing path"
    },
    "FillVectorOutput ()": {
      "prefix": "FillVectorOutput",
      "body": "FillVectorOutput()$1",
      "description": "Fill the entire vector drawing output with the drawing source"
    },
    ", Key$)": {
      "prefix": "FindMapElement",
      "body": "FindMapElement(${1:Map()})$2",
      "description": "Find the specified element in the map"
    },
    "FindString (String$, StringToFind$ [, StartPosition [, Mode]])": {
      "prefix": "FindString",
      "body": "FindString(${1:String.s})$2",
      "description": "Returns the Position of StringToFind$"
    },
    "Fingerprint (*Buffer, Size, Plugin [, Bits])": {
      "prefix": "Fingerprint",
      "body": "Fingerprint(${1:*Buffer}, ${2:Size})$3",
      "description": "Returns the fingerprint of the specified buffer"
    },
    "FinishCipher (#Cipher)": {
      "prefix": "FinishCipher",
      "body": "FinishCipher(${1:#Cipher})$2",
      "description": "Free all the resources allocated by the #Cipher"
    },
    "FinishDatabaseQuery (#Database)": {
      "prefix": "FinishDatabaseQuery",
      "body": "FinishDatabaseQuery(${1:#Database})$2",
      "description": "Finish a database query and release associated memory"
    },
    "FinishDirectory (#Directory)": {
      "prefix": "FinishDirectory",
      "body": "FinishDirectory(${1:#Directory})$2",
      "description": "Finish the examine of the directory"
    },
    "FinishFastCGIRequest ()": {
      "prefix": "FinishFastCGIRequest",
      "body": "FinishFastCGIRequest()$1",
      "description": "Finish the current FastCGI request"
    },
    "FinishFingerprint (#Fingerprint)": {
      "prefix": "FinishFingerprint",
      "body": "FinishFingerprint(${1:#Fingerprint})$2",
      "description": "Returns the calculated fingerprint string and frees all resources"
    },
    "FinishFTPDirectory (#Ftp)": {
      "prefix": "FinishFTPDirectory",
      "body": "FinishFTPDirectory(${1:#Ftp})$2",
      "description": "Free the data allocated with ExamineFTPDirectory"
    },
    "FinishHTTP (HttpConnection)": {
      "prefix": "FinishHTTP",
      "body": "FinishHTTP(${1:HttpConnection})$2",
      "description": "Release the resources of the specified HTTP connection"
    },
    "FirstDatabaseRow (#Database)": {
      "prefix": "FirstDatabaseRow",
      "body": "FirstDatabaseRow(${1:#Database})$2",
      "description": "Retrieves information about the first database row"
    },
    "FirstWorldCollisionEntity ()": {
      "prefix": "FirstWorldCollisionEntity",
      "body": "FirstWorldCollisionEntity()$1",
      "description": "First entity of the current collision"
    },
    "FlipBuffers ()": {
      "prefix": "FlipBuffers",
      "body": "FlipBuffers()$1",
      "description": "Flip the back and front buffer on the current screen"
    },
    "FlipCoordinatesX (AxisX.d [, System])": {
      "prefix": "FlipCoordinatesX",
      "body": "FlipCoordinatesX(${1:AxisX.d})$2",
      "description": "Flip the X coordinates of the vector drawing coordinate system along an axis"
    },
    "FlipCoordinatesY (AxisY.d [, System])": {
      "prefix": "FlipCoordinatesY",
      "body": "FlipCoordinatesY(${1:AxisY.d})$2",
      "description": "Flip the Y coordinates of the vector drawing coordinate system along an axis"
    },
    "FlushFileBuffers (#File)": {
      "prefix": "FlushFileBuffers",
      "body": "FlushFileBuffers(${1:#File})$2",
      "description": "Forces the write of the internal file buffer to the disk"
    },
    "FlushPreferenceBuffers ()": {
      "prefix": "FlushPreferenceBuffers",
      "body": "FlushPreferenceBuffers()$1",
      "description": "Write the current preferences to disk"
    },
    "Fog (Color, Intensity, StartDistance, EndDistance)": {
      "prefix": "Fog",
      "body": "Fog(${1:Color}, ${2:Intensity}, ${3:StartDistance})$4",
      "description": "Display a fog effect"
    },
    "FontID (#Font)": {
      "prefix": "FontID",
      "body": "FontID(${1:#Font})$2",
      "description": "Returns the unique ID which identifies the font in the operating system"
    },
    "FontRequester (FontName$, FontSize, Flags [, Color, [Style]])": {
      "prefix": "FontRequester",
      "body": "FontRequester(${1:FontName.s}, ${2:FontSize})$3",
      "description": "Open the standard requester to choose a font"
    },
    "FormatDate (Mask$, Date)": {
      "prefix": "FormatDate",
      "body": "FormatDate(${1:Mask.s})$2",
      "description": "Returns a string representation of the Date, according to the specified Mask$"
    },
    "FormatXML (#XML, Flags [, IndentStep])": {
      "prefix": "FormatXML",
      "body": "FormatXML(${1:#XML})$2",
      "description": "Clean up the XML for a better look"
    },
    "FrameGadget (#Gadget, x, y, Width, Height, Text$ [, Flags])": {
      "prefix": "FrameGadget",
      "body": "FrameGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a frame gadget in the current GadgetList"
    },
    "FrameGadget3D (#Gadget3D, x, y, Width, Height, Text$)": {
      "prefix": "FrameGadget3D",
      "body": "FrameGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Frame3D gadget in the current GadgetList"
    },
    "FreeBillboardGroup (#BillboardGroup)": {
      "prefix": "FreeBillboardGroup",
      "body": "FreeBillboardGroup(${1:#BillboardGroup})$2",
      "description": "Free the specified #BillboardGroup and all its billboards"
    },
    "FreeCamera (#Camera)": {
      "prefix": "FreeCamera",
      "body": "FreeCamera(${1:#Camera})$2",
      "description": "Free the specified #Camera"
    },
    "FreeDialog (#Dialog)": {
      "prefix": "FreeDialog",
      "body": "FreeDialog(${1:#Dialog})$2",
      "description": "Frees the specified dialog"
    },
    "FreeEffect (#Effect)": {
      "prefix": "FreeEffect",
      "body": "FreeEffect(${1:#Effect})$2",
      "description": "Free the specified #Effect"
    },
    "FreeEntity (#Entity)": {
      "prefix": "FreeEntity",
      "body": "FreeEntity(${1:#Entity})$2",
      "description": "Free the specified #Entity"
    },
    "FreeEntityBody (#Entity)": {
      "prefix": "FreeEntityBody",
      "body": "FreeEntityBody(${1:#Entity})$2",
      "description": "Free the body associated with the #Entity"
    },
    "FreeEntityJoints (#Entity)": {
      "prefix": "FreeEntityJoints",
      "body": "FreeEntityJoints(${1:#Entity})$2",
      "description": "Free all joints associated with the #Entity"
    },
    "FreeFont (#Font)": {
      "prefix": "FreeFont",
      "body": "FreeFont(${1:#Font})$2",
      "description": "Close the given Font"
    },
    "FreeGadget (#Gadget)": {
      "prefix": "FreeGadget",
      "body": "FreeGadget(${1:#Gadget})$2",
      "description": "Free (remove) the #Gadget"
    },
    "FreeGadget3D (#Gadget3D)": {
      "prefix": "FreeGadget3D",
      "body": "FreeGadget3D(${1:#Gadget3D})$2",
      "description": "Free (remove) the #Gadget3D"
    },
    "FreeImage (#Image)": {
      "prefix": "FreeImage",
      "body": "FreeImage(${1:#Image})$2",
      "description": "Free the specified #Image and release its associated memory"
    },
    "FreeIP (IP)": {
      "prefix": "FreeIP",
      "body": "FreeIP(${1:IP})$2",
      "description": "Free the IPv6"
    },
    "FreeJSON (#JSON)": {
      "prefix": "FreeJSON",
      "body": "FreeJSON(${1:#JSON})$2",
      "description": "Free JSON data"
    },
    "FreeLight (#Light)": {
      "prefix": "FreeLight",
      "body": "FreeLight(${1:#Light})$2",
      "description": "Free the specified #Light"
    },
    "FreeMail (#Mail)": {
      "prefix": "FreeMail",
      "body": "FreeMail(${1:#Mail})$2",
      "description": "Frees the previously created mail"
    },
    "FreeMaterial (#Material)": {
      "prefix": "FreeMaterial",
      "body": "FreeMaterial(${1:#Material})$2",
      "description": "Free the specified #Material"
    },
    "FreeMemory (Memory)": {
      "prefix": "FreeMemory",
      "body": "FreeMemory(${1:Memory})$2",
      "description": "Free the specified memory buffer"
    },
    "FreeMenu (#Menu)": {
      "prefix": "FreeMenu",
      "body": "FreeMenu(${1:#Menu})$2",
      "description": "Remove the specified menu from memory"
    },
    "FreeMesh (#Mesh)": {
      "prefix": "FreeMesh",
      "body": "FreeMesh(${1:#Mesh})$2",
      "description": "Free the specified #Mesh"
    },
    "FreeMovie (#Movie)": {
      "prefix": "FreeMovie",
      "body": "FreeMovie(${1:#Movie})$2",
      "description": "Free the specified #Movie and remove it from memory"
    },
    "FreeMusic (#Music)": {
      "prefix": "FreeMusic",
      "body": "FreeMusic(${1:#Music})$2",
      "description": "Stop and remove the specified module previously loaded with the LoadMusic() command from memory"
    },
    "FreeMutex (Mutex)": {
      "prefix": "FreeMutex",
      "body": "FreeMutex(${1:Mutex})$2",
      "description": "Free the mutex object"
    },
    "FreeNode (#Node)": {
      "prefix": "FreeNode",
      "body": "FreeNode(${1:#Node})$2",
      "description": "Free the specified #Node"
    },
    "FreeNodeAnimation (#NodeAnimation)": {
      "prefix": "FreeNodeAnimation",
      "body": "FreeNodeAnimation(${1:#NodeAnimation})$2",
      "description": "Free the specified #NodeAnimation"
    },
    "FreeParticleEmitter (#ParticleEmitter)": {
      "prefix": "FreeParticleEmitter",
      "body": "FreeParticleEmitter(${1:#ParticleEmitter})$2",
      "description": "Free the specified #ParticleEmitter"
    },
    "FreeRegularExpression (#RegularExpression)": {
      "prefix": "FreeRegularExpression",
      "body": "FreeRegularExpression(${1:#RegularExpression})$2",
      "description": "Free the specified #RegularExpression"
    },
    "FreeSemaphore (Semaphore)": {
      "prefix": "FreeSemaphore",
      "body": "FreeSemaphore(${1:Semaphore})$2",
      "description": "Free the semaphore object"
    },
    "FreeSound (#Sound)": {
      "prefix": "FreeSound",
      "body": "FreeSound(${1:#Sound})$2",
      "description": "Stop and remove a sound from memory"
    },
    "FreeSound3D (#Sound3D)": {
      "prefix": "FreeSound3D",
      "body": "FreeSound3D(${1:#Sound3D})$2",
      "description": "Stop and remove a sound from memory"
    },
    "FreeSpline (#Spline)": {
      "prefix": "FreeSpline",
      "body": "FreeSpline(${1:#Spline})$2",
      "description": "Free the #Spline"
    },
    "FreeSprite (#Sprite)": {
      "prefix": "FreeSprite",
      "body": "FreeSprite(${1:#Sprite})$2",
      "description": "Remove the specified sprite from memory"
    },
    "FreeStaticGeometry (#StaticGeometry)": {
      "prefix": "FreeStaticGeometry",
      "body": "FreeStaticGeometry(${1:#StaticGeometry})$2",
      "description": "Free the specified #StaticGeometry"
    },
    "FreeStatusBar (#StatusBar)": {
      "prefix": "FreeStatusBar",
      "body": "FreeStatusBar(${1:#StatusBar})$2",
      "description": "Free the given status bar"
    },
    "FreeTerrain (#Terrain)": {
      "prefix": "FreeTerrain",
      "body": "FreeTerrain(${1:#Terrain})$2",
      "description": "Free the #Terrain"
    },
    "FreeTerrainBody (#Terrain)": {
      "prefix": "FreeTerrainBody",
      "body": "FreeTerrainBody(${1:#Terrain})$2",
      "description": "Free the body associated with the #Terrain"
    },
    "FreeText3D (#Text3D)": {
      "prefix": "FreeText3D",
      "body": "FreeText3D(${1:#Text3D})$2",
      "description": "Free the specified #Text3D"
    },
    "FreeTexture (#Texture)": {
      "prefix": "FreeTexture",
      "body": "FreeTexture(${1:#Texture})$2",
      "description": "Free the specified #Texture"
    },
    "FreeToolBar (#ToolBar)": {
      "prefix": "FreeToolBar",
      "body": "FreeToolBar(${1:#ToolBar})$2",
      "description": "Free the specified #Toolbar"
    },
    "FreeWater (#Camera)": {
      "prefix": "FreeWater",
      "body": "FreeWater(${1:#Camera})$2",
      "description": "Free the water plane"
    },
    "FreeXML (#XML)": {
      "prefix": "FreeXML",
      "body": "FreeXML(${1:#XML})$2",
      "description": "Free a XML tree"
    },
    "FrontColor (Color)": {
      "prefix": "FrontColor",
      "body": "FrontColor(${1:Color})$2",
      "description": "Set the default color for graphic functions and text display"
    },
    "FTPDirectoryEntryAttributes (#Ftp)": {
      "prefix": "FTPDirectoryEntryAttributes",
      "body": "FTPDirectoryEntryAttributes(${1:#Ftp})$2",
      "description": "Return the attributes of the current entry in the last FTP listing"
    },
    "FTPDirectoryEntryDate (#Ftp)": {
      "prefix": "FTPDirectoryEntryDate",
      "body": "FTPDirectoryEntryDate(${1:#Ftp})$2",
      "description": "Return the modified date of the current entry in the last FTP listing"
    },
    "FTPDirectoryEntryName (#Ftp)": {
      "prefix": "FTPDirectoryEntryName",
      "body": "FTPDirectoryEntryName(${1:#Ftp})$2",
      "description": "Return the name of the current entry in the last FTP listing"
    },
    "FTPDirectoryEntryRaw (#Ftp)": {
      "prefix": "FTPDirectoryEntryRaw",
      "body": "FTPDirectoryEntryRaw(${1:#Ftp})$2",
      "description": "Return the raw line of the current entry in the last FTP listing"
    },
    "FTPDirectoryEntrySize (#Ftp)": {
      "prefix": "FTPDirectoryEntrySize",
      "body": "FTPDirectoryEntrySize(${1:#Ftp})$2",
      "description": "Return the size of the current entry in the last FTP listing"
    },
    "FTPDirectoryEntryType (#Ftp)": {
      "prefix": "FTPDirectoryEntryType",
      "body": "FTPDirectoryEntryType(${1:#Ftp})$2",
      "description": "Return the type of the current entry in the last FTP listing"
    },
    "FTPProgress (#Ftp)": {
      "prefix": "FTPProgress",
      "body": "FTPProgress(${1:#Ftp})$2",
      "description": "Return the progress of the current file transfer"
    },
    "GadgetHeight (#Gadget [, Mode])": {
      "prefix": "GadgetHeight",
      "body": "GadgetHeight(${1:#Gadget})$2",
      "description": "Return the height, in pixel, of the #Gadget"
    },
    "GadgetHeight3D (#Gadget3D)": {
      "prefix": "GadgetHeight3D",
      "body": "GadgetHeight3D(${1:#Gadget3D})$2",
      "description": "Return the height, in pixel, of the #Gadget3D"
    },
    "GadgetID (#Gadget)": {
      "prefix": "GadgetID",
      "body": "GadgetID(${1:#Gadget})$2",
      "description": "Return the ID of the #Gadget"
    },
    "GadgetID3D (#Gadget3D)": {
      "prefix": "GadgetID3D",
      "body": "GadgetID3D(${1:#Gadget3D})$2",
      "description": "Return the ID of the #Gadget3D"
    },
    "GadgetItemID (#Gadget, Item)": {
      "prefix": "GadgetItemID",
      "body": "GadgetItemID(${1:#Gadget})$2",
      "description": "Returns the system ID of the specified gadget item"
    },
    "GadgetToolTip (#Gadget, Text$)": {
      "prefix": "GadgetToolTip",
      "body": "GadgetToolTip(${1:#Gadget})$2",
      "description": "Associate the specified Text$ to the #Gadget"
    },
    "GadgetToolTip3D (#Gadget, Text$)": {
      "prefix": "GadgetToolTip3D",
      "body": "GadgetToolTip3D(${1:#Gadget})$2",
      "description": "Associate the specified Text$ to the #Gadget3D"
    },
    "GadgetType (#Gadget)": {
      "prefix": "GadgetType",
      "body": "GadgetType(${1:#Gadget})$2",
      "description": "Returns the type of the specified #Gadget"
    },
    "GadgetType3D (#Gadget3D)": {
      "prefix": "GadgetType3D",
      "body": "GadgetType3D(${1:#Gadget3D})$2",
      "description": "Returns the type of the specified #Gadget3D"
    },
    "GadgetWidth (#Gadget [, Mode])": {
      "prefix": "GadgetWidth",
      "body": "GadgetWidth(${1:#Gadget})$2",
      "description": "Return the width, in pixel, of the #Gadget"
    },
    "GadgetWidth3D (#Gadget3D)": {
      "prefix": "GadgetWidth3D",
      "body": "GadgetWidth3D(${1:#Gadget3D})$2",
      "description": "Return the width, in pixel, of the #Gadget3D"
    },
    "GadgetX (#Gadget [, Flags])": {
      "prefix": "GadgetX",
      "body": "GadgetX(${1:#Gadget})$2",
      "description": "Return the X position, in pixel, of the #Gadget"
    },
    "GadgetX3D (#Gadget3D)": {
      "prefix": "GadgetX3D",
      "body": "GadgetX3D(${1:#Gadget3D})$2",
      "description": "Return the X position, in pixel, of the #Gadget3D"
    },
    "GadgetY (#Gadget [, Flags])": {
      "prefix": "GadgetY",
      "body": "GadgetY(${1:#Gadget})$2",
      "description": "Return the Y position, in pixel, of the #Gadget"
    },
    "GadgetY3D (#Gadget3D)": {
      "prefix": "GadgetY3D",
      "body": "GadgetY3D(${1:#Gadget3D})$2",
      "description": "Return the Y position, in pixel, of the #Gadget3D"
    },
    "GetActiveGadget ()": {
      "prefix": "GetActiveGadget",
      "body": "GetActiveGadget()$1",
      "description": "Get the Gadget that has the focus"
    },
    "GetActiveGadget3D ()": {
      "prefix": "GetActiveGadget3D",
      "body": "GetActiveGadget3D()$1",
      "description": "Get the Gadget that has the focus"
    },
    "GetActiveWindow ()": {
      "prefix": "GetActiveWindow",
      "body": "GetActiveWindow()$1",
      "description": "Returns the currently active window. (The one with the focus)"
    },
    "GetActiveWindow3D ()": {
      "prefix": "GetActiveWindow3D",
      "body": "GetActiveWindow3D()$1",
      "description": "Returns the currently active window. (The one with the focus)"
    },
    "GetClientIP (Connection)": {
      "prefix": "GetClientIP",
      "body": "GetClientIP(${1:Connection})$2",
      "description": "Returns the IP of the specified client"
    },
    "GetClientPort (Connection)": {
      "prefix": "GetClientPort",
      "body": "GetClientPort(${1:Connection})$2",
      "description": "Returns the Port of the specified client"
    },
    "GetClipboardImage (#Image [, Depth])": {
      "prefix": "GetClipboardImage",
      "body": "GetClipboardImage(${1:#Image})$2",
      "description": "Get an image from the clipboard (if any)"
    },
    "GetClipboardText ()": {
      "prefix": "GetClipboardText",
      "body": "GetClipboardText()$1",
      "description": "Return the last text pasted in the clipboard"
    },
    "GetCurrentDirectory ()": {
      "prefix": "GetCurrentDirectory",
      "body": "GetCurrentDirectory()$1",
      "description": "Returns the path of the current directory"
    },
    "GetDatabaseBlob (#Database, Column, *Buffer, BufferLength)": {
      "prefix": "GetDatabaseBlob",
      "body": "GetDatabaseBlob(${1:#Database}, ${2:Column}, ${3:*Buffer})$4",
      "description": "Returns the content of the specified column in the specified buffer"
    },
    "GetDatabaseDouble (#Database, Column)": {
      "prefix": "GetDatabaseDouble",
      "body": "GetDatabaseDouble(${1:#Database})$2",
      "description": "Returns the content of the specified column as a double number"
    },
    "GetDatabaseFloat (#Database, Column)": {
      "prefix": "GetDatabaseFloat",
      "body": "GetDatabaseFloat(${1:#Database})$2",
      "description": "Returns the content of the specified column as a float number"
    },
    "GetDatabaseLong (#Database, Column)": {
      "prefix": "GetDatabaseLong",
      "body": "GetDatabaseLong(${1:#Database})$2",
      "description": "Returns the content of the specified column as a standard number"
    },
    "GetDatabaseQuad (#Database, Column)": {
      "prefix": "GetDatabaseQuad",
      "body": "GetDatabaseQuad(${1:#Database})$2",
      "description": "Returns the content of the specified column as a quad number"
    },
    "GetDatabaseString (#Database, Column)": {
      "prefix": "GetDatabaseString",
      "body": "GetDatabaseString(${1:#Database})$2",
      "description": "Returns the content of the specified column as a string"
    },
    "GetEntityAnimationLength (#Entity, Animation$)": {
      "prefix": "GetEntityAnimationLength",
      "body": "GetEntityAnimationLength(${1:#Entity})$2",
      "description": "Get the #Entity animation length"
    },
    "GetEntityAnimationTime (#Entity, Animation$)": {
      "prefix": "GetEntityAnimationTime",
      "body": "GetEntityAnimationTime(${1:#Entity})$2",
      "description": "Get the current #Entity animation time"
    },
    "GetEntityAnimationWeight (#Entity, Animation$)": {
      "prefix": "GetEntityAnimationWeight",
      "body": "GetEntityAnimationWeight(${1:#Entity})$2",
      "description": "Get the #Entity animation weight"
    },
    "GetEntityAttribute (#Entity, Attribute)": {
      "prefix": "GetEntityAttribute",
      "body": "GetEntityAttribute(${1:#Entity})$2",
      "description": "Get the #Entity attribute value"
    },
    "GetEntityCollisionGroup (#Entity)": {
      "prefix": "GetEntityCollisionGroup",
      "body": "GetEntityCollisionGroup(${1:#Entity})$2",
      "description": "Get the entity collision group"
    },
    "GetEntityCollisionMask (#Entity)": {
      "prefix": "GetEntityCollisionMask",
      "body": "GetEntityCollisionMask(${1:#Entity})$2",
      "description": "Get the entity collision mask"
    },
    "GetEnvironmentVariable (Name$)": {
      "prefix": "GetEnvironmentVariable",
      "body": "GetEnvironmentVariable(${1:Name.s})$2",
      "description": "Return the content of the environment variable"
    },
    "GetExtensionPart (FullPathName$)": {
      "prefix": "GetExtensionPart",
      "body": "GetExtensionPart(${1:FullPathName.s})$2",
      "description": "Retrieves the extension part of a full path"
    },
    "GetFileAttributes (FileName$)": {
      "prefix": "GetFileAttributes",
      "body": "GetFileAttributes(${1:FileName.s})$2",
      "description": "Returns the attributes of the specified file"
    },
    "GetFileDate (FileName$, DateType)": {
      "prefix": "GetFileDate",
      "body": "GetFileDate(${1:FileName.s})$2",
      "description": "Returns the modified/created/accessed date of the specified file"
    },
    "GetFilePart (FullPathName$ [, Flags])": {
      "prefix": "GetFilePart",
      "body": "GetFilePart(${1:FullPathName.s})$2",
      "description": "Retrieves the file part of a full path"
    },
    "GetFTPDirectory (#Ftp)": {
      "prefix": "GetFTPDirectory",
      "body": "GetFTPDirectory(${1:#Ftp})$2",
      "description": "Return the current directory"
    },
    "GetFunction (#Library, FunctionName$)": {
      "prefix": "GetFunction",
      "body": "GetFunction(${1:#Library})$2",
      "description": "Checks if a function exists in the #Library"
    },
    "GetGadgetAttribute (#Gadget, Attribute)": {
      "prefix": "GetGadgetAttribute",
      "body": "GetGadgetAttribute(${1:#Gadget})$2",
      "description": "Return the specified #Gadget attribute value"
    },
    "GetGadgetAttribute3D (#Gadget3D, Attribute)": {
      "prefix": "GetGadgetAttribute3D",
      "body": "GetGadgetAttribute3D(${1:#Gadget3D})$2",
      "description": "Return the specified #Gadget3D attribute value"
    },
    "GetGadgetColor (#Gadget, ColorType)": {
      "prefix": "GetGadgetColor",
      "body": "GetGadgetColor(${1:#Gadget})$2",
      "description": "Get the currently set color of the Gadget"
    },
    "GetGadgetData (#Gadget)": {
      "prefix": "GetGadgetData",
      "body": "GetGadgetData(${1:#Gadget})$2",
      "description": "Returns the value previously stored for this Gadget"
    },
    "GetGadgetData3D (#Gadget3D)": {
      "prefix": "GetGadgetData3D",
      "body": "GetGadgetData3D(${1:#Gadget3D})$2",
      "description": "Returns the value previously stored for this Gadget"
    },
    "GetGadgetFont (#Gadget)": {
      "prefix": "GetGadgetFont",
      "body": "GetGadgetFont(${1:#Gadget})$2",
      "description": "Get the FontID associated with the specified gadget"
    },
    "GetGadgetItemAttribute (#Gadget, Item, Attribute [, Column])": {
      "prefix": "GetGadgetItemAttribute",
      "body": "GetGadgetItemAttribute(${1:#Gadget}, ${2:Item})$3",
      "description": "Return the specified #Gadget item attribute value"
    },
    "GetGadgetItemColor (#Gadget, Item, ColorType [, Column])": {
      "prefix": "GetGadgetItemColor",
      "body": "GetGadgetItemColor(${1:#Gadget}, ${2:Item})$3",
      "description": "Get the currently set color of the Gadget item"
    },
    "GetGadgetItemData (#Gadget, Item)": {
      "prefix": "GetGadgetItemData",
      "body": "GetGadgetItemData(${1:#Gadget})$2",
      "description": "Returns the value previously stored with this gadget item"
    },
    "GetGadgetItemData3D (#Gadget3D, Item)": {
      "prefix": "GetGadgetItemData3D",
      "body": "GetGadgetItemData3D(${1:#Gadget3D})$2",
      "description": "Returns the value previously stored with this gadget item"
    },
    "GetGadgetItemState (#Gadget, Position)": {
      "prefix": "GetGadgetItemState",
      "body": "GetGadgetItemState(${1:#Gadget})$2",
      "description": "Return the #Gadget item state"
    },
    "GetGadgetItemState3D (#Gadget3D, Position)": {
      "prefix": "GetGadgetItemState3D",
      "body": "GetGadgetItemState3D(${1:#Gadget3D})$2",
      "description": "Return the #Gadget3D item state"
    },
    "GetGadgetItemText (#Gadget, Position [, Column])": {
      "prefix": "GetGadgetItemText",
      "body": "GetGadgetItemText(${1:#Gadget})$2",
      "description": "Return the text content of the specified #Gadget item"
    },
    "GetGadgetItemText3D (#Gadget3D, Position [, Column])": {
      "prefix": "GetGadgetItemText3D",
      "body": "GetGadgetItemText3D(${1:#Gadget3D})$2",
      "description": "Return the text content of the specified #Gadget3D item"
    },
    "GetGadgetState (#Gadget)": {
      "prefix": "GetGadgetState",
      "body": "GetGadgetState(${1:#Gadget})$2",
      "description": "Return the gadget current state"
    },
    "GetGadgetState3D (#Gadget3D)": {
      "prefix": "GetGadgetState3D",
      "body": "GetGadgetState3D(${1:#Gadget3D})$2",
      "description": "Return the gadget current state"
    },
    "GetGadgetText (#Gadget)": {
      "prefix": "GetGadgetText",
      "body": "GetGadgetText(${1:#Gadget})$2",
      "description": "Return the gadget text content of the specified #Gadget"
    },
    "GetGadgetText3D (#Gadget3D)": {
      "prefix": "GetGadgetText3D",
      "body": "GetGadgetText3D(${1:#Gadget3D})$2",
      "description": "Return the gadget text content of the specified #Gadget3D"
    },
    "GetHomeDirectory ()": {
      "prefix": "GetHomeDirectory",
      "body": "GetHomeDirectory()$1",
      "description": "Returns the full path of the currently logged user directory"
    },
    "GetHTTPHeader (URL$)": {
      "prefix": "GetHTTPHeader",
      "body": "GetHTTPHeader(${1:URL.s})$2",
      "description": "Get the HTTP headers"
    },
    "GetJSONBoolean (*JSONValue)": {
      "prefix": "GetJSONBoolean",
      "body": "GetJSONBoolean(${1:*JSONValue})$2",
      "description": "Return the JSON value as a boolean"
    },
    "GetJSONDouble (*JSONValue)": {
      "prefix": "GetJSONDouble",
      "body": "GetJSONDouble(${1:*JSONValue})$2",
      "description": "Return the JSON value as a double"
    },
    "GetJSONElement (*JSONValue, Index)": {
      "prefix": "GetJSONElement",
      "body": "GetJSONElement(${1:*JSONValue})$2",
      "description": "Return an element in a JSON array"
    },
    "GetJSONFloat (*JSONValue)": {
      "prefix": "GetJSONFloat",
      "body": "GetJSONFloat(${1:*JSONValue})$2",
      "description": "Return the JSON value as a float"
    },
    "GetJSONInteger (*JSONValue)": {
      "prefix": "GetJSONInteger",
      "body": "GetJSONInteger(${1:*JSONValue})$2",
      "description": "Return the JSON value as an integer"
    },
    "GetJSONMember (*JSONValue, Key$)": {
      "prefix": "GetJSONMember",
      "body": "GetJSONMember(${1:*JSONValue})$2",
      "description": "Return a member of a JSON object"
    },
    "GetJSONQuad (*JSONValue)": {
      "prefix": "GetJSONQuad",
      "body": "GetJSONQuad(${1:*JSONValue})$2",
      "description": "Return the JSON value as an quad"
    },
    "GetJSONString (*JSONValue)": {
      "prefix": "GetJSONString",
      "body": "GetJSONString(${1:*JSONValue})$2",
      "description": "Return the JSON value as a string"
    },
    "GetLightColor (#Light, Type)": {
      "prefix": "GetLightColor",
      "body": "GetLightColor(${1:#Light})$2",
      "description": "Get the #Light color value"
    },
    "GetMailAttribute (#Mail, Attribute)": {
      "prefix": "GetMailAttribute",
      "body": "GetMailAttribute(${1:#Mail})$2",
      "description": "Returns the specified #Mail attribute"
    },
    "GetMailBody (#Mail)": {
      "prefix": "GetMailBody",
      "body": "GetMailBody(${1:#Mail})$2",
      "description": "Returns the mail body"
    },
    "GetMaterialAttribute (#Material, Attribute [, Layer])": {
      "prefix": "GetMaterialAttribute",
      "body": "GetMaterialAttribute(${1:#Material})$2",
      "description": "Get the specified #Material attribute"
    },
    "GetMaterialColor (#Material, Type)": {
      "prefix": "GetMaterialColor",
      "body": "GetMaterialColor(${1:#Material})$2",
      "description": "Get the specified #Material color"
    },
    "GetMenuItemState (#Menu, MenuItem)": {
      "prefix": "GetMenuItemState",
      "body": "GetMenuItemState(${1:#Menu})$2",
      "description": "Retrieve the current menu item state"
    },
    "GetMenuItemText (#Menu, MenuItem)": {
      "prefix": "GetMenuItemText",
      "body": "GetMenuItemText(${1:#Menu})$2",
      "description": "Retrieve the current menu item text"
    },
    "GetMenuTitleText (#Menu, Index)": {
      "prefix": "GetMenuTitleText",
      "body": "GetMenuTitleText(${1:#Menu})$2",
      "description": "Retrieve the current menu title text"
    },
    "GetMusicPosition (#Music)": {
      "prefix": "GetMusicPosition",
      "body": "GetMusicPosition(${1:#Music})$2",
      "description": "Returns the current pattern position of the playing module"
    },
    "GetMusicRow (#Music)": {
      "prefix": "GetMusicRow",
      "body": "GetMusicRow(${1:#Music})$2",
      "description": "Returns the row position in the pattern currently played"
    },
    "GetNodeAnimationKeyFramePitch (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFramePitch",
      "body": "GetNodeAnimationKeyFramePitch(${1:#NodeAnimation})$2",
      "description": "Get the keyframe pitch for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameRoll (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameRoll",
      "body": "GetNodeAnimationKeyFrameRoll(${1:#NodeAnimation})$2",
      "description": "Get the z keyframe roll for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameTime (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameTime",
      "body": "GetNodeAnimationKeyFrameTime(${1:#NodeAnimation})$2",
      "description": "Get the keyframe time for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameX (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameX",
      "body": "GetNodeAnimationKeyFrameX(${1:#NodeAnimation})$2",
      "description": "Get the x keyframe position for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameY (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameY",
      "body": "GetNodeAnimationKeyFrameY(${1:#NodeAnimation})$2",
      "description": "Get the y keyframe position for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameYaw (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameYaw",
      "body": "GetNodeAnimationKeyFrameYaw(${1:#NodeAnimation})$2",
      "description": "Get the y keyframe yaw for the #NodeAnimation"
    },
    "GetNodeAnimationKeyFrameZ (#NodeAnimation, KeyFrame)": {
      "prefix": "GetNodeAnimationKeyFrameZ",
      "body": "GetNodeAnimationKeyFrameZ(${1:#NodeAnimation})$2",
      "description": "Get the z keyframe position for the #NodeAnimation"
    },
    "GetNodeAnimationLength (#NodeAnimation)": {
      "prefix": "GetNodeAnimationLength",
      "body": "GetNodeAnimationLength(${1:#NodeAnimation})$2",
      "description": "Get the #NodeAnimation length"
    },
    "GetNodeAnimationTime (#NodeAnimation)": {
      "prefix": "GetNodeAnimationTime",
      "body": "GetNodeAnimationTime(${1:#NodeAnimation})$2",
      "description": "Get the current #NodeAnimation time"
    },
    "GetNodeAnimationWeight (#NodeAnimation)": {
      "prefix": "GetNodeAnimationWeight",
      "body": "GetNodeAnimationWeight(${1:#NodeAnimation})$2",
      "description": "Get the #NodeAnimation weight"
    },
    "GetOriginX ()": {
      "prefix": "GetOriginX",
      "body": "GetOriginX()$1",
      "description": "Get the x coordinate of the drawing origin"
    },
    "GetOriginY ()": {
      "prefix": "GetOriginY",
      "body": "GetOriginY()$1",
      "description": "Get the y coordinate of the drawing origin"
    },
    "GetPathPart (FullPathName$)": {
      "prefix": "GetPathPart",
      "body": "GetPathPart(${1:FullPathName.s})$2",
      "description": "Retrieves the path part of a full path"
    },
    "GetRuntimeDouble (Name)": {
      "prefix": "GetRuntimeDouble",
      "body": "GetRuntimeDouble(${1:Name})$2",
      "description": "Return the runtime double item value"
    },
    "GetRuntimeInteger (Name)": {
      "prefix": "GetRuntimeInteger",
      "body": "GetRuntimeInteger(${1:Name})$2",
      "description": "Return the runtime integer item value"
    },
    "GetRuntimeString (Name)": {
      "prefix": "GetRuntimeString",
      "body": "GetRuntimeString(${1:Name})$2",
      "description": "Return the runtime string item value"
    },
    "GetScriptMaterial (#Material, Name$)": {
      "prefix": "GetScriptMaterial",
      "body": "GetScriptMaterial(${1:#Material})$2",
      "description": "Get a material defined in scripts files"
    },
    "GetScriptParticleEmitter (#ParticleEmitter, Name$)": {
      "prefix": "GetScriptParticleEmitter",
      "body": "GetScriptParticleEmitter(${1:#ParticleEmitter})$2",
      "description": "Get a particle emitter defined in scripts files"
    },
    "GetScriptTexture (#Texture, Name$)": {
      "prefix": "GetScriptTexture",
      "body": "GetScriptTexture(${1:#Texture})$2",
      "description": "Get the specified #Texture as defined in the script file"
    },
    "GetSerialPortStatus (#SerialPort, Attributes)": {
      "prefix": "GetSerialPortStatus",
      "body": "GetSerialPortStatus(${1:#SerialPort})$2",
      "description": "Return the specified status"
    },
    "GetSoundFrequency (#Sound [, Channel])": {
      "prefix": "GetSoundFrequency",
      "body": "GetSoundFrequency(${1:#Sound})$2",
      "description": "Get the current #Sound frequency"
    },
    "GetSoundPosition (#Sound [, Mode [, Channel]])": {
      "prefix": "GetSoundPosition",
      "body": "GetSoundPosition(${1:#Sound})$2",
      "description": "Get the current playing #Sound position"
    },
    "GetTemporaryDirectory ()": {
      "prefix": "GetTemporaryDirectory",
      "body": "GetTemporaryDirectory()$1",
      "description": "Returns the full path of the temporary directory"
    },
    "GetTerrainTileHeightAtPoint (#Terrain, TileX, TileY, x, y)": {
      "prefix": "GetTerrainTileHeightAtPoint",
      "body": "GetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x})$5",
      "description": "Get the height of the #Terrain tile at the specified position"
    },
    "GetTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer, x, y)": {
      "prefix": "GetTerrainTileLayerBlend",
      "body": "GetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6",
      "description": "Get the #Terrain tile layer blend value"
    },
    "GetToolBarButtonState (#ToolBar, ButtonID)": {
      "prefix": "GetToolBarButtonState",
      "body": "GetToolBarButtonState(${1:#ToolBar})$2",
      "description": "Get the state of the specified button"
    },
    "GetURLPart (URL$, Parameter$)": {
      "prefix": "GetURLPart",
      "body": "GetURLPart(${1:URL.s})$2",
      "description": "Get the specific part of an URL"
    },
    "GetW ()": {
      "prefix": "GetW",
      "body": "GetW()$1",
      "description": "Get the \"w\" value of the last call"
    },
    "GetWindowColor (#Window)": {
      "prefix": "GetWindowColor",
      "body": "GetWindowColor(${1:#Window})$2",
      "description": "Get the background color of the window"
    },
    "GetWindowData (#Window)": {
      "prefix": "GetWindowData",
      "body": "GetWindowData(${1:#Window})$2",
      "description": "Returns the value previously stored for the window"
    },
    "GetWindowState (#Window)": {
      "prefix": "GetWindowState",
      "body": "GetWindowState(${1:#Window})$2",
      "description": "Get the minimized/maximized state of the window"
    },
    "GetWindowTitle (#Window)": {
      "prefix": "GetWindowTitle",
      "body": "GetWindowTitle(${1:#Window})$2",
      "description": "Gets the current #Window title"
    },
    "GetWindowTitle3D (#Window3D)": {
      "prefix": "GetWindowTitle3D",
      "body": "GetWindowTitle3D(${1:#Window3D})$2",
      "description": "Gets the current #Window3D title"
    },
    "GetX ()": {
      "prefix": "GetX",
      "body": "GetX()$1",
      "description": "Get the \"x\" value of the last call"
    },
    "GetXMLAttribute (Node, Attribute$)": {
      "prefix": "GetXMLAttribute",
      "body": "GetXMLAttribute(${1:Node})$2",
      "description": "Get the value of the given attribute of the XML node"
    },
    "GetXMLEncoding (#XML)": {
      "prefix": "GetXMLEncoding",
      "body": "GetXMLEncoding(${1:#XML})$2",
      "description": "Get the encoding used in the parsed XML data"
    },
    "GetXMLNodeName (Node)": {
      "prefix": "GetXMLNodeName",
      "body": "GetXMLNodeName(${1:Node})$2",
      "description": "Get the (tag-)name of the given XML node"
    },
    "GetXMLNodeOffset (Node)": {
      "prefix": "GetXMLNodeOffset",
      "body": "GetXMLNodeOffset(${1:Node})$2",
      "description": "Get the number of characters of text between this node and the previous one in the tree"
    },
    "GetXMLNodeText (Node)": {
      "prefix": "GetXMLNodeText",
      "body": "GetXMLNodeText(${1:Node})$2",
      "description": "Get the text content of the given XML node"
    },
    "GetXMLStandalone (#XML)": {
      "prefix": "GetXMLStandalone",
      "body": "GetXMLStandalone(${1:#XML})$2",
      "description": "Get the standalone mode of the XML document"
    },
    "GetY ()": {
      "prefix": "GetY",
      "body": "GetY()$1",
      "description": "Get the \"y\" value of the last call"
    },
    "GetZ ()": {
      "prefix": "GetZ",
      "body": "GetZ()$1",
      "description": "Get the \"z\" value of the last call"
    },
    "GrabDrawingImage (#Image, x, y, Width, Height)": {
      "prefix": "GrabDrawingImage",
      "body": "GrabDrawingImage(${1:#Image}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a new #Image with the content of the given drawing output area"
    },
    "GrabImage (#Image1, #Image2, x, y, Width, Height)": {
      "prefix": "GrabImage",
      "body": "GrabImage(${1:#Image1}, ${2:#Image2}, ${3:x}, ${4:y}, ${5:Width})$6",
      "description": "Create a new #Image2 with the selected area on the source #Image1"
    },
    "GrabSprite (#Sprite, x, y, Width, Height [, Mode])": {
      "prefix": "GrabSprite",
      "body": "GrabSprite(${1:#Sprite}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Grab the screen content at the area x,y,Width,Height, and create a new #Sprite"
    },
    "GradientColor (Position.f, Color)": {
      "prefix": "GradientColor",
      "body": "GradientColor(${1:Position.f})$2",
      "description": "Set a color for the drawing gradient"
    },
    "Green (Color)": {
      "prefix": "Green",
      "body": "Green(${1:Color})$2",
      "description": "Returns the green component of the given color"
    },
    "Hex (Number [, Type])": {
      "prefix": "Hex",
      "body": "Hex(${1:Number})$2",
      "description": "Converts a numeric number into a string, in hexadecimal format"
    },
    "HideBillboardGroup (#BillboardGroup, Display)": {
      "prefix": "HideBillboardGroup",
      "body": "HideBillboardGroup(${1:#BillboardGroup})$2",
      "description": "Hide or show the #BillboardGroup and all its billboards"
    },
    "HideEntity (#Entity, Hide)": {
      "prefix": "HideEntity",
      "body": "HideEntity(${1:#Entity})$2",
      "description": "Hide or show the specified #Entity"
    },
    "HideGadget (#Gadget, State)": {
      "prefix": "HideGadget",
      "body": "HideGadget(${1:#Gadget})$2",
      "description": "Hide or show a gadget"
    },
    "HideGadget3D (#Gadget3D, State)": {
      "prefix": "HideGadget3D",
      "body": "HideGadget3D(${1:#Gadget3D})$2",
      "description": "Hide or show a gadget"
    },
    "HideLight (#Light, State)": {
      "prefix": "HideLight",
      "body": "HideLight(${1:#Light})$2",
      "description": "Hides or shows the specified #Light"
    },
    "HideMenu (#Menu, State)": {
      "prefix": "HideMenu",
      "body": "HideMenu(${1:#Menu})$2",
      "description": "Hide or display the specified menu"
    },
    "HideParticleEmitter (#ParticleEmitter, Hide)": {
      "prefix": "HideParticleEmitter",
      "body": "HideParticleEmitter(${1:#ParticleEmitter})$2",
      "description": "Hide or show the specified #ParticleEmitter"
    },
    "HideWindow (#Window, State [, Flags])": {
      "prefix": "HideWindow",
      "body": "HideWindow(${1:#Window})$2",
      "description": "Hides or show the specified #Window"
    },
    "HideWindow3D (#Window3D, State)": {
      "prefix": "HideWindow3D",
      "body": "HideWindow3D(${1:#Window3D})$2",
      "description": "Hides or show the specified #Window3D"
    },
    "HingeJointMotorTarget (#Joint, Angle, Velocity)": {
      "prefix": "HingeJointMotorTarget",
      "body": "HingeJointMotorTarget(${1:#Joint}, ${2:Angle})$3",
      "description": "Sets the motor target on the hinge #Joint"
    },
    "Hostname ()": {
      "prefix": "Hostname",
      "body": "Hostname()$1",
      "description": "Returns the computer hostname"
    },
    "Hour (Date)": {
      "prefix": "Hour",
      "body": "Hour(${1:Date})$2",
      "description": "Returns the hour value of the specified date (between 0 and 23)"
    },
    "HTTPProgress (HttpConnection)": {
      "prefix": "HTTPProgress",
      "body": "HTTPProgress(${1:HttpConnection})$2",
      "description": "Get the progress on the specified HTTP connection"
    },
    "HyperLinkGadget (#Gadget, x, y, Width, Height, Text$, Color [, Flags])": {
      "prefix": "HyperLinkGadget",
      "body": "HyperLinkGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Text.s})$7",
      "description": "Creates an HyperLink gadget in the current GadgetList"
    },
    "ImageDepth (#Image [, Flags])": {
      "prefix": "ImageDepth",
      "body": "ImageDepth(${1:#Image})$2",
      "description": "Returns the depth of the specified #Image"
    },
    "ImageFormat (#Image)": {
      "prefix": "ImageFormat",
      "body": "ImageFormat(${1:#Image})$2",
      "description": "Returns the original format of the specified #Image"
    },
    "ImageGadget (#Gadget, x, y, Width, Height, ImageID [, Flags])": {
      "prefix": "ImageGadget",
      "body": "ImageGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create an Image gadget in the current GadgetList"
    },
    "ImageGadget3D (#Gadget3D, x, y, Width, Height, TextureID [, Flags])": {
      "prefix": "ImageGadget3D",
      "body": "ImageGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create an Image gadget in the current GadgetList"
    },
    "ImageHeight (#Image)": {
      "prefix": "ImageHeight",
      "body": "ImageHeight(${1:#Image})$2",
      "description": "Returns the height, in pixel, of the specified #Image"
    },
    "ImageID (#Image)": {
      "prefix": "ImageID",
      "body": "ImageID(${1:#Image})$2",
      "description": "Returns the ImageID of the specified #Image"
    },
    "ImageOutput (#Image)": {
      "prefix": "ImageOutput",
      "body": "ImageOutput(${1:#Image})$2",
      "description": "Returns the OutputID of the specified #Image to perform 2D rendering operation on it"
    },
    "ImageVectorOutput (#Image [, Unit])": {
      "prefix": "ImageVectorOutput",
      "body": "ImageVectorOutput(${1:#Image})$2",
      "description": "Prepares the image for 2D vector graphic operations"
    },
    "ImageWidth (#Image)": {
      "prefix": "ImageWidth",
      "body": "ImageWidth(${1:#Image})$2",
      "description": "Returns the width, in pixel, the specified #Image"
    },
    "Infinity ()": {
      "prefix": "Infinity",
      "body": "Infinity()$1",
      "description": "Returns the float value for positive infinity"
    },
    "InitAudioCD ()": {
      "prefix": "InitAudioCD",
      "body": "InitAudioCD()$1",
      "description": "Initialize all CD-Audio resources"
    },
    "InitCGI ([MaxRequestSize])": {
      "prefix": "InitCGI",
      "body": "InitCGI()$1",
      "description": "Init the CGI library"
    },
    "InitEngine3D ([Flags [, LibraryName$]])": {
      "prefix": "InitEngine3D",
      "body": "InitEngine3D()$1",
      "description": "Initialises the 3D environment for later use"
    },
    "InitFastCGI (LocalPort)": {
      "prefix": "InitFastCGI",
      "body": "InitFastCGI(${1:LocalPort})$2",
      "description": "Init the FastCGI support"
    },
    "InitJoystick ()": {
      "prefix": "InitJoystick",
      "body": "InitJoystick()$1",
      "description": "Initialize the joystick environment for later use"
    },
    "InitKeyboard ()": {
      "prefix": "InitKeyboard",
      "body": "InitKeyboard()$1",
      "description": "Initialize the keyboard environment for later use"
    },
    "InitMouse ()": {
      "prefix": "InitMouse",
      "body": "InitMouse()$1",
      "description": "Initialize the Mouse environment for later use"
    },
    "InitMovie ()": {
      "prefix": "InitMovie",
      "body": "InitMovie()$1",
      "description": "Initialize the Movie environment for later use"
    },
    "InitNetwork ()": {
      "prefix": "InitNetwork",
      "body": "InitNetwork()$1",
      "description": "Initialize the network environment"
    },
    "InitScintilla ([LibraryName$])": {
      "prefix": "InitScintilla",
      "body": "InitScintilla()$1",
      "description": "Initialize the scintilla library"
    },
    "InitSound ()": {
      "prefix": "InitSound",
      "body": "InitSound()$1",
      "description": "Initialize the sound environment. If it returns 0 then no sound can be played on this computer,"
    },
    "InitSprite ()": {
      "prefix": "InitSprite",
      "body": "InitSprite()$1",
      "description": "Init all the sprite environment for later use"
    },
    "Inkey ()": {
      "prefix": "Inkey",
      "body": "Inkey()$1",
      "description": "Return a two characters string if a key is pressed during the call of Inkey()"
    },
    "Input ()": {
      "prefix": "Input",
      "body": "Input()$1",
      "description": "Allows to catch a whole character line"
    },
    "InputEvent3D (MouseX, MouseY, LeftMouseButton [, Text$, SpecialKey])": {
      "prefix": "InputEvent3D",
      "body": "InputEvent3D(${1:MouseX}, ${2:MouseY})$3",
      "description": "Send event to the GUI system"
    },
    "InputRequester (Title$, Message$, DefaultString$ [, Flags])": {
      "prefix": "InputRequester",
      "body": "InputRequester(${1:Title.s}, ${2:Message.s})$3",
      "description": "Open an input requester"
    },
    "InsertJSONStructure (*JSONValue, *Buffer, Structure)": {
      "prefix": "InsertJSONStructure",
      "body": "InsertJSONStructure(${1:*JSONValue}, ${2:*Buffer})$3",
      "description": "Insert the specified structure data into the JSON value"
    },
    "InsertString (String$, StringToInsert$, Position)": {
      "prefix": "InsertString",
      "body": "InsertString(${1:String.s}, ${2:StringToInsert.s})$3",
      "description": "Insert a string at the given position"
    },
    " [, PreviousNode])": {
      "prefix": "InsertXMLMap",
      "body": "InsertXMLMap(${1:ParentNode})$2",
      "description": "Insert the specified Map() into the XML node"
    },
    "InsertXMLStructure (ParentNode, *Buffer, Structure [, PreviousNode])": {
      "prefix": "InsertXMLStructure",
      "body": "InsertXMLStructure(${1:ParentNode}, ${2:*Buffer})$3",
      "description": "Insert the specified structure data into the XML node"
    },
    "InstructionAddress ()": {
      "prefix": "InstructionAddress",
      "body": "InstructionAddress()$1",
      "description": "Get the address of the current decoded instruction"
    },
    "InstructionString ()": {
      "prefix": "InstructionString",
      "body": "InstructionString()$1",
      "description": "Get a string representation of the current decoded instruction"
    },
    "Int (Float)": {
      "prefix": "Int",
      "body": "Int(${1:Float})$2",
      "description": "Returns the integer part of the specified value"
    },
    "IntQ (Float)": {
      "prefix": "IntQ",
      "body": "IntQ(${1:Float})$2",
      "description": "Returns the integer part of the specified value as a quad"
    },
    "IPAddressField (IPAddress, Field [, Format])": {
      "prefix": "IPAddressField",
      "body": "IPAddressField(${1:IPAddress})$2",
      "description": "Returns the IP Address field value"
    },
    "IPAddressGadget (#Gadget, x, y, Width, Height)": {
      "prefix": "IPAddressGadget",
      "body": "IPAddressGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create an IP Address gadget in the current GadgetList"
    },
    "IPString (IPAddress [, Format])": {
      "prefix": "IPString",
      "body": "IPString(${1:IPAddress})$2",
      "description": "Returns the string representation of the given IP address"
    },
    "IsBillboardGroup (#BillboardGroup)": {
      "prefix": "IsBillboardGroup",
      "body": "IsBillboardGroup(${1:#BillboardGroup})$2",
      "description": "Tests if the given "
    },
    "IsCamera (#Camera)": {
      "prefix": "IsCamera",
      "body": "IsCamera(${1:#Camera})$2",
      "description": "Tests if the given "
    },
    "IsCipher (#Cipher)": {
      "prefix": "IsCipher",
      "body": "IsCipher(${1:#Cipher})$2",
      "description": "Tests if the given "
    },
    "IsDatabase (#Database)": {
      "prefix": "IsDatabase",
      "body": "IsDatabase(${1:#Database})$2",
      "description": "Tests if the given "
    },
    "IsDialog (#Dialog)": {
      "prefix": "IsDialog",
      "body": "IsDialog(${1:#Dialog})$2",
      "description": "Tests if the given dialog is initialized"
    },
    "IsDirectory (#Directory)": {
      "prefix": "IsDirectory",
      "body": "IsDirectory(${1:#Directory})$2",
      "description": "Tests if the given "
    },
    "IsEffect (#Effect)": {
      "prefix": "IsEffect",
      "body": "IsEffect(${1:#Effect})$2",
      "description": "Tests if the given "
    },
    "IsEntity (#Entity)": {
      "prefix": "IsEntity",
      "body": "IsEntity(${1:#Entity})$2",
      "description": "Tests if the given "
    },
    "IsFile (#File)": {
      "prefix": "IsFile",
      "body": "IsFile(${1:#File})$2",
      "description": "Tests if the given "
    },
    "IsFingerprint (#Fingerprint)": {
      "prefix": "IsFingerprint",
      "body": "IsFingerprint(${1:#Fingerprint})$2",
      "description": "Tests if the given "
    },
    "IsFont (#Font)": {
      "prefix": "IsFont",
      "body": "IsFont(${1:#Font})$2",
      "description": "Tests if the given "
    },
    "IsFTP (#Ftp)": {
      "prefix": "IsFTP",
      "body": "IsFTP(${1:#Ftp})$2",
      "description": "Tests if the given "
    },
    "IsGadget (#Gadget)": {
      "prefix": "IsGadget",
      "body": "IsGadget(${1:#Gadget})$2",
      "description": "Tests if the given "
    },
    "IsGadget3D (#Gadget3D)": {
      "prefix": "IsGadget3D",
      "body": "IsGadget3D(${1:#Gadget3D})$2",
      "description": "Tests if the given "
    },
    "IsImage (#Image)": {
      "prefix": "IsImage",
      "body": "IsImage(${1:#Image})$2",
      "description": "Tests if the given "
    },
    "IsInfinity (Number)": {
      "prefix": "IsInfinity",
      "body": "IsInfinity(${1:Number})$2",
      "description": "Returns nonzero if the given Number represents positive or negative infinity"
    },
    "IsInsidePath (x.d, y.d [, CoordinateSystem])": {
      "prefix": "IsInsidePath",
      "body": "IsInsidePath(${1:x.d})$2",
      "description": "Tests whether the given point is inside the area of the current path"
    },
    "IsInsideStroke (x.d, y.d, Width.d [, Flags [, CoordinateSystem]])": {
      "prefix": "IsInsideStroke",
      "body": "IsInsideStroke(${1:x.d}, ${2:y.d})$3",
      "description": "Tests whether the given point is inside the area stroked by the current path"
    },
    "IsJoint (#Joint)": {
      "prefix": "IsJoint",
      "body": "IsJoint(${1:#Joint})$2",
      "description": "Tests if the given "
    },
    "IsJSON (#JSON)": {
      "prefix": "IsJSON",
      "body": "IsJSON(${1:#JSON})$2",
      "description": "Check if #JSON represents valid JSON data"
    },
    "IsLibrary (#Library)": {
      "prefix": "IsLibrary",
      "body": "IsLibrary(${1:#Library})$2",
      "description": "Tests if the given "
    },
    "IsLight (#Light)": {
      "prefix": "IsLight",
      "body": "IsLight(${1:#Light})$2",
      "description": "Tests if the given "
    },
    "IsMail (#Mail)": {
      "prefix": "IsMail",
      "body": "IsMail(${1:#Mail})$2",
      "description": "Tests if the given "
    },
    "IsMaterial (#Material)": {
      "prefix": "IsMaterial",
      "body": "IsMaterial(${1:#Material})$2",
      "description": "Tests if the given "
    },
    "IsMenu (#Menu)": {
      "prefix": "IsMenu",
      "body": "IsMenu(${1:#Menu})$2",
      "description": "Tests if the given "
    },
    "IsMesh (#Mesh)": {
      "prefix": "IsMesh",
      "body": "IsMesh(${1:#Mesh})$2",
      "description": "Tests if the given "
    },
    "IsMovie (#Movie)": {
      "prefix": "IsMovie",
      "body": "IsMovie(${1:#Movie})$2",
      "description": "Tests if the given "
    },
    "IsMusic (#Music)": {
      "prefix": "IsMusic",
      "body": "IsMusic(${1:#Music})$2",
      "description": "Tests if the given "
    },
    "IsNAN (Number)": {
      "prefix": "IsNAN",
      "body": "IsNAN(${1:Number})$2",
      "description": "Returns nonzero if the given Number is the special \"Not a Number value"
    },
    "IsNode (#Node)": {
      "prefix": "IsNode",
      "body": "IsNode(${1:#Node})$2",
      "description": "Tests if the given "
    },
    "IsParticleEmitter (#ParticleEmitter)": {
      "prefix": "IsParticleEmitter",
      "body": "IsParticleEmitter(${1:#ParticleEmitter})$2",
      "description": "Tests if the given "
    },
    "IsPathEmpty ()": {
      "prefix": "IsPathEmpty",
      "body": "IsPathEmpty()$1",
      "description": "Returns true if the current vector drawing path is empty"
    },
    "IsProgram (Program)": {
      "prefix": "IsProgram",
      "body": "IsProgram(${1:Program})$2",
      "description": "Check if the specified program was created by RunProgram"
    },
    "IsRegularExpression (#RegularExpression)": {
      "prefix": "IsRegularExpression",
      "body": "IsRegularExpression(${1:#RegularExpression})$2",
      "description": "Tests if the given "
    },
    "IsRuntime (Name)": {
      "prefix": "IsRuntime",
      "body": "IsRuntime(${1:Name})$2",
      "description": "Check if the specified item is available at runtime"
    },
    "IsScreenActive ()": {
      "prefix": "IsScreenActive",
      "body": "IsScreenActive()$1",
      "description": "If the return is 0, then the screen is no more active, else the screen is active"
    },
    "IsSerialPort (#SerialPort)": {
      "prefix": "IsSerialPort",
      "body": "IsSerialPort(${1:#SerialPort})$2",
      "description": "Test if the given "
    },
    "IsSound (#Sound)": {
      "prefix": "IsSound",
      "body": "IsSound(${1:#Sound})$2",
      "description": "Tests if the given "
    },
    "IsSound3D (#Sound3D)": {
      "prefix": "IsSound3D",
      "body": "IsSound3D(${1:#Sound3D})$2",
      "description": "Tests if the given "
    },
    "IsSprite (#Sprite)": {
      "prefix": "IsSprite",
      "body": "IsSprite(${1:#Sprite})$2",
      "description": "Tests if the given "
    },
    "IsStaticGeometry (#StaticGeometry)": {
      "prefix": "IsStaticGeometry",
      "body": "IsStaticGeometry(${1:#StaticGeometry})$2",
      "description": "Tests if the given "
    },
    "IsStatusBar (#StatusBar)": {
      "prefix": "IsStatusBar",
      "body": "IsStatusBar(${1:#StatusBar})$2",
      "description": "Tests if the given "
    },
    "IsSysTrayIcon (#SysTrayIcon)": {
      "prefix": "IsSysTrayIcon",
      "body": "IsSysTrayIcon(${1:#SysTrayIcon})$2",
      "description": "Tests if the given "
    },
    "IsText3D (#Text3D)": {
      "prefix": "IsText3D",
      "body": "IsText3D(${1:#Text3D})$2",
      "description": "Tests if the given "
    },
    "IsTexture (#Texture)": {
      "prefix": "IsTexture",
      "body": "IsTexture(${1:#Texture})$2",
      "description": "Tests if the given "
    },
    "IsThread (Thread)": {
      "prefix": "IsThread",
      "body": "IsThread(${1:Thread})$2",
      "description": "Check if the thread exists"
    },
    "IsToolBar (#ToolBar)": {
      "prefix": "IsToolBar",
      "body": "IsToolBar(${1:#ToolBar})$2",
      "description": "Tests if the given "
    },
    "IsWindow (#Window)": {
      "prefix": "IsWindow",
      "body": "IsWindow(${1:#Window})$2",
      "description": "Tests if the given "
    },
    "IsWindow3D (#Window3D)": {
      "prefix": "IsWindow3D",
      "body": "IsWindow3D(${1:#Window3D})$2",
      "description": "Tests if the given "
    },
    "IsXML (#XML)": {
      "prefix": "IsXML",
      "body": "IsXML(${1:#XML})$2",
      "description": "Check if #XML represents a valid XML object"
    },
    "JoystickAxisX (#Joystick [, Pad [, Mode]])": {
      "prefix": "JoystickAxisX",
      "body": "JoystickAxisX(${1:#Joystick})$2",
      "description": "Returns the X axis state"
    },
    "JoystickAxisY (#Joystick [, Pad [, Mode]])": {
      "prefix": "JoystickAxisY",
      "body": "JoystickAxisY(${1:#Joystick})$2",
      "description": "Returns the Y axis state"
    },
    "JoystickAxisZ (#Joystick [, Pad [, Mode]])": {
      "prefix": "JoystickAxisZ",
      "body": "JoystickAxisZ(${1:#Joystick})$2",
      "description": "Returns the Z axis state"
    },
    "JoystickButton (#Joystick, ButtonNumber)": {
      "prefix": "JoystickButton",
      "body": "JoystickButton(${1:#Joystick})$2",
      "description": "Returns 1 if the specified button is pressed"
    },
    "JoystickName (#Joystick)": {
      "prefix": "JoystickName",
      "body": "JoystickName(${1:#Joystick})$2",
      "description": "Returns the joystick name"
    },
    "JSONArraySize (*JSONValue)": {
      "prefix": "JSONArraySize",
      "body": "JSONArraySize(${1:*JSONValue})$2",
      "description": "Return the number elements in a JSON array"
    },
    "JSONErrorLine ()": {
      "prefix": "JSONErrorLine",
      "body": "JSONErrorLine()$1",
      "description": "Get the input line of the most recent JSON parsing error"
    },
    "JSONErrorMessage ()": {
      "prefix": "JSONErrorMessage",
      "body": "JSONErrorMessage()$1",
      "description": "Get a string description of the most recent JSON parsing error"
    },
    "JSONErrorPosition ()": {
      "prefix": "JSONErrorPosition",
      "body": "JSONErrorPosition()$1",
      "description": "Get the input position of the most recent JSON parsing error"
    },
    "JSONMemberKey (*JSONValue)": {
      "prefix": "JSONMemberKey",
      "body": "JSONMemberKey(${1:*JSONValue})$2",
      "description": "Get the key of the current examined member in the JSON object"
    },
    "JSONMemberValue (*JSONValue)": {
      "prefix": "JSONMemberValue",
      "body": "JSONMemberValue(${1:*JSONValue})$2",
      "description": "Get the value of the current examined member in the JSON object"
    },
    "JSONObjectSize (*JSONValue)": {
      "prefix": "JSONObjectSize",
      "body": "JSONObjectSize(${1:*JSONValue})$2",
      "description": "Return the number of members in a JSON object"
    },
    "JSONType (*JSONValue)": {
      "prefix": "JSONType",
      "body": "JSONType(${1:*JSONValue})$2",
      "description": "Return the type of a JSON value"
    },
    "JSONValue (#JSON)": {
      "prefix": "JSONValue",
      "body": "JSONValue(${1:#JSON})$2",
      "description": "Return the main value of JSON data"
    },
    "KeyboardInkey ()": {
      "prefix": "KeyboardInkey",
      "body": "KeyboardInkey()$1",
      "description": "Returns the last ASCII key code which has been pressed"
    },
    "KeyboardMode (Mode)": {
      "prefix": "KeyboardMode",
      "body": "KeyboardMode(${1:Mode})$2",
      "description": "Changes the way the keyboard keys are interpreted"
    },
    "KeyboardPushed (KeyID)": {
      "prefix": "KeyboardPushed",
      "body": "KeyboardPushed(${1:KeyID})$2",
      "description": "Returns 1 if the specified key is currently pushed"
    },
    "KeyboardReleased (KeyID)": {
      "prefix": "KeyboardReleased",
      "body": "KeyboardReleased(${1:KeyID})$2",
      "description": "Returns 1 if the specified key has been pressed (pushed and released)"
    },
    "KillProgram (Program)": {
      "prefix": "KillProgram",
      "body": "KillProgram(${1:Program})$2",
      "description": "Terminate the specified program"
    },
    "KillThread (Thread)": {
      "prefix": "KillThread",
      "body": "KillThread(${1:Thread})$2",
      "description": "Kill the thread. Warning, this is a very dangerous function"
    },
    "LCase (String$)": {
      "prefix": "LCase",
      "body": "LCase(${1:String.s})$2",
      "description": "Returns the original string converted into lower case characters"
    },
    "Left (String$, Length)": {
      "prefix": "Left",
      "body": "Left(${1:String.s})$2",
      "description": "Returns the first \"Length\" number of characters from the left side of the string"
    },
    "Len (String$)": {
      "prefix": "Len",
      "body": "Len(${1:String.s})$2",
      "description": "Returns the Character length of the string"
    },
    "LensFlareEffectColor (#Effect, ColorType, Color)": {
      "prefix": "LensFlareEffectColor",
      "body": "LensFlareEffectColor(${1:#Effect}, ${2:ColorType})$3",
      "description": "Change the color of the specified lens flare part"
    },
    "LibraryID (#Library)": {
      "prefix": "LibraryID",
      "body": "LibraryID(${1:#Library})$2",
      "description": "Returns the specified #LibraryID"
    },
    "LightAttenuation (#Light, Range, Attenuation)": {
      "prefix": "LightAttenuation",
      "body": "LightAttenuation(${1:#Light}, ${2:Range})$3",
      "description": "Change the #Light attenuation"
    },
    "LightDirection (#Light, x, y, z)": {
      "prefix": "LightDirection",
      "body": "LightDirection(${1:#Light}, ${2:x}, ${3:y})$4",
      "description": "Change the #Light direction"
    },
    "LightDirectionX (#Light [, Mode])": {
      "prefix": "LightDirectionX",
      "body": "LightDirectionX(${1:#Light})$2",
      "description": "Return the x direction of the #Light"
    },
    "LightDirectionY (#Light [, Mode])": {
      "prefix": "LightDirectionY",
      "body": "LightDirectionY(${1:#Light})$2",
      "description": "Return the y direction of the #Light"
    },
    "LightDirectionZ (#Light [, Mode])": {
      "prefix": "LightDirectionZ",
      "body": "LightDirectionZ(${1:#Light})$2",
      "description": "Return the z direction of the #Light"
    },
    "LightID (#Light)": {
      "prefix": "LightID",
      "body": "LightID(${1:#Light})$2",
      "description": "Return the unique #Light ID"
    },
    "LightPitch (#Light [, Mode])": {
      "prefix": "LightPitch",
      "body": "LightPitch(${1:#Light})$2",
      "description": "Return the pitch of the #Light"
    },
    "LightRoll (#Light [, Mode])": {
      "prefix": "LightRoll",
      "body": "LightRoll(${1:#Light})$2",
      "description": "Return the roll of the #Light"
    },
    "LightX (#Light [, Mode])": {
      "prefix": "LightX",
      "body": "LightX(${1:#Light})$2",
      "description": "Return the x position of the #Light"
    },
    "LightY (#Light [, Mode])": {
      "prefix": "LightY",
      "body": "LightY(${1:#Light})$2",
      "description": "Return the y position of the #Light"
    },
    "LightYaw (#Light [, Mode])": {
      "prefix": "LightYaw",
      "body": "LightYaw(${1:#Light})$2",
      "description": "Return the yaw of the #Light"
    },
    "LightZ (#Light [, Mode])": {
      "prefix": "LightZ",
      "body": "LightZ(${1:#Light})$2",
      "description": "Return the z position of the #Light"
    },
    "Line (x, y, Width, Height [, Color])": {
      "prefix": "Line",
      "body": "Line(${1:x}, ${2:y}, ${3:Width})$4",
      "description": "Draw a line of given dimension on the current output"
    },
    "LinearGradient (x1, y1, x2, y2)": {
      "prefix": "LinearGradient",
      "body": "LinearGradient(${1:x1}, ${2:y1}, ${3:x2})$4",
      "description": "Use a linear gradient when gradient drawing is enabled"
    },
    "LineXY (x1, y1, x2, y2 [, Color])": {
      "prefix": "LineXY",
      "body": "LineXY(${1:x1}, ${2:y1}, ${3:x2})$4",
      "description": "Draw a line of given dimension on the current output"
    },
    "ListIconGadget (#Gadget, x, y, Width, Height, FirstColumnTitle$, FirstColumnWidth [, Flags])": {
      "prefix": "ListIconGadget",
      "body": "ListIconGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:FirstColumnTitle.s})$7",
      "description": "Create a ListIcon gadget in the current GadgetList"
    },
    "ListViewGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "ListViewGadget",
      "body": "ListViewGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a ListView gadget in the current GadgetList"
    },
    "ListViewGadget3D (#Gadget3D, x, y, Width, Height [, Flags])": {
      "prefix": "ListViewGadget3D",
      "body": "ListViewGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a ListView gadget in the current GadgetList"
    },
    "LoadFont (#Font, Name$, Height [,Style])": {
      "prefix": "LoadFont",
      "body": "LoadFont(${1:#Font}, ${2:Name.s})$3",
      "description": "Tries to open the specified font"
    },
    "LoadImage (#Image, FileName$ [, Flags])": {
      "prefix": "LoadImage",
      "body": "LoadImage(${1:#Image})$2",
      "description": "Load the specified image"
    },
    "LoadJSON (#JSON, FileName$ [, Flags])": {
      "prefix": "LoadJSON",
      "body": "LoadJSON(${1:#JSON})$2",
      "description": "Load JSON data from a file"
    },
    "LoadMesh (#Mesh, Filename$)": {
      "prefix": "LoadMesh",
      "body": "LoadMesh(${1:#Mesh})$2",
      "description": "Load a new #Mesh"
    },
    "LoadMovie (#Movie, FileName$)": {
      "prefix": "LoadMovie",
      "body": "LoadMovie(${1:#Movie})$2",
      "description": "Try to open and prepare a movie for later playback"
    },
    "LoadMusic (#Music, \"FileName)": {
      "prefix": "LoadMusic",
      "body": "LoadMusic(${1:#Music})$2",
      "description": "Load the specified module into memory"
    },
    "LoadSound (#Sound, FileName$ [, Flags])": {
      "prefix": "LoadSound",
      "body": "LoadSound(${1:#Sound})$2",
      "description": "Load the specified sound into memory"
    },
    "LoadSound3D (#Sound3D, FileName$ [, Flags])": {
      "prefix": "LoadSound3D",
      "body": "LoadSound3D(${1:#Sound3D})$2",
      "description": "Load the specified sound into memory"
    },
    "LoadSprite (#Sprite, FileName$ [, Mode])": {
      "prefix": "LoadSprite",
      "body": "LoadSprite(${1:#Sprite})$2",
      "description": "Load the specified sprite into the memory for immediate use"
    },
    "LoadTexture (#Texture, Filename$)": {
      "prefix": "LoadTexture",
      "body": "LoadTexture(${1:#Texture})$2",
      "description": "Load the specified #Texture"
    },
    "LoadWorld (FileName$)": {
      "prefix": "LoadWorld",
      "body": "LoadWorld(${1:FileName.s})$2",
      "description": "Load a whole world and initialize it"
    },
    "LoadXML (#XML, FileName$ [, Encoding])": {
      "prefix": "LoadXML",
      "body": "LoadXML(${1:#XML})$2",
      "description": "Load a XML file and parse it"
    },
    "Loc (#File)": {
      "prefix": "Loc",
      "body": "Loc(${1:#File})$2",
      "description": "Returns the actual pointer position of the specified file"
    },
    "LockMutex (Mutex)": {
      "prefix": "LockMutex",
      "body": "LockMutex(${1:Mutex})$2",
      "description": "Wait for ownership of the mutex object"
    },
    "Lof (#File)": {
      "prefix": "Lof",
      "body": "Lof(${1:#File})$2",
      "description": "Returns the length of the specified file"
    },
    "Log (Value)": {
      "prefix": "Log",
      "body": "Log(${1:Value})$2",
      "description": "Returns the Log of the value"
    },
    "Log10 (x)": {
      "prefix": "Log10",
      "body": "Log10(${1:x})$2",
      "description": "Returns the Log in base 10 of the value"
    },
    "LSet (String$, Length [, Character])": {
      "prefix": "LSet",
      "body": "LSet(${1:String.s})$2",
      "description": "Pads a string to the left, and adds \"space\" characters to fit the specified length"
    },
    "LTrim (String$ [, Character$])": {
      "prefix": "LTrim",
      "body": "LTrim(${1:String.s})$2",
      "description": "Removes all the \"space\" or given characters located at the beginning of a string"
    },
    "MailProgress (#Mail)": {
      "prefix": "MailProgress",
      "body": "MailProgress(${1:#Mail})$2",
      "description": "Returns the current progress of a mail being sent"
    },
    "MainXMLNode (#XML)": {
      "prefix": "MainXMLNode",
      "body": "MainXMLNode(${1:#XML})$2",
      "description": "Get the main node of the XML tree"
    },
    "MakeIPAddress (Field0, Field1, Field2, Field3 [, Field4, Field5, Field6, Field7])": {
      "prefix": "MakeIPAddress",
      "body": "MakeIPAddress(${1:Field0}, ${2:Field1}, ${3:Field2})$4",
      "description": "Return the value for the specified IP"
    },
    "MatchRegularExpression (#RegularExpression, String$)": {
      "prefix": "MatchRegularExpression",
      "body": "MatchRegularExpression(${1:#RegularExpression})$2",
      "description": "Tests if a string match the regular expression"
    },
    "MaterialBlendingMode (#Material, Mode)": {
      "prefix": "MaterialBlendingMode",
      "body": "MaterialBlendingMode(${1:#Material})$2",
      "description": "Change the #Material blending mode"
    },
    "MaterialCullingMode (#Material, Mode)": {
      "prefix": "MaterialCullingMode",
      "body": "MaterialCullingMode(${1:#Material})$2",
      "description": "Change the #Material culling mode"
    },
    "MaterialFilteringMode (#Material, Mode [, MaxAnisotropy])": {
      "prefix": "MaterialFilteringMode",
      "body": "MaterialFilteringMode(${1:#Material})$2",
      "description": "Change the texture filtering mode for the #Material"
    },
    "MaterialFog (#Material, Color, Intensity, StartDistance, EndDistance)": {
      "prefix": "MaterialFog",
      "body": "MaterialFog(${1:#Material}, ${2:Color}, ${3:Intensity}, ${4:StartDistance})$5",
      "description": "Display a fog effect on the material"
    },
    "MaterialID (#Material)": {
      "prefix": "MaterialID",
      "body": "MaterialID(${1:#Material})$2",
      "description": "Return the unique #Material ID"
    },
    "MaterialShadingMode (#Material, Mode)": {
      "prefix": "MaterialShadingMode",
      "body": "MaterialShadingMode(${1:#Material})$2",
      "description": "Change the shading mode for the #Material"
    },
    "MaterialShininess (#Material, Shininess)": {
      "prefix": "MaterialShininess",
      "body": "MaterialShininess(${1:#Material})$2",
      "description": "Change the #Material shininess"
    },
    "MemorySize (Memory)": {
      "prefix": "MemorySize",
      "body": "MemorySize(${1:Memory})$2",
      "description": "Return the size of the specified memory block"
    },
    "MemoryStatus (StatusType)": {
      "prefix": "MemoryStatus",
      "body": "MemoryStatus(${1:StatusType})$2",
      "description": "Returns information about the available memory in the computer"
    },
    "MemoryStringLength (*String [, Flags])": {
      "prefix": "MemoryStringLength",
      "body": "MemoryStringLength(${1:*String})$2",
      "description": "Calculate the length of a memory string"
    },
    "MenuBar ()": {
      "prefix": "MenuBar",
      "body": "MenuBar()$1",
      "description": "Creates a separator bar in the current menu"
    },
    "MenuHeight ()": {
      "prefix": "MenuHeight",
      "body": "MenuHeight()$1",
      "description": "Returns the menu bar height, in pixels"
    },
    "MenuID (#Menu)": {
      "prefix": "MenuID",
      "body": "MenuID(${1:#Menu})$2",
      "description": "Returns the unique ID which identifies the menu in the operating system"
    },
    "MenuItem (MenuItemID, Text$ [, ImageID])": {
      "prefix": "MenuItem",
      "body": "MenuItem(${1:MenuItemID})$2",
      "description": "Creates a new item entry for the menu"
    },
    "MenuTitle (Title$)": {
      "prefix": "MenuTitle",
      "body": "MenuTitle(${1:Title.s})$2",
      "description": "Creates a new title entry for the menu"
    },
    " [, Location])": {
      "prefix": "MergeLists",
      "body": "MergeLists(${1:List()})$2",
      "description": "Move all elements from List() to DestinationList()"
    },
    "MeshID (#Mesh)": {
      "prefix": "MeshID",
      "body": "MeshID(${1:#Mesh})$2",
      "description": "Return the unique #Mesh ID"
    },
    "MeshPoseCount (#Mesh)": {
      "prefix": "MeshPoseCount",
      "body": "MeshPoseCount(${1:#Mesh})$2",
      "description": "Return the mesh pose count"
    },
    "MeshPoseName (#Mesh, PoseIndex)": {
      "prefix": "MeshPoseName",
      "body": "MeshPoseName(${1:#Mesh})$2",
      "description": "Return the mesh pose name"
    },
    "MessageRequester (Title$, Text$ [, Flags])": {
      "prefix": "MessageRequester",
      "body": "MessageRequester(${1:Title.s})$2",
      "description": "Open a blocking requester to display some information"
    },
    "Mid (String$, StartPos [, Length])": {
      "prefix": "Mid",
      "body": "Mid(${1:String.s})$2",
      "description": "Extract a string at the specified position from the given String$"
    },
    "Minute (Date)": {
      "prefix": "Minute",
      "body": "Minute(${1:Date})$2",
      "description": "Returns the minute value of the specified date (between 0 and 59)"
    },
    "Mod (Number, Divisor)": {
      "prefix": "Mod",
      "body": "Mod(${1:Number})$2",
      "description": "Returns the remainder of Number/Divisor"
    },
    "Month (Date)": {
      "prefix": "Month",
      "body": "Month(${1:Date})$2",
      "description": "Returns the month value of the specified date (between 1 and 12)"
    },
    "MouseButton (ButtonNumber)": {
      "prefix": "MouseButton",
      "body": "MouseButton(${1:ButtonNumber})$2",
      "description": "Returns 0 if the specified button is not pressed, else the button is pressed"
    },
    "MouseDeltaX ()": {
      "prefix": "MouseDeltaX",
      "body": "MouseDeltaX()$1",
      "description": "Returns the mouse X movement (in pixel) since the last call of this function"
    },
    "MouseDeltaY ()": {
      "prefix": "MouseDeltaY",
      "body": "MouseDeltaY()$1",
      "description": "Returns the mouse Y movement (in pixel) since the last call of this function"
    },
    "MouseLocate (x, y)": {
      "prefix": "MouseLocate",
      "body": "MouseLocate(${1:x})$2",
      "description": "Changes the mouse X,Y position to the new specified one"
    },
    "MousePick (#Camera, x, y [, PickMask])": {
      "prefix": "MousePick",
      "body": "MousePick(${1:#Camera}, ${2:x})$3",
      "description": "Returns the first #Entity at the given position"
    },
    "MouseRayCast (#Camera, x, y, PickMask)": {
      "prefix": "MouseRayCast",
      "body": "MouseRayCast(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Returns if a ray has encountered an object"
    },
    "MouseWheel ()": {
      "prefix": "MouseWheel",
      "body": "MouseWheel()$1",
      "description": "Returns the number of positions since the last call"
    },
    "MouseX ()": {
      "prefix": "MouseX",
      "body": "MouseX()$1",
      "description": "Returns the actual mouse X position (in pixel) on the current screen"
    },
    "MouseY ()": {
      "prefix": "MouseY",
      "body": "MouseY()$1",
      "description": "Returns the actual mouse X position (in pixel) on the current screen"
    },
    "MoveBillboard (#Billboard, #BillboardGroup, x, y, z)": {
      "prefix": "MoveBillboard",
      "body": "MoveBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:x}, ${4:y})$5",
      "description": "Move the #Billboard relatives to its previous location"
    },
    "MoveBillboardGroup (#BillboardGroup, x, y, z [, Mode])": {
      "prefix": "MoveBillboardGroup",
      "body": "MoveBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "description": "Move the #BillboardGroup relatives to its previous location"
    },
    "MoveCamera (#Camera, x, y, z [, Mode])": {
      "prefix": "MoveCamera",
      "body": "MoveCamera(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Move the #Camera relative to its previous position"
    },
    ", Location [, *RelativeElement])": {
      "prefix": "MoveElement",
      "body": "MoveElement(${1:List()})$2",
      "description": "Move the current element to a different position in the list"
    },
    "MoveEntity (#Entity, x, y, z [, Mode])": {
      "prefix": "MoveEntity",
      "body": "MoveEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Move the #Entity relative to its previous position"
    },
    "MoveEntityBone (#Entity, Bone$, x, y, z , Mode)": {
      "prefix": "MoveEntityBone",
      "body": "MoveEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6",
      "description": "Move the #Entity bone relative to its previous position"
    },
    "MoveLight (#Light, x, y, z [, Mode])": {
      "prefix": "MoveLight",
      "body": "MoveLight(${1:#Light}, ${2:x}, ${3:y})$4",
      "description": "Move the #Light"
    },
    "MoveMemory (SourceMemory, DestinationMemory, Length)": {
      "prefix": "MoveMemory",
      "body": "MoveMemory(${1:SourceMemory}, ${2:DestinationMemory})$3",
      "description": "Move a memory area from \"SourceMemory\" to \"DestinationMemory\""
    },
    "MoveNode (#Node, x, y, z [, Mode])": {
      "prefix": "MoveNode",
      "body": "MoveNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "description": "Move the #Node"
    },
    "MoveParticleEmitter (#ParticleEmitter, x, y, z [, Mode])": {
      "prefix": "MoveParticleEmitter",
      "body": "MoveParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "description": "Move the #ParticleEmitter relative to its previous position"
    },
    "MovePathCursor (x.d, y.d [, Flags])": {
      "prefix": "MovePathCursor",
      "body": "MovePathCursor(${1:x.d})$2",
      "description": "Move the vector drawing cursor without adding a line"
    },
    "MoveText3D (#Text3D, x, y, z [, Mode])": {
      "prefix": "MoveText3D",
      "body": "MoveText3D(${1:#Text3D}, ${2:x}, ${3:y})$4",
      "description": "Move the #Text3D"
    },
    "MoveXMLNode (Node, ParentNode [, PreviousNode])": {
      "prefix": "MoveXMLNode",
      "body": "MoveXMLNode(${1:Node})$2",
      "description": "Move the XML node to a new location (or different XML tree)"
    },
    "MovieAudio (#Movie, Volume, Balance)": {
      "prefix": "MovieAudio",
      "body": "MovieAudio(${1:#Movie}, ${2:Volume})$3",
      "description": "Control the audio stream of the movie"
    },
    "MovieHeight (#Movie)": {
      "prefix": "MovieHeight",
      "body": "MovieHeight(${1:#Movie})$2",
      "description": "Returns the height (in pixel) of the movie"
    },
    "MovieInfo (#Movie, Flags)": {
      "prefix": "MovieInfo",
      "body": "MovieInfo(${1:#Movie})$2",
      "description": "Returns an additional information about the movie"
    },
    "MovieLength (#Movie)": {
      "prefix": "MovieLength",
      "body": "MovieLength(${1:#Movie})$2",
      "description": "Returns the length (in frames) of the movie"
    },
    "MovieSeek (#Movie, Frame)": {
      "prefix": "MovieSeek",
      "body": "MovieSeek(${1:#Movie})$2",
      "description": "Change the movie position to the given frame"
    },
    "MovieStatus (#Movie)": {
      "prefix": "MovieStatus",
      "body": "MovieStatus(${1:#Movie})$2",
      "description": "Get the status of the movie (-1: paused, 0: stopped, >0: playing)"
    },
    "MovieWidth (#Movie)": {
      "prefix": "MovieWidth",
      "body": "MovieWidth(${1:#Movie})$2",
      "description": "Returns the width (in pixel) of the movie"
    },
    "MusicVolume (#Music, Volume)": {
      "prefix": "MusicVolume",
      "body": "MusicVolume(${1:#Music})$2",
      "description": "Change the current module volume in realtime"
    },
    "NaN ()": {
      "prefix": "NaN",
      "body": "NaN()$1",
      "description": "Returns the special \"Not a Number\" value"
    },
    "NetworkClientEvent (Connection)": {
      "prefix": "NetworkClientEvent",
      "body": "NetworkClientEvent(${1:Connection})$2",
      "description": "Check if an event occured on a client"
    },
    "NetworkServerEvent ([ServerID])": {
      "prefix": "NetworkServerEvent",
      "body": "NetworkServerEvent()$1",
      "description": "Check if an event occured on a server"
    },
    "NewPrinterPage ()": {
      "prefix": "NewPrinterPage",
      "body": "NewPrinterPage()$1",
      "description": "Start a new page"
    },
    "NewVectorPage ()": {
      "prefix": "NewVectorPage",
      "body": "NewVectorPage()$1",
      "description": "Begin a new page in the vector drawing output"
    },
    "NextDatabaseDriver ()": {
      "prefix": "NextDatabaseDriver",
      "body": "NextDatabaseDriver()$1",
      "description": "Retrieves information about the next available database driver"
    },
    "NextDatabaseRow (#Database)": {
      "prefix": "NextDatabaseRow",
      "body": "NextDatabaseRow(${1:#Database})$2",
      "description": "Retrieves information about the next database row"
    },
    "NextDirectoryEntry (#Directory)": {
      "prefix": "NextDirectoryEntry",
      "body": "NextDirectoryEntry(${1:#Directory})$2",
      "description": "Go to the next directory entry"
    },
    "NextEnvironmentVariable ()": {
      "prefix": "NextEnvironmentVariable",
      "body": "NextEnvironmentVariable()$1",
      "description": "Examine the next variable in the environment block"
    },
    "NextFTPDirectoryEntry (#Ftp)": {
      "prefix": "NextFTPDirectoryEntry",
      "body": "NextFTPDirectoryEntry(${1:#Ftp})$2",
      "description": "Go to the next FTP directory entry"
    },
    "NextInstruction ()": {
      "prefix": "NextInstruction",
      "body": "NextInstruction()$1",
      "description": "Disassemble the next instruction"
    },
    "NextIPAddress ()": {
      "prefix": "NextIPAddress",
      "body": "NextIPAddress()$1",
      "description": "Retrieve the next host IP address"
    },
    "NextJSONMember (*JSONValue)": {
      "prefix": "NextJSONMember",
      "body": "NextJSONMember(${1:*JSONValue})$2",
      "description": "Get the next member in the examined JSON object"
    },
    "NextPackEntry (#Pack)": {
      "prefix": "NextPackEntry",
      "body": "NextPackEntry(${1:#Pack})$2",
      "description": "Next pack entry"
    },
    "NextPreferenceGroup ()": {
      "prefix": "NextPreferenceGroup",
      "body": "NextPreferenceGroup()$1",
      "description": "Go to the next group after a call to ExaminePreferenceGroups()"
    },
    "NextPreferenceKey ()": {
      "prefix": "NextPreferenceKey",
      "body": "NextPreferenceKey()$1",
      "description": "Go to the next key after a call to ExaminePreferenceKeys()"
    },
    "NextRegularExpressionMatch (#RegularExpression)": {
      "prefix": "NextRegularExpressionMatch",
      "body": "NextRegularExpressionMatch(${1:#RegularExpression})$2",
      "description": "Move to the next match of the regular expression"
    },
    "NextScreenMode ()": {
      "prefix": "NextScreenMode",
      "body": "NextScreenMode()$1",
      "description": "Get the next screen mode information"
    },
    "NextSelectedFileName ()": {
      "prefix": "NextSelectedFileName",
      "body": "NextSelectedFileName()$1",
      "description": "Get the next selected filename"
    },
    "NextWorldCollision ()": {
      "prefix": "NextWorldCollision",
      "body": "NextWorldCollision()$1",
      "description": "The next world collision"
    },
    "NextXMLAttribute (Node)": {
      "prefix": "NextXMLAttribute",
      "body": "NextXMLAttribute(${1:Node})$2",
      "description": "Get the next attribute in the examined XML node"
    },
    "NextXMLNode (Node)": {
      "prefix": "NextXMLNode",
      "body": "NextXMLNode(${1:Node})$2",
      "description": "Get the next XML node on the same level as the given node"
    },
    "NodeAnimationStatus (#NodeAnimation)": {
      "prefix": "NodeAnimationStatus",
      "body": "NodeAnimationStatus(${1:#NodeAnimation})$2",
      "description": "Return the specified #NodeAnimation status"
    },
    "NodeFixedYawAxis (#Node, Mode [, VectorX, VectorY, VectorZ])": {
      "prefix": "NodeFixedYawAxis",
      "body": "NodeFixedYawAxis(${1:#Node})$2",
      "description": "Change the way the yaw axis is managed"
    },
    "NodeID (#Node)": {
      "prefix": "NodeID",
      "body": "NodeID(${1:#Node})$2",
      "description": "Return the unique #Node system identifier"
    },
    "NodeLookAt (#Node, x, y, z [, DirectionX, DirectionY, DirectionZ)": {
      "prefix": "NodeLookAt",
      "body": "NodeLookAt(${1:#Node}, ${2:x}, ${3:y})$4",
      "description": "Change the #Node orientation to look at the specified point"
    },
    "NodePitch (#Node [, Mode])": {
      "prefix": "NodePitch",
      "body": "NodePitch(${1:#Node})$2",
      "description": "Return the pitch of the #Node"
    },
    "NodeRoll (#Node [, Mode])": {
      "prefix": "NodeRoll",
      "body": "NodeRoll(${1:#Node})$2",
      "description": "Return the roll of the #Node"
    },
    "NodeX (#Node [, Mode])": {
      "prefix": "NodeX",
      "body": "NodeX(${1:#Node})$2",
      "description": "Return the x position of the #Node"
    },
    "NodeY (#Node [, Mode])": {
      "prefix": "NodeY",
      "body": "NodeY(${1:#Node})$2",
      "description": "Return the y position of the #Node"
    },
    "NodeYaw (#Node [, Mode])": {
      "prefix": "NodeYaw",
      "body": "NodeYaw(${1:#Node})$2",
      "description": "Return the yaw of the #Node"
    },
    "NodeZ (#Node [, Mode])": {
      "prefix": "NodeZ",
      "body": "NodeZ(${1:#Node})$2",
      "description": "Return the z position of the #Node"
    },
    "NormalX ()": {
      "prefix": "NormalX",
      "body": "NormalX()$1",
      "description": "Returns the last pick normal X value"
    },
    "NormalY ()": {
      "prefix": "NormalY",
      "body": "NormalY()$1",
      "description": "Returns the last pick normal Y value"
    },
    "NormalZ ()": {
      "prefix": "NormalZ",
      "body": "NormalZ()$1",
      "description": "Returns the last pick normal Z value"
    },
    "OnErrorDefault ()": {
      "prefix": "OnErrorDefault",
      "body": "OnErrorDefault()$1",
      "description": "Uninstall any error handler so the default OS action is taken on further errors"
    },
    "OnErrorExit ()": {
      "prefix": "OnErrorExit",
      "body": "OnErrorExit()$1",
      "description": "Exit the program if an error occurs"
    },
    "OnErrorGoto (?LabelAddress)": {
      "prefix": "OnErrorGoto",
      "body": "OnErrorGoto(${1:?LabelAddress})$2",
      "description": "Continue execution at the given label if an error occurs"
    },
    "OpenConsole ([Title$])": {
      "prefix": "OpenConsole",
      "body": "OpenConsole()$1",
      "description": "Open a console window"
    },
    "OpenCryptRandom ()": {
      "prefix": "OpenCryptRandom",
      "body": "OpenCryptRandom()$1",
      "description": "Open the cryptographic random number generator"
    },
    "OpenDatabase (#Database, DatabaseName$, User$, Password$ [, Plugin])": {
      "prefix": "OpenDatabase",
      "body": "OpenDatabase(${1:#Database}, ${2:DatabaseName.s}, ${3:User.s})$4",
      "description": "Opens the specified database"
    },
    "OpenDatabaseRequester (#Database [, Plugin])": {
      "prefix": "OpenDatabaseRequester",
      "body": "OpenDatabaseRequester(${1:#Database})$2",
      "description": "Opens the standard Windows ODBC requester to choose which database to open"
    },
    "OpenFile (#File, FileName$ [, Flags])": {
      "prefix": "OpenFile",
      "body": "OpenFile(${1:#File})$2",
      "description": "Open the designed file or create it if it doesn't exists"
    },
    "OpenFileRequester (Title$, DefaultFile$, Pattern$, PatternPosition [, Flags])": {
      "prefix": "OpenFileRequester",
      "body": "OpenFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4",
      "description": "Open the standard requester which allow to choose a file"
    },
    "OpenFTP (#Ftp, ServerName$, User$, Password$ [, Passive [, Port]])": {
      "prefix": "OpenFTP",
      "body": "OpenFTP(${1:#Ftp}, ${2:ServerName.s}, ${3:User.s})$4",
      "description": "Try to open a connection on the specified server"
    },
    "OpenGadgetList (#Gadget [, GadgetItem])": {
      "prefix": "OpenGadgetList",
      "body": "OpenGadgetList(${1:#Gadget})$2",
      "description": "Makes the Gadget the current gadget list"
    },
    "OpenGadgetList3D (#Gadget3D [, GadgetItem])": {
      "prefix": "OpenGadgetList3D",
      "body": "OpenGadgetList3D(${1:#Gadget3D})$2",
      "description": "Makes the Gadget the current gadget list"
    },
    "OpenGLGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "OpenGLGadget",
      "body": "OpenGLGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create an OpenGL gadget in the current GadgetList"
    },
    "OpenHelp (Filename$, Topic$)": {
      "prefix": "OpenHelp",
      "body": "OpenHelp(${1:Filename.s})$2",
      "description": "Opens a new Help window"
    },
    "OpenLibrary (#Library, Filename$)": {
      "prefix": "OpenLibrary",
      "body": "OpenLibrary(${1:#Library})$2",
      "description": "Open a new library (DLL)"
    },
    "OpenNetworkConnection (ServerName$, Port [, Type [, TimeOut [, LocalIP$ [, LocalPort]]]])": {
      "prefix": "OpenNetworkConnection",
      "body": "OpenNetworkConnection(${1:ServerName.s})$2",
      "description": "Try to open a connection on the specified server"
    },
    "OpenPack (#Pack, Filename$ [, PluginID])": {
      "prefix": "OpenPack",
      "body": "OpenPack(${1:#Pack})$2",
      "description": "Open a pack file"
    },
    "OpenPreferences (Filename$ [, Flags])": {
      "prefix": "OpenPreferences",
      "body": "OpenPreferences(${1:Filename.s})$2",
      "description": "Open and load a preference file"
    },
    "OpenScreen (Width, Height, Depth, Title$ [, FlipMode [, RefreshRate]])": {
      "prefix": "OpenScreen",
      "body": "OpenScreen(${1:Width}, ${2:Height}, ${3:Depth})$4",
      "description": "Open a new screen according to the specified \"Width\", \"Height\" and \"Depth\""
    },
    "OpenSerialPort (#SerialPort, SerialPortName$, Bauds, Parity, Data, Stop, HandshakeMode, InputBufferSize, OutputBufferSize)": {
      "prefix": "OpenSerialPort",
      "body": "OpenSerialPort(${1:#SerialPort}, ${2:SerialPortName.s}, ${3:Bauds}, ${4:Parity}, ${5:Data}, ${6:Stop}, ${7:HandshakeMode}, ${8:InputBufferSize})$9",
      "description": "Open a serial port for use"
    },
    "OpenSubMenu (Text$ [, ImageID])": {
      "prefix": "OpenSubMenu",
      "body": "OpenSubMenu(${1:Text.s})$2",
      "description": "Creates an empty sub-menu entry in the current menu"
    },
    "OpenWindow (#Window, x, y, InnerWidth, InnerHeight, Title$ [, Flags [, ParentID]])": {
      "prefix": "OpenWindow",
      "body": "OpenWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:InnerWidth}, ${5:InnerHeight}, ${6:Title$})$7",
      "description": "Opens a new window according to the specified parameters"
    },
    "OpenWindow3D (#Window3D, x, y, width, height, Title$ [, Flags])": {
      "prefix": "OpenWindow3D",
      "body": "OpenWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:width}, ${5:height})$6",
      "description": "Opens a new window according to the specified parameters"
    },
    "OpenXMLDialog (#Dialog, #Xml, Name$ [, x, y [, Width, Height [, ParentID]]])": {
      "prefix": "OpenXMLDialog",
      "body": "OpenXMLDialog(${1:#Dialog}, ${2:#Xml})$3",
      "description": "Creates a dialog from an XML object"
    },
    "OptionGadget (#Gadget, x, y, Width, Height, Text$)": {
      "prefix": "OptionGadget",
      "body": "OptionGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Option gadget in the current GadgetList"
    },
    "OptionGadget3D (#Gadget3D, x, y, Width, Height, Text$)": {
      "prefix": "OptionGadget3D",
      "body": "OptionGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Option gadget in the current GadgetList"
    },
    "OSVersion ()": {
      "prefix": "OSVersion",
      "body": "OSVersion()$1",
      "description": "Retrieve the OS version number"
    },
    "OutputDepth ()": {
      "prefix": "OutputDepth",
      "body": "OutputDepth()$1",
      "description": "Get the depth of the current drawing output"
    },
    "OutputHeight ()": {
      "prefix": "OutputHeight",
      "body": "OutputHeight()$1",
      "description": "Get the height of the current drawing output"
    },
    "OutputWidth ()": {
      "prefix": "OutputWidth",
      "body": "OutputWidth()$1",
      "description": "Get the width of the current drawing output"
    },
    "PackEntryName (#Pack)": {
      "prefix": "PackEntryName",
      "body": "PackEntryName(${1:#Pack})$2",
      "description": "Returns the current pack entry name"
    },
    "PackEntrySize (#Pack [, Mode])": {
      "prefix": "PackEntrySize",
      "body": "PackEntrySize(${1:#Pack})$2",
      "description": "Returns the current pack entry size"
    },
    "PackEntryType (#Pack)": {
      "prefix": "PackEntryType",
      "body": "PackEntryType(${1:#Pack})$2",
      "description": "Returns the current pack entry type"
    },
    "PanelGadget (#Gadget, x, y, Width, Height)": {
      "prefix": "PanelGadget",
      "body": "PanelGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Creates a Panel gadget in the current GadgetList"
    },
    "PanelGadget3D (#Gadget3D, x, y, Width, Height)": {
      "prefix": "PanelGadget3D",
      "body": "PanelGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Creates a Panel gadget in the current GadgetList"
    },
    "ParentXMLNode (Node)": {
      "prefix": "ParentXMLNode",
      "body": "ParentXMLNode(${1:Node})$2",
      "description": "Get the parent of the given XML node"
    },
    "Parse3DScripts ()": {
      "prefix": "Parse3DScripts",
      "body": "Parse3DScripts()$1",
      "description": "Parse all the scripts founds in the declared path or archives"
    },
    "ParseDate (Mask$, Date$)": {
      "prefix": "ParseDate",
      "body": "ParseDate(${1:Mask.s})$2",
      "description": "Transform a string date into a regular date value, to be used with other date functions"
    },
    "ParseJSON (#JSON, Input$ [, Flags])": {
      "prefix": "ParseJSON",
      "body": "ParseJSON(${1:#JSON})$2",
      "description": "Parse JSON data from a string"
    },
    "ParseXML (#XML, Input$)": {
      "prefix": "ParseXML",
      "body": "ParseXML(${1:#XML})$2",
      "description": "Parse XML from a string. The XML must be encoded in PB string format"
    },
    "ParticleColorFader (#ParticleEmitter, RedRate, GreenRate, BlueRate)": {
      "prefix": "ParticleColorFader",
      "body": "ParticleColorFader(${1:#ParticleEmitter}, ${2:RedRate}, ${3:GreenRate})$4",
      "description": "Change the particles color fader rate"
    },
    "ParticleColorRange (#ParticleEmitter, StartColor, EndColor)": {
      "prefix": "ParticleColorRange",
      "body": "ParticleColorRange(${1:#ParticleEmitter}, ${2:StartColor})$3",
      "description": "Change the particles color range"
    },
    "ParticleEmissionRate (#ParticleEmitter, Rate)": {
      "prefix": "ParticleEmissionRate",
      "body": "ParticleEmissionRate(${1:#ParticleEmitter})$2",
      "description": "Change the #ParticleEmitter emission rate (particles per seconds)"
    },
    "ParticleEmitterDirection (#ParticleEmitter, x, y, z)": {
      "prefix": "ParticleEmitterDirection",
      "body": "ParticleEmitterDirection(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "description": "Change the #ParticleEmitter direction"
    },
    "ParticleEmitterID (#ParticleEmitter)": {
      "prefix": "ParticleEmitterID",
      "body": "ParticleEmitterID(${1:#ParticleEmitter})$2",
      "description": "Returns the unique ID which identifies the particle emitter in the operating system"
    },
    "ParticleEmitterX (#ParticleEmitter [, Mode])": {
      "prefix": "ParticleEmitterX",
      "body": "ParticleEmitterX(${1:#ParticleEmitter})$2",
      "description": "Return the x position of the #ParticleEmitter"
    },
    "ParticleEmitterY (#ParticleEmitter [, Mode])": {
      "prefix": "ParticleEmitterY",
      "body": "ParticleEmitterY(${1:#ParticleEmitter})$2",
      "description": "Return the y position of the #ParticleEmitter"
    },
    "ParticleEmitterZ (#ParticleEmitter [, Mode])": {
      "prefix": "ParticleEmitterZ",
      "body": "ParticleEmitterZ(${1:#ParticleEmitter})$2",
      "description": "Return the z position of the #ParticleEmitter"
    },
    "ParticleMaterial (#ParticleEmitter, MaterialID)": {
      "prefix": "ParticleMaterial",
      "body": "ParticleMaterial(${1:#ParticleEmitter})$2",
      "description": "Change the #ParticleEmitter material with the new one"
    },
    "ParticleSize (#ParticleEmitter, Width, Height)": {
      "prefix": "ParticleSize",
      "body": "ParticleSize(${1:#ParticleEmitter}, ${2:Width})$3",
      "description": "Change the particles dimensions"
    },
    "ParticleSpeedFactor (#ParticleEmitter, SpeedFactor)": {
      "prefix": "ParticleSpeedFactor",
      "body": "ParticleSpeedFactor(${1:#ParticleEmitter})$2",
      "description": "Change the particles speed factor"
    },
    "ParticleTimeToLive (#ParticleEmitter, MinimumTime, MaximumTime)": {
      "prefix": "ParticleTimeToLive",
      "body": "ParticleTimeToLive(${1:#ParticleEmitter}, ${2:MinimumTime})$3",
      "description": "Change the particles time to live"
    },
    "ParticleVelocity (#ParticleEmitter, Minimum, Maximum)": {
      "prefix": "ParticleVelocity",
      "body": "ParticleVelocity(${1:#ParticleEmitter}, ${2:Minimum})$3",
      "description": "Change the particles velocity"
    },
    "PathCursorX ()": {
      "prefix": "PathCursorX",
      "body": "PathCursorX()$1",
      "description": "Get the current X coordinate of the path cursor"
    },
    "PathCursorY ()": {
      "prefix": "PathCursorY",
      "body": "PathCursorY()$1",
      "description": "Get the current Y coordinate of the path cursor"
    },
    "PathRequester (Title$, InitialPath$)": {
      "prefix": "PathRequester",
      "body": "PathRequester(${1:Title.s})$2",
      "description": "Open the standard path requester which allow to select a path"
    },
    "PauseAudioCD ()": {
      "prefix": "PauseAudioCD",
      "body": "PauseAudioCD()$1",
      "description": "Pause the AudioCD playback"
    },
    "PauseMovie (#Movie)": {
      "prefix": "PauseMovie",
      "body": "PauseMovie(${1:#Movie})$2",
      "description": "Pause the movie playback"
    },
    "PauseSound (#Sound [, Channel])": {
      "prefix": "PauseSound",
      "body": "PauseSound(${1:#Sound})$2",
      "description": "Pause the specified sound (if it was playing)"
    },
    "PauseThread (Thread)": {
      "prefix": "PauseThread",
      "body": "PauseThread(${1:Thread})$2",
      "description": "Pause the thread execution"
    },
    "PdfVectorOutput (Filename$, Width.d, Height.d [, Unit])": {
      "prefix": "PdfVectorOutput",
      "body": "PdfVectorOutput(${1:Filename.s}, ${2:Width.d})$3",
      "description": "Create a vector drawing output to create a PDF file"
    },
    "PeekA (Memory)": {
      "prefix": "PeekA",
      "body": "PeekA(${1:Memory})$2",
      "description": "Reads an ascii character (1 byte) from the specified memory address"
    },
    "PeekB (*MemoryBuffer)": {
      "prefix": "PeekB",
      "body": "PeekB(${1:*MemoryBuffer})$2",
      "description": "Read a byte number from the address. Unsigned=PeekB(adr) & $FF"
    },
    "PeekC (Memory)": {
      "prefix": "PeekC",
      "body": "PeekC(${1:Memory})$2",
      "description": "Reads a character (1 bytes in ascii, 2 bytes in unicode) from the specified memory address"
    },
    "PeekD (Memory)": {
      "prefix": "PeekD",
      "body": "PeekD(${1:Memory})$2",
      "description": "Reads a double (8 bytes) from the specified memory address"
    },
    "PeekF (*MemoryBuffer)": {
      "prefix": "PeekF",
      "body": "PeekF(${1:*MemoryBuffer})$2",
      "description": "Read a float (4 bytes) from the specified memory address"
    },
    "PeekI (Memory)": {
      "prefix": "PeekI",
      "body": "PeekI(${1:Memory})$2",
      "description": "Reads an integer (8 bytes) from the specified memory address"
    },
    "PeekL (*MemoryBuffer)": {
      "prefix": "PeekL",
      "body": "PeekL(${1:*MemoryBuffer})$2",
      "description": "Read a long (4 bytes) number from the specified memory address"
    },
    "PeekQ (Memory)": {
      "prefix": "PeekQ",
      "body": "PeekQ(${1:Memory})$2",
      "description": "Reads a quad (8 bytes) from the specified memory address"
    },
    "PeekS (Memory [, Length [, Format]])": {
      "prefix": "PeekS",
      "body": "PeekS(${1:Memory})$2",
      "description": "Read a null terminated string at the specified memory address"
    },
    "PeekU (Memory)": {
      "prefix": "PeekU",
      "body": "PeekU(${1:Memory})$2",
      "description": "Reads an unicode character (2 bytes) from the specified memory address"
    },
    "PeekW (*MemoryBuffer)": {
      "prefix": "PeekW",
      "body": "PeekW(${1:*MemoryBuffer})$2",
      "description": "Read a word (2 bytes) number from the specified memory address"
    },
    "PickX ()": {
      "prefix": "PickX",
      "body": "PickX()$1",
      "description": "Returns the last pick X position"
    },
    "PickY ()": {
      "prefix": "PickY",
      "body": "PickY()$1",
      "description": "Returns the last pick Y position"
    },
    "PickZ ()": {
      "prefix": "PickZ",
      "body": "PickZ()$1",
      "description": "Returns the last pick Z position"
    },
    "Pitch (ObjectID, Value.f, Mode)": {
      "prefix": "Pitch",
      "body": "Pitch(${1:ObjectID}, ${2:Value.f})$3",
      "description": "Pitch the specified object"
    },
    "PlayAudioCD (StartTrack, EndTrack)": {
      "prefix": "PlayAudioCD",
      "body": "PlayAudioCD(${1:StartTrack})$2",
      "description": "Start to play the CD-Audio from \"StartTrack\" until the end of \"EndTrack\""
    },
    "PlayMovie (#Movie, WindowID)": {
      "prefix": "PlayMovie",
      "body": "PlayMovie(${1:#Movie})$2",
      "description": "Start to play a movie previously loaded with LoadMovie() on the specified window"
    },
    "PlayMusic (#Music)": {
      "prefix": "PlayMusic",
      "body": "PlayMusic(${1:#Music})$2",
      "description": "Start to play the specified module previously loaded with the LoadMusic() command"
    },
    "PlaySound (#Sound [, Flags [, Volume]])": {
      "prefix": "PlaySound",
      "body": "PlaySound(${1:#Sound})$2",
      "description": "Start to play the #Sound"
    },
    "PlaySound3D (#Sound3D [, Flags])": {
      "prefix": "PlaySound3D",
      "body": "PlaySound3D(${1:#Sound3D})$2",
      "description": "Start to play the #Sound3D"
    },
    "Plot (x, y [, Color])": {
      "prefix": "Plot",
      "body": "Plot(${1:x})$2",
      "description": "Draw a plot at the given coordinates in the current output"
    },
    "Point (x, y)": {
      "prefix": "Point",
      "body": "Point(${1:x})$2",
      "description": "Return the color used at the coordinates (x,y) in the current output"
    },
    "PointPick (#Camera, x, y)": {
      "prefix": "PointPick",
      "body": "PointPick(${1:#Camera}, ${2:x})$3",
      "description": "Get the direction of the given point"
    },
    "PokeA (*MemoryBuffer, Ascii.a)": {
      "prefix": "PokeA",
      "body": "PokeA(${1:*MemoryBuffer})$2",
      "description": "Write an ascii character (1 byte) to the specified memory address"
    },
    "PokeB (*MemoryBuffer, Number)": {
      "prefix": "PokeB",
      "body": "PokeB(${1:*MemoryBuffer})$2",
      "description": "Write a byte number to the specified memory address"
    },
    "PokeC (*MemoryBuffer, Character.c)": {
      "prefix": "PokeC",
      "body": "PokeC(${1:*MemoryBuffer})$2",
      "description": "Write a character (1 byte in ascii, 2 bytes in unicode) to the specified memory address"
    },
    "PokeD (*MemoryBuffer, Double.d)": {
      "prefix": "PokeD",
      "body": "PokeD(${1:*MemoryBuffer})$2",
      "description": "Write a double (8 bytes) to the specified memory address"
    },
    "PokeF (*MemoryBuffer, Number.f)": {
      "prefix": "PokeF",
      "body": "PokeF(${1:*MemoryBuffer})$2",
      "description": "Write a float (4 bytes) to the specified memory address"
    },
    "PokeI (*MemoryBuffer, Number)": {
      "prefix": "PokeI",
      "body": "PokeI(${1:*MemoryBuffer})$2",
      "description": "Write an integer (8 bytes) to the specified memory address"
    },
    "PokeL (*MemoryBuffer, Number)": {
      "prefix": "PokeL",
      "body": "PokeL(${1:*MemoryBuffer})$2",
      "description": "Write a long (4 bytes) number to the specified memory address"
    },
    "PokeQ (*MemoryBuffer, Quad.q)": {
      "prefix": "PokeQ",
      "body": "PokeQ(${1:*MemoryBuffer})$2",
      "description": "Write a quad (8 bytes) to the specified memory address"
    },
    "PokeS (*MemoryBuffer, Text$ [, Length [, Flags]])": {
      "prefix": "PokeS",
      "body": "PokeS(${1:*MemoryBuffer})$2",
      "description": "Write a string (including the ending \"0\") to the specified memory address"
    },
    "PokeU (*MemoryBuffer, Unicode.U)": {
      "prefix": "PokeU",
      "body": "PokeU(${1:*MemoryBuffer})$2",
      "description": "Write an unicode character (2 bytes) to the specified memory address"
    },
    "PokeW (*MemoryBuffer, Number)": {
      "prefix": "PokeW",
      "body": "PokeW(${1:*MemoryBuffer})$2",
      "description": "Write a word (2 bytes) number to the specified memory address"
    },
    "PostEvent (Event [, Window, Object [, Type [, Data]]])": {
      "prefix": "PostEvent",
      "body": "PostEvent(${1:Event})$2",
      "description": "Post an event to the event queue"
    },
    "Pow (Number, Exponent)": {
      "prefix": "Pow",
      "body": "Pow(${1:Number})$2",
      "description": "Returns the Number^Power"
    },
    "PreferenceComment (Comment$)": {
      "prefix": "PreferenceComment",
      "body": "PreferenceComment(${1:Comment.s})$2",
      "description": "Add a comment to the current preference file"
    },
    "PreferenceGroup (GroupName$)": {
      "prefix": "PreferenceGroup",
      "body": "PreferenceGroup(${1:GroupName.s})$2",
      "description": "Search or create the group in the preference file"
    },
    "PreferenceGroupName ()": {
      "prefix": "PreferenceGroupName",
      "body": "PreferenceGroupName()$1",
      "description": "Get the name of the currently examined preference group"
    },
    "PreferenceKeyName ()": {
      "prefix": "PreferenceKeyName",
      "body": "PreferenceKeyName()$1",
      "description": "Get the name of the currently examined preference key"
    },
    "PreferenceKeyValue ()": {
      "prefix": "PreferenceKeyValue",
      "body": "PreferenceKeyValue()$1",
      "description": "Get the value of the currently examined preference key as a string"
    },
    "PreviousDatabaseRow (#Database)": {
      "prefix": "PreviousDatabaseRow",
      "body": "PreviousDatabaseRow(${1:#Database})$2",
      "description": "Retrieves information about the previous database row"
    },
    "PreviousXMLNode (Node)": {
      "prefix": "PreviousXMLNode",
      "body": "PreviousXMLNode(${1:Node})$2",
      "description": "Get the previous XML node on the same level as the given node"
    },
    "Print (Text$)": {
      "prefix": "Print",
      "body": "Print(${1:Text.s})$2",
      "description": "Display the Text$ in the console"
    },
    "PrinterOutput ()": {
      "prefix": "PrinterOutput",
      "body": "PrinterOutput()$1",
      "description": "Return the printer drawing area, to be used with the 2DDrawing commands"
    },
    "PrinterPageHeight ()": {
      "prefix": "PrinterPageHeight",
      "body": "PrinterPageHeight()$1",
      "description": "Return the Heigth of the drawing area, in pixel"
    },
    "PrinterPageWidth ()": {
      "prefix": "PrinterPageWidth",
      "body": "PrinterPageWidth()$1",
      "description": "Return the width of the drawing area, in pixel"
    },
    "PrinterVectorOutput ([Unit])": {
      "prefix": "PrinterVectorOutput",
      "body": "PrinterVectorOutput()$1",
      "description": "Return the printer drawing area for vector drawing output"
    },
    "PrintN (Text$)": {
      "prefix": "PrintN",
      "body": "PrintN(${1:Text.s})$2",
      "description": "Display the Text$ in the console and add a line return"
    },
    "PrintRequester ()": {
      "prefix": "PrintRequester",
      "body": "PrintRequester()$1",
      "description": "Open a print requester, necessary to print"
    },
    "ProgramExitCode (Program)": {
      "prefix": "ProgramExitCode",
      "body": "ProgramExitCode(${1:Program})$2",
      "description": "Get the exitcode of the specified program"
    },
    "ProgramFilename ()": {
      "prefix": "ProgramFilename",
      "body": "ProgramFilename()$1",
      "description": "Get the full path and filename of the executable of this program"
    },
    "ProgramID (Program)": {
      "prefix": "ProgramID",
      "body": "ProgramID(${1:Program})$2",
      "description": "Returns the global Process ID for the running program"
    },
    "ProgramParameter ([Index])": {
      "prefix": "ProgramParameter",
      "body": "ProgramParameter()$1",
      "description": "Get the next passed program parameter, or the parameter at Index"
    },
    "ProgramRunning (Program)": {
      "prefix": "ProgramRunning",
      "body": "ProgramRunning(${1:Program})$2",
      "description": "Check if the specified program is still running"
    },
    "ProgressBarGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])": {
      "prefix": "ProgressBarGadget",
      "body": "ProgressBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "description": "Creates a ProgressBar gadget in the current gadgetList"
    },
    "ProgressBarGadget3D (#Gadget3D, x, y, Width, Height, Minimum, Maximum)": {
      "prefix": "ProgressBarGadget3D",
      "body": "ProgressBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "description": "Creates a ProgressBar gadget in the current gadgetList"
    },
    "PurifierGranularity (GlobalGranularity, LocalGranularity, StringGranularity, DynamicGranularity)": {
      "prefix": "PurifierGranularity",
      "body": "PurifierGranularity(${1:GlobalGranularity}, ${2:LocalGranularity}, ${3:StringGranularity})$4",
      "description": "Change the Purifier check granularities"
    },
    "Radian (Angle)": {
      "prefix": "Radian",
      "body": "Radian(${1:Angle})$2",
      "description": "Converts the given angle from degree to radian"
    },
    "RaiseError (ErrorNumber)": {
      "prefix": "RaiseError",
      "body": "RaiseError(${1:ErrorNumber})$2",
      "description": "Raise the given error and call the error handler or exit"
    },
    "Random (Maximum [, Minimum])": {
      "prefix": "Random",
      "body": "Random(${1:Maximum})$2",
      "description": "Return a random number between 0 (unless \"Minimum\" is specified) and the \"Maximum\" value"
    },
    "RandomData (*Buffer, Length)": {
      "prefix": "RandomData",
      "body": "RandomData(${1:*Buffer})$2",
      "description": "Fill the buffer with bytes from the random number generator"
    },
    " [, Start, End])": {
      "prefix": "RandomizeList",
      "body": "RandomizeList(${1:List()})$2",
      "description": "Reorder the items of the specified list in a random order"
    },
    "RandomSeed (Seed)": {
      "prefix": "RandomSeed",
      "body": "RandomSeed(${1:Seed})$2",
      "description": "Reinitialize the random seed, with the specified value"
    },
    "RawKey ()": {
      "prefix": "RawKey",
      "body": "RawKey()$1",
      "description": "Return the last rawkey, after the last Inkey() call"
    },
    "RayCast (x, y, z, DestinationX, DestinationY, DestinationZ, PickMask)": {
      "prefix": "RayCast",
      "body": "RayCast(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY}, ${6:DestinationZ})$7",
      "description": "Returns #True if the ray has crossed an object"
    },
    "RayCollide (x, y, z, DestinationX, DestinationY, DestinationZ [, CollisionGroup, CollisionMask])": {
      "prefix": "RayCollide",
      "body": "RayCollide(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6",
      "description": "Check if the given ray collide with an object"
    },
    "RayPick (x, y, z, DestinationX, DestinationY, DestinationZ [, PickMask])": {
      "prefix": "RayPick",
      "body": "RayPick(${1:x}, ${2:y}, ${3:z}, ${4:DestinationX}, ${5:DestinationY})$6",
      "description": "Returns the first #Entity crossed by the ray"
    },
    "ReadAsciiCharacter (#File)": {
      "prefix": "ReadAsciiCharacter",
      "body": "ReadAsciiCharacter(${1:#File})$2",
      "description": "Read one ascii character from the specified file"
    },
    "ReadByte (#File)": {
      "prefix": "ReadByte",
      "body": "ReadByte(${1:#File})$2",
      "description": "Read one byte from the specified file"
    },
    "ReadCGI ()": {
      "prefix": "ReadCGI",
      "body": "ReadCGI()$1",
      "description": "Read the CGI web content"
    },
    "ReadCharacter (#File [, Format])": {
      "prefix": "ReadCharacter",
      "body": "ReadCharacter(${1:#File})$2",
      "description": "Read a character from the specified file"
    },
    "ReadConsoleData (*Buffer, Size)": {
      "prefix": "ReadConsoleData",
      "body": "ReadConsoleData(${1:*Buffer})$2",
      "description": "Read data from the console input"
    },
    "ReadData (#File, *MemoryBuffer, LengthToRead)": {
      "prefix": "ReadData",
      "body": "ReadData(${1:#File}, ${2:*MemoryBuffer})$3",
      "description": "Read the content from the specified file inside the specified memory buffer"
    },
    "ReadDouble (#File)": {
      "prefix": "ReadDouble",
      "body": "ReadDouble(${1:#File})$2",
      "description": "Read a double (8 bytes) from the specified file"
    },
    "ReadFile (#File, FileName$ [, Flags])": {
      "prefix": "ReadFile",
      "body": "ReadFile(${1:#File})$2",
      "description": "Open an existing file for read only operations"
    },
    "ReadFloat (#File)": {
      "prefix": "ReadFloat",
      "body": "ReadFloat(${1:#File})$2",
      "description": "Read a float (4 bytes) from the specified file"
    },
    "ReadInteger (#File)": {
      "prefix": "ReadInteger",
      "body": "ReadInteger(${1:#File})$2",
      "description": "Read an integer from the specified file"
    },
    "ReadLong (#File)": {
      "prefix": "ReadLong",
      "body": "ReadLong(${1:#File})$2",
      "description": "Read a long (4 bytes) from the specified file"
    },
    "ReadPreferenceDouble (Key$, DefaultValue)": {
      "prefix": "ReadPreferenceDouble",
      "body": "ReadPreferenceDouble(${1:Key.s})$2",
      "description": "Read the double value associated to the keyword"
    },
    "ReadPreferenceFloat (Key$, DefaultValue)": {
      "prefix": "ReadPreferenceFloat",
      "body": "ReadPreferenceFloat(${1:Key.s})$2",
      "description": "Read the value associated to the keyword"
    },
    "ReadPreferenceInteger (Key$, DefaultValue)": {
      "prefix": "ReadPreferenceInteger",
      "body": "ReadPreferenceInteger(${1:Key.s})$2",
      "description": "Read the value associated to the keyword"
    },
    "ReadPreferenceLong (Key$, DefaultValue)": {
      "prefix": "ReadPreferenceLong",
      "body": "ReadPreferenceLong(${1:Key.s})$2",
      "description": "Read the value associated to the keyword"
    },
    "ReadPreferenceQuad (Key$, DefaultValue)": {
      "prefix": "ReadPreferenceQuad",
      "body": "ReadPreferenceQuad(${1:Key.s})$2",
      "description": "Read the quad value associated to the keyword"
    },
    "ReadPreferenceString (Key$, DefaultValue$)": {
      "prefix": "ReadPreferenceString",
      "body": "ReadPreferenceString(${1:Key.s})$2",
      "description": "Read the value associated to the keyword"
    },
    "ReadProgramData (Program, *Buffer, Size)": {
      "prefix": "ReadProgramData",
      "body": "ReadProgramData(${1:Program}, ${2:*Buffer})$3",
      "description": "Read output of the program into a buffer"
    },
    "ReadProgramError (Program [, Format])": {
      "prefix": "ReadProgramError",
      "body": "ReadProgramError(${1:Program})$2",
      "description": "Read a line from the standard error output of the program"
    },
    "ReadProgramString (Program [, Format])": {
      "prefix": "ReadProgramString",
      "body": "ReadProgramString(${1:Program})$2",
      "description": "Read a line from the standard output of the program"
    },
    "ReadQuad (#File)": {
      "prefix": "ReadQuad",
      "body": "ReadQuad(${1:#File})$2",
      "description": "Read a quad (8 bytes) from the specified file"
    },
    "ReadSerialPortData (#SerialPort, *Buffer, Length)": {
      "prefix": "ReadSerialPortData",
      "body": "ReadSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3",
      "description": "Read an arbitrary amount of data from the #SerialPort"
    },
    "ReadString (#File [, Flags [, Length]])": {
      "prefix": "ReadString",
      "body": "ReadString(${1:#File})$2",
      "description": "Read a string from the specified file"
    },
    "ReadStringFormat (#File)": {
      "prefix": "ReadStringFormat",
      "body": "ReadStringFormat(${1:#File})$2",
      "description": "Try to detect the String format in the file from a BOM. (Byte Order Mark)"
    },
    "ReadUnicodeCharacter (#File)": {
      "prefix": "ReadUnicodeCharacter",
      "body": "ReadUnicodeCharacter(${1:#File})$2",
      "description": "Read one unicode character from the specified file"
    },
    "ReadWord (#File)": {
      "prefix": "ReadWord",
      "body": "ReadWord(${1:#File})$2",
      "description": "Read a word (2 bytes) from the specified file"
    },
    "ReAllocateMemory (Memory, Size [, Flags])": {
      "prefix": "ReAllocateMemory",
      "body": "ReAllocateMemory(${1:Memory})$2",
      "description": "ReAllocates a contiguous memory area according to the specified size"
    },
    "ReceiveFTPFile (#Ftp, RemoteFilename$, Filename$ [, Asynchronous])": {
      "prefix": "ReceiveFTPFile",
      "body": "ReceiveFTPFile(${1:#Ftp}, ${2:RemoteFilename.s})$3",
      "description": "Receive a file from a FTP Server"
    },
    "ReceiveHTTPFile (URL$, Filename$ [, Flags])": {
      "prefix": "ReceiveHTTPFile",
      "body": "ReceiveHTTPFile(${1:URL.s})$2",
      "description": "Download a file from an URL"
    },
    "ReceiveHTTPMemory (URL$ [, Flags])": {
      "prefix": "ReceiveHTTPMemory",
      "body": "ReceiveHTTPMemory(${1:URL.s})$2",
      "description": "Download a file from an URL to a memory buffer"
    },
    "ReceiveNetworkData (ClientID, *DataBuffer, DataBufferLength)": {
      "prefix": "ReceiveNetworkData",
      "body": "ReceiveNetworkData(${1:ClientID}, ${2:*DataBuffer})$3",
      "description": "Receive a raw data from the specified client"
    },
    "Red (Color)": {
      "prefix": "Red",
      "body": "Red(${1:Color})$2",
      "description": "Returns the red component of the given color"
    },
    "RefreshDialog (#Dialog)": {
      "prefix": "RefreshDialog",
      "body": "RefreshDialog(${1:#Dialog})$2",
      "description": "Recalculate the dialog dimension and adjust it if necessary"
    },
    "RegularExpressionError ()": {
      "prefix": "RegularExpressionError",
      "body": "RegularExpressionError()$1",
      "description": "Return the last regular expression error"
    },
    "RegularExpressionGroup (#RegularExpression, Group)": {
      "prefix": "RegularExpressionGroup",
      "body": "RegularExpressionGroup(${1:#RegularExpression})$2",
      "description": "Get the content of a matching group"
    },
    "RegularExpressionGroupLength (#RegularExpression, Group)": {
      "prefix": "RegularExpressionGroupLength",
      "body": "RegularExpressionGroupLength(${1:#RegularExpression})$2",
      "description": "Get the length of a matching group"
    },
    "RegularExpressionGroupPosition (#RegularExpression, Group)": {
      "prefix": "RegularExpressionGroupPosition",
      "body": "RegularExpressionGroupPosition(${1:#RegularExpression})$2",
      "description": "Get the position of a matching group within the current match"
    },
    "RegularExpressionMatchLength (#RegularExpression)": {
      "prefix": "RegularExpressionMatchLength",
      "body": "RegularExpressionMatchLength(${1:#RegularExpression})$2",
      "description": "Get the length of the current regular expression match"
    },
    "RegularExpressionMatchPosition (#RegularExpression)": {
      "prefix": "RegularExpressionMatchPosition",
      "body": "RegularExpressionMatchPosition(${1:#RegularExpression})$2",
      "description": "Get the position in the string of the current regular expression match"
    },
    "RegularExpressionMatchString (#RegularExpression)": {
      "prefix": "RegularExpressionMatchString",
      "body": "RegularExpressionMatchString(${1:#RegularExpression})$2",
      "description": "Get the matching string from the current regular expression match"
    },
    "RegularExpressionNamedGroup (#RegularExpression, GroupName$)": {
      "prefix": "RegularExpressionNamedGroup",
      "body": "RegularExpressionNamedGroup(${1:#RegularExpression})$2",
      "description": "Get the content of a matching named group"
    },
    "RegularExpressionNamedGroupLength (#RegularExpression, GroupName$)": {
      "prefix": "RegularExpressionNamedGroupLength",
      "body": "RegularExpressionNamedGroupLength(${1:#RegularExpression})$2",
      "description": "Get the length of a matching named group"
    },
    "RegularExpressionNamedGroupPosition (#RegularExpression, GroupName$)": {
      "prefix": "RegularExpressionNamedGroupPosition",
      "body": "RegularExpressionNamedGroupPosition(${1:#RegularExpression})$2",
      "description": "Get the position of a matching named group within the current match"
    },
    "ReleaseMouse (State)": {
      "prefix": "ReleaseMouse",
      "body": "ReleaseMouse(${1:State})$2",
      "description": "Releases or acquires the exclusive mouse access"
    },
    "ReloadMaterial (MaterialName$, Filename$, ParseScript)": {
      "prefix": "ReloadMaterial",
      "body": "ReloadMaterial(${1:MaterialName.s}, ${2:Filename.s})$3",
      "description": "Reload the specified material"
    },
    "RemoveBillboard (#Billboard, #BillboardGroup)": {
      "prefix": "RemoveBillboard",
      "body": "RemoveBillboard(${1:#Billboard})$2",
      "description": "Remove the specified #Billboard"
    },
    "RemoveEnvironmentVariable (Name$)": {
      "prefix": "RemoveEnvironmentVariable",
      "body": "RemoveEnvironmentVariable(${1:Name.s})$2",
      "description": "Remove the given variable from the environment"
    },
    "RemoveGadgetColumn (#Gadget, Column)": {
      "prefix": "RemoveGadgetColumn",
      "body": "RemoveGadgetColumn(${1:#Gadget})$2",
      "description": "Remove a column to the specified #Gadget"
    },
    "RemoveGadgetItem (#Gadget, Position)": {
      "prefix": "RemoveGadgetItem",
      "body": "RemoveGadgetItem(${1:#Gadget})$2",
      "description": "Remove an item of the specified #Gadget at the given Position"
    },
    "RemoveGadgetItem3D (#Gadget3D, Position)": {
      "prefix": "RemoveGadgetItem3D",
      "body": "RemoveGadgetItem3D(${1:#Gadget3D})$2",
      "description": "Remove an item of the specified #Gadget3D at the given Position"
    },
    "RemoveJSONElement (*JSONValue, Index)": {
      "prefix": "RemoveJSONElement",
      "body": "RemoveJSONElement(${1:*JSONValue})$2",
      "description": "Remove an element from a JSON array"
    },
    "RemoveJSONMember (*JSONValue, Key$)": {
      "prefix": "RemoveJSONMember",
      "body": "RemoveJSONMember(${1:*JSONValue})$2",
      "description": "Remove a member from a JSON object"
    },
    "RemoveKeyboardShortcut (#Window, Key)": {
      "prefix": "RemoveKeyboardShortcut",
      "body": "RemoveKeyboardShortcut(${1:#Window})$2",
      "description": "Remove a keyboard shortcut from the specified #Window"
    },
    "RemoveMailRecipient (#Mail [, Address$ [, Flags]])": {
      "prefix": "RemoveMailRecipient",
      "body": "RemoveMailRecipient(${1:#Mail})$2",
      "description": "Remove a recipient to the specified #Mail"
    },
    "RemoveMaterialLayer (#Material)": {
      "prefix": "RemoveMaterialLayer",
      "body": "RemoveMaterialLayer(${1:#Material})$2",
      "description": "Remove the top most texture layer"
    },
    "RemovePreferenceGroup (GroupName$)": {
      "prefix": "RemovePreferenceGroup",
      "body": "RemovePreferenceGroup(${1:GroupName.s})$2",
      "description": "Remove the group and all keys from the file"
    },
    "RemovePreferenceKey (Name$)": {
      "prefix": "RemovePreferenceKey",
      "body": "RemovePreferenceKey(${1:Name.s})$2",
      "description": "Remove the specified key from the current group"
    },
    "RemoveString (String$, RemoveString$ [, Mode [, StartPosition [, NbOccurences]]])": {
      "prefix": "RemoveString",
      "body": "RemoveString(${1:String.s})$2",
      "description": "Finds occurrences of \"StringToRemove$\" into the given \"String$\" and removes them"
    },
    "RemoveSysTrayIcon (#SysTrayIcon)": {
      "prefix": "RemoveSysTrayIcon",
      "body": "RemoveSysTrayIcon(${1:#SysTrayIcon})$2",
      "description": "Remove the icon from the Systray area"
    },
    "RemoveWindowTimer (#Window, Timer)": {
      "prefix": "RemoveWindowTimer",
      "body": "RemoveWindowTimer(${1:#Window})$2",
      "description": "Remove the timer event from the window"
    },
    "RemoveXMLAttribute (Node, Attribute$)": {
      "prefix": "RemoveXMLAttribute",
      "body": "RemoveXMLAttribute(${1:Node})$2",
      "description": "Remove the attribute entry from the XML node"
    },
    "RenameFile (OldFileName$, NewFileName$)": {
      "prefix": "RenameFile",
      "body": "RenameFile(${1:OldFileName.s})$2",
      "description": "Rename the old file to the new file"
    },
    "RenameFTPFile (#Ftp, Filename$, NewFilename$)": {
      "prefix": "RenameFTPFile",
      "body": "RenameFTPFile(${1:#Ftp}, ${2:Filename.s})$3",
      "description": "Rename or move a file on the FTP server"
    },
    "RenderWorld ([ElapsedPhysicTime])": {
      "prefix": "RenderWorld",
      "body": "RenderWorld()$1",
      "description": "Renders the 3D world on the screen"
    },
    "ReplaceRegularExpression (#RegularExpression, String$, ReplaceString$)": {
      "prefix": "ReplaceRegularExpression",
      "body": "ReplaceRegularExpression(${1:#RegularExpression}, ${2:String.s})$3",
      "description": "Replace some strings according to the regular expression"
    },
    "ReplaceString (String$, StringToFind$, StringToReplace$ [, Mode [, StartPosition [, NbOccurences]]])": {
      "prefix": "ReplaceString",
      "body": "ReplaceString(${1:String.s}, ${2:StringToFind.s})$3",
      "description": "Replaces occurrences of \"StringToFind$\" with \"StringToReplace$\" in the given \"String$\""
    },
    "ResetCoordinates ([System])": {
      "prefix": "ResetCoordinates",
      "body": "ResetCoordinates()$1",
      "description": "Reset the vector drawing coordinate system to the default"
    },
    "ResetGradientColors ()": {
      "prefix": "ResetGradientColors",
      "body": "ResetGradientColors()$1",
      "description": "Clear all colors from the drawing gradient and reset it to BackColor->FrontColor"
    },
    "ResetMaterial (ObjectType)": {
      "prefix": "ResetMaterial",
      "body": "ResetMaterial(${1:ObjectType})$2",
      "description": "Reload the materials for all the specified objects"
    },
    "ResetPath ()": {
      "prefix": "ResetPath",
      "body": "ResetPath()$1",
      "description": "Clear the current vector drawing path"
    },
    "ResetProfiler ()": {
      "prefix": "ResetProfiler",
      "body": "ResetProfiler()$1",
      "description": "Reset the line counts of the profiler"
    },
    "ResizeBillboard (#Billboard, #BillboardGroup, Width, Height)": {
      "prefix": "ResizeBillboard",
      "body": "ResizeBillboard(${1:#Billboard}, ${2:#BillboardGroup}, ${3:Width})$4",
      "description": "Change the #Billboard dimensions"
    },
    "ResizeCamera (#Camera, x, y, Width, Height)": {
      "prefix": "ResizeCamera",
      "body": "ResizeCamera(${1:#Camera}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize the #Camera. All the dimensions are in percents"
    },
    "ResizeGadget (#Gadget, x, y, Width, Height)": {
      "prefix": "ResizeGadget",
      "body": "ResizeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize the specified #Gadget at the given position and dimension"
    },
    "ResizeGadget3D (#Gadget3D, x, y, Width, Height)": {
      "prefix": "ResizeGadget3D",
      "body": "ResizeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize the specified #Gadget3D at the given position and dimension"
    },
    "ResizeImage (#Image, Width, Height [, Mode])": {
      "prefix": "ResizeImage",
      "body": "ResizeImage(${1:#Image}, ${2:Width})$3",
      "description": "Resize the #Image to the given dimension"
    },
    "ResizeJSONElements (*JSONValue, Size)": {
      "prefix": "ResizeJSONElements",
      "body": "ResizeJSONElements(${1:*JSONValue})$2",
      "description": "Resize a JSON array"
    },
    "ResizeMovie (#Movie, x, y, Width, Height)": {
      "prefix": "ResizeMovie",
      "body": "ResizeMovie(${1:#Movie}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize and move the movie display area on the movie window"
    },
    "ResizeParticleEmitter (#ParticleEmitter, x, y, z)": {
      "prefix": "ResizeParticleEmitter",
      "body": "ResizeParticleEmitter(${1:#ParticleEmitter}, ${2:x}, ${3:y})$4",
      "description": "Resize the #ParticleEmitter"
    },
    "ResizeWindow (#Window, x, y, Width, Height)": {
      "prefix": "ResizeWindow",
      "body": "ResizeWindow(${1:#Window}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize the specified window to the given dimensions"
    },
    "ResizeWindow3D (#Window3D, x, y, Width, Height)": {
      "prefix": "ResizeWindow3D",
      "body": "ResizeWindow3D(${1:#Window3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Resize the specified window to the given dimensions"
    },
    "ResolveXMLAttributeName (Node, Attribute$ [, Separator$])": {
      "prefix": "ResolveXMLAttributeName",
      "body": "ResolveXMLAttributeName(${1:Node})$2",
      "description": "Resolves all namespaces for the given node attribute"
    },
    "ResolveXMLNodeName (Node [, Separator$])": {
      "prefix": "ResolveXMLNodeName",
      "body": "ResolveXMLNodeName(${1:Node})$2",
      "description": "Resolves all namespaces for the given node and returns a full node name"
    },
    "RestoreVectorState ()": {
      "prefix": "RestoreVectorState",
      "body": "RestoreVectorState()$1",
      "description": "Restore the vector drawing state to the saved state"
    },
    "ResumeAudioCD ()": {
      "prefix": "ResumeAudioCD",
      "body": "ResumeAudioCD()$1",
      "description": "Resume the AudioCD playback"
    },
    "ResumeMovie (#Movie)": {
      "prefix": "ResumeMovie",
      "body": "ResumeMovie(${1:#Movie})$2",
      "description": "Starts again to play the movie, after a PauseMovie() command"
    },
    "ResumeSound (#Sound [, Channel])": {
      "prefix": "ResumeSound",
      "body": "ResumeSound(${1:#Sound})$2",
      "description": "Resume the play of the specified sound (if it was paused)"
    },
    "ResumeThread (Thread)": {
      "prefix": "ResumeThread",
      "body": "ResumeThread(${1:Thread})$2",
      "description": "Resume the thread execution"
    },
    "ReverseString (String$)": {
      "prefix": "ReverseString",
      "body": "ReverseString(${1:String.s})$2",
      "description": "Reverse all the characters of the string"
    },
    "RGB (Red, Green, Blue)": {
      "prefix": "RGB",
      "body": "RGB(${1:Red}, ${2:Green})$3",
      "description": "Returns the 24 bits color corresponding to the given RGB parameters"
    },
    "RGBA (Red, Green, Blue, Alpha)": {
      "prefix": "RGBA",
      "body": "RGBA(${1:Red}, ${2:Green}, ${3:Blue})$4",
      "description": "Returns the 32 bits color corresponding to the given RGBA parameters"
    },
    "Right (String$, Length)": {
      "prefix": "Right",
      "body": "Right(${1:String.s})$2",
      "description": "Returns the last \"Length\": number of characters from the right side of the string"
    },
    "Roll (ObjectID, Value.f, Mode)": {
      "prefix": "Roll",
      "body": "Roll(${1:ObjectID}, ${2:Value.f})$3",
      "description": "Roll the specified object"
    },
    "RootXMLNode (#XML)": {
      "prefix": "RootXMLNode",
      "body": "RootXMLNode(${1:#XML})$2",
      "description": "Get the root-node of the XML tree"
    },
    "RotateBillboardGroup (#BillboardGroup, x, y, z [, Mode])": {
      "prefix": "RotateBillboardGroup",
      "body": "RotateBillboardGroup(${1:#BillboardGroup}, ${2:x}, ${3:y})$4",
      "description": "Rotate the #BillboardGroup"
    },
    "RotateCamera (#Camera, x, y, z [, Mode])": {
      "prefix": "RotateCamera",
      "body": "RotateCamera(${1:#Camera}, ${2:x}, ${3:y})$4",
      "description": "Rotate the #Camera"
    },
    "RotateCoordinates (x.d, y.d, Angle.d [, System])": {
      "prefix": "RotateCoordinates",
      "body": "RotateCoordinates(${1:x.d}, ${2:y.d})$3",
      "description": "Rotate the vector drawing coordinate system"
    },
    "RotateEntity (#Entity, x, y, z [, Mode])": {
      "prefix": "RotateEntity",
      "body": "RotateEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Rotate the #Entity"
    },
    "RotateEntityBone (#Entity, Bone$, x, y, z , Mode)": {
      "prefix": "RotateEntityBone",
      "body": "RotateEntityBone(${1:#Entity}, ${2:Bone.s}, ${3:x}, ${4:y}, ${5:z})$6",
      "description": "Rotate the #Entity bone"
    },
    "RotateLight (#Light, x, y, z [, Mode])": {
      "prefix": "RotateLight",
      "body": "RotateLight(${1:#Light}, ${2:x}, ${3:y})$4",
      "description": "Rotate the #Light"
    },
    "RotateMaterial (#Material, Angle, Mode [, Layer])": {
      "prefix": "RotateMaterial",
      "body": "RotateMaterial(${1:#Material}, ${2:Angle})$3",
      "description": "Rotate the #Material texture"
    },
    "RotateNode (#Node, x, y, z [, Mode])": {
      "prefix": "RotateNode",
      "body": "RotateNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "description": "Rotate the #Node"
    },
    "RotateSprite (#Sprite, Angle, Mode)": {
      "prefix": "RotateSprite",
      "body": "RotateSprite(${1:#Sprite}, ${2:Angle})$3",
      "description": "Rotate the sprite. Angle varies from 0 to 360"
    },
    "Round (Number, Mode)": {
      "prefix": "Round",
      "body": "Round(${1:Number})$2",
      "description": "Rounds the specified float number according to the given mode"
    },
    "RoundBox (x, y, Width, Height, RoundX, RoundY [, Color])": {
      "prefix": "RoundBox",
      "body": "RoundBox(${1:x}, ${2:y}, ${3:Width}, ${4:Height}, ${5:RoundX})$6",
      "description": "Draw a box with rounded edges on the current output"
    },
    "RSet (String$, Length [, Character])": {
      "prefix": "RSet",
      "body": "RSet(${1:String.s})$2",
      "description": "Pads a string to the right, and adds \"space\" characters to fit the specified length"
    },
    "RTrim (String$ [, Character$])": {
      "prefix": "RTrim",
      "body": "RTrim(${1:String.s})$2",
      "description": "Removes all the \"space\" or given characters located at the end of a string"
    },
    "RunProgram (ProgramName$ [, Parameter$, WorkingDirectory$ [, Flags [, SenderProgram]]])": {
      "prefix": "RunProgram",
      "body": "RunProgram(${1:ProgramName.s})$2",
      "description": "Launch an external program"
    },
    "SaveDebugOutput (Filename$)": {
      "prefix": "SaveDebugOutput",
      "body": "SaveDebugOutput(${1:Filename.s})$2",
      "description": "Save the content of the debug output window to a file"
    },
    "SaveFileRequester (Title$, DefaultFile$, Pattern$, PatternPosition)": {
      "prefix": "SaveFileRequester",
      "body": "SaveFileRequester(${1:Title.s}, ${2:DefaultFile.s}, ${3:Pattern.s})$4",
      "description": "Open the standard requester which allow to save a file"
    },
    "SaveImage (#Image, FileName$ [, Format [, Flags [, Depth]]])": {
      "prefix": "SaveImage",
      "body": "SaveImage(${1:#Image})$2",
      "description": "Save the specified image"
    },
    "SaveJSON (#JSON, FileName$ [, Flags])": {
      "prefix": "SaveJSON",
      "body": "SaveJSON(${1:#JSON})$2",
      "description": "Save JSON data to a file"
    },
    "SaveRenderTexture (#Texture, Filename$)": {
      "prefix": "SaveRenderTexture",
      "body": "SaveRenderTexture(${1:#Texture})$2",
      "description": "Save the specified #Texture"
    },
    "SaveSprite (#Sprite, Filename$ [, Format [, Flags]])": {
      "prefix": "SaveSprite",
      "body": "SaveSprite(${1:#Sprite})$2",
      "description": "Save a #Sprite on file in various image format"
    },
    "SaveTerrain (#Terrain, ModifiedOnly)": {
      "prefix": "SaveTerrain",
      "body": "SaveTerrain(${1:#Terrain})$2",
      "description": "Save the #Terrain on disk"
    },
    "SaveVectorState ()": {
      "prefix": "SaveVectorState",
      "body": "SaveVectorState()$1",
      "description": "Save the current vector drawing state"
    },
    "SaveXML (#XML, FileName$ [, Flags])": {
      "prefix": "SaveXML",
      "body": "SaveXML(${1:#XML})$2",
      "description": "Save a XML tree to a file"
    },
    "ScaleCoordinates (ScaleX.d, ScaleY.d [, System])": {
      "prefix": "ScaleCoordinates",
      "body": "ScaleCoordinates(${1:ScaleX.d})$2",
      "description": "Scale the vector drawing coordinate system"
    },
    "ScaleEntity (#Entity, x, y, z [, Mode])": {
      "prefix": "ScaleEntity",
      "body": "ScaleEntity(${1:#Entity}, ${2:x}, ${3:y})$4",
      "description": "Scale the #Entity"
    },
    "ScaleMaterial (#Material, x, y [, Layer])": {
      "prefix": "ScaleMaterial",
      "body": "ScaleMaterial(${1:#Material}, ${2:x})$3",
      "description": "Scale the #Material texture"
    },
    "ScaleNode (#Node, x, y, z [, Mode])": {
      "prefix": "ScaleNode",
      "body": "ScaleNode(${1:#Node}, ${2:x}, ${3:y})$4",
      "description": "Scale the #Node"
    },
    "ScaleText3D (#Text3D, x, y, z [, Mode])": {
      "prefix": "ScaleText3D",
      "body": "ScaleText3D(${1:#Text3D}, ${2:x}, ${3:y})$4",
      "description": "Scale the #Text3D"
    },
    "ScintillaGadget (#Gadget, x, y, Width, Height, Callback)": {
      "prefix": "ScintillaGadget",
      "body": "ScintillaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Create Scintilla Gadget"
    },
    "ScintillaSendMessage (#Gadget, Message [, Param [, lParam]])": {
      "prefix": "ScintillaSendMessage",
      "body": "ScintillaSendMessage(${1:#Gadget})$2",
      "description": "Scintilla Send Message"
    },
    "ScreenDepth ()": {
      "prefix": "ScreenDepth",
      "body": "ScreenDepth()$1",
      "description": "Get the screen depth"
    },
    "ScreenHeight ()": {
      "prefix": "ScreenHeight",
      "body": "ScreenHeight()$1",
      "description": "Get the screen height"
    },
    "ScreenModeDepth ()": {
      "prefix": "ScreenModeDepth",
      "body": "ScreenModeDepth()$1",
      "description": "Get the screen mode depth"
    },
    "ScreenModeHeight ()": {
      "prefix": "ScreenModeHeight",
      "body": "ScreenModeHeight()$1",
      "description": "Get the screen mode height"
    },
    "ScreenModeRefreshRate ()": {
      "prefix": "ScreenModeRefreshRate",
      "body": "ScreenModeRefreshRate()$1",
      "description": "Get the screen mode refreshrate"
    },
    "ScreenModeWidth ()": {
      "prefix": "ScreenModeWidth",
      "body": "ScreenModeWidth()$1",
      "description": "Get the screen mode width"
    },
    "ScreenOutput ()": {
      "prefix": "ScreenOutput",
      "body": "ScreenOutput()$1",
      "description": "Returns the OutputID of the currently used screen to perform 2D rendering operation on it"
    },
    "ScreenWidth ()": {
      "prefix": "ScreenWidth",
      "body": "ScreenWidth()$1",
      "description": "Get the screen width"
    },
    "ScrollAreaGadget (#Gadget, x, y, Width, Height, ScrollAreaWidth, ScrollAreaHeight [, ScrollStep [, Flags]])": {
      "prefix": "ScrollAreaGadget",
      "body": "ScrollAreaGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth})$7",
      "description": "Create a ScrollArea gadget in the current GadgetList"
    },
    "ScrollAreaGadget3D (#Gadget3D, x, y, Width, Height, ScrollAreaWidth, ScrollAreaHeight, ScrollStep)": {
      "prefix": "ScrollAreaGadget3D",
      "body": "ScrollAreaGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:ScrollAreaWidth}, ${7:ScrollAreaHeight})$8",
      "description": "Create a ScrollArea gadget in the current GadgetList"
    },
    "ScrollBarGadget (#Gadget, x, y, Width, Height, Min, Max, PageLength [, Flags])": {
      "prefix": "ScrollBarGadget",
      "body": "ScrollBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8",
      "description": "Create a ScrollBar gadget in the current GadgetList"
    },
    "ScrollBarGadget3D (#Gadget3D, x, y, Width, Height, Min, Max, PageLength [, Flags])": {
      "prefix": "ScrollBarGadget3D",
      "body": "ScrollBarGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Min}, ${7:Max})$8",
      "description": "Create a ScrollBar gadget in the current GadgetList"
    },
    "ScrollMaterial (#Material, x, y, Mode [, Layer])": {
      "prefix": "ScrollMaterial",
      "body": "ScrollMaterial(${1:#Material}, ${2:x}, ${3:y})$4",
      "description": "Scroll the #Material texture"
    },
    "Second (Date)": {
      "prefix": "Second",
      "body": "Second(${1:Date})$2",
      "description": "Returns the second value of the specified date (between 0 and 59)"
    },
    "SecondWorldCollisionEntity ()": {
      "prefix": "SecondWorldCollisionEntity",
      "body": "SecondWorldCollisionEntity()$1",
      "description": "Second entity of the current collision"
    },
    "SelectedFilePattern ()": {
      "prefix": "SelectedFilePattern",
      "body": "SelectedFilePattern()$1",
      "description": "Returns the selected pattern index chosen with OpenFileRequester() or SaveFileRequester()"
    },
    "SelectedFontColor ()": {
      "prefix": "SelectedFontColor",
      "body": "SelectedFontColor()$1",
      "description": "Returns the RGB color of the font chosen by the user with the FontRequester() command"
    },
    "SelectedFontName ()": {
      "prefix": "SelectedFontName",
      "body": "SelectedFontName()$1",
      "description": "Returns the name of the font chosen by the user with the FontRequester() command"
    },
    "SelectedFontSize ()": {
      "prefix": "SelectedFontSize",
      "body": "SelectedFontSize()$1",
      "description": "Returns the size of the font chosen by the user with the FontRequester() command"
    },
    "SelectedFontStyle ()": {
      "prefix": "SelectedFontStyle",
      "body": "SelectedFontStyle()$1",
      "description": "Returns the style of the font chosen by the user with the FontRequester() command"
    },
    ", Position)": {
      "prefix": "SelectElement",
      "body": "SelectElement(${1:List()})$2",
      "description": "Change the current list element to the element at the specified position"
    },
    "SendFTPFile (#Ftp, Filename$, RemoteFilename$ [, Asynchronous])": {
      "prefix": "SendFTPFile",
      "body": "SendFTPFile(${1:#Ftp}, ${2:Filename.s})$3",
      "description": "Send a file to a FTP Server"
    },
    "SendMail (#Mail, Smtp$ [, Port [, Flags [, User$, Password$]]])": {
      "prefix": "SendMail",
      "body": "SendMail(${1:#Mail})$2",
      "description": "Send the mail"
    },
    "SendNetworkData (ClientID, *MemoryBuffer, Length)": {
      "prefix": "SendNetworkData",
      "body": "SendNetworkData(${1:ClientID}, ${2:*MemoryBuffer})$3",
      "description": "Send raw data to the specified client"
    },
    "SendNetworkString (ClientID, String$ [, Format])": {
      "prefix": "SendNetworkString",
      "body": "SendNetworkString(${1:ClientID})$2",
      "description": "Send a string to the specified client"
    },
    "SerialPortError (#SerialPort)": {
      "prefix": "SerialPortError",
      "body": "SerialPortError(${1:#SerialPort})$2",
      "description": "Return the current error on the #SerialPort, if any"
    },
    "SerialPortID (#SerialPort)": {
      "prefix": "SerialPortID",
      "body": "SerialPortID(${1:#SerialPort})$2",
      "description": "Return the unique ID which identifies the SerialPort in the operating system"
    },
    "SerialPortTimeouts (#SerialPort, RIT, RTTC, RTTM, WTTC, WTTM)": {
      "prefix": "SerialPortTimeouts",
      "body": "SerialPortTimeouts(${1:#SerialPort}, ${2:RIT}, ${3:RTTC}, ${4:RTTM}, ${5:WTTC})$6",
      "description": "Change the default timeouts"
    },
    "ServerID (#Server)": {
      "prefix": "ServerID",
      "body": "ServerID(${1:#Server})$2",
      "description": "Return the server system identifier"
    },
    "SetActiveGadget (#Gadget)": {
      "prefix": "SetActiveGadget",
      "body": "SetActiveGadget(${1:#Gadget})$2",
      "description": "Set the focus on the specified Gadget"
    },
    "SetActiveGadget3D (#Gadget3D)": {
      "prefix": "SetActiveGadget3D",
      "body": "SetActiveGadget3D(${1:#Gadget3D})$2",
      "description": "Set the focus on the specified Gadget"
    },
    "SetActiveWindow (#Window)": {
      "prefix": "SetActiveWindow",
      "body": "SetActiveWindow(${1:#Window})$2",
      "description": "Activate the specified window, this means than focus has been put on this window"
    },
    "SetActiveWindow3D (#Window3D)": {
      "prefix": "SetActiveWindow3D",
      "body": "SetActiveWindow3D(${1:#Window3D})$2",
      "description": "Activate the specified window, this means than focus has been put on this window"
    },
    "SetClipboardImage (#Image)": {
      "prefix": "SetClipboardImage",
      "body": "SetClipboardImage(${1:#Image})$2",
      "description": "Set the specified #Image in the clipboard"
    },
    "SetClipboardText (Text$)": {
      "prefix": "SetClipboardText",
      "body": "SetClipboardText(${1:Text.s})$2",
      "description": "Pastes the specified Text$ into the clipboard"
    },
    "SetCurrentDirectory (Path$)": {
      "prefix": "SetCurrentDirectory",
      "body": "SetCurrentDirectory(${1:Path.s})$2",
      "description": "Change the path of the current directory to the specified one"
    },
    "SetDatabaseBlob (#Database, StatementIndex, *Buffer, BufferLength)": {
      "prefix": "SetDatabaseBlob",
      "body": "SetDatabaseBlob(${1:#Database}, ${2:StatementIndex}, ${3:*Buffer})$4",
      "description": "Set a blob as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseDouble (#Database, StatementIndex, Value.d)": {
      "prefix": "SetDatabaseDouble",
      "body": "SetDatabaseDouble(${1:#Database}, ${2:StatementIndex})$3",
      "description": "Set a double as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseFloat (#Database, StatementIndex, Value.f)": {
      "prefix": "SetDatabaseFloat",
      "body": "SetDatabaseFloat(${1:#Database}, ${2:StatementIndex})$3",
      "description": "Set a float as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseLong (#Database, StatementIndex, Value)": {
      "prefix": "SetDatabaseLong",
      "body": "SetDatabaseLong(${1:#Database}, ${2:StatementIndex})$3",
      "description": "Set a number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseNull (#Database, StatementIndex)": {
      "prefix": "SetDatabaseNull",
      "body": "SetDatabaseNull(${1:#Database})$2",
      "description": "Set a NULL value as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseQuad (#Database, StatementIndex, Value.q)": {
      "prefix": "SetDatabaseQuad",
      "body": "SetDatabaseQuad(${1:#Database}, ${2:StatementIndex})$3",
      "description": "Set a quad number as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetDatabaseString (#Database, StatementIndex, Value$)": {
      "prefix": "SetDatabaseString",
      "body": "SetDatabaseString(${1:#Database}, ${2:StatementIndex})$3",
      "description": "Set a string as a bind variable for the next DatabaseQuery() or DatabaseUpdate()"
    },
    "SetEntityAnimationLength (#Entity, Animation$, Length)": {
      "prefix": "SetEntityAnimationLength",
      "body": "SetEntityAnimationLength(${1:#Entity}, ${2:Animation.s})$3",
      "description": "Set the #Entity animation length"
    },
    "SetEntityAnimationTime (#Entity, Animation$, Time)": {
      "prefix": "SetEntityAnimationTime",
      "body": "SetEntityAnimationTime(${1:#Entity}, ${2:Animation.s})$3",
      "description": "Set the current #Entity animation time"
    },
    "SetEntityAnimationWeight (#Entity, Animation$, Weight)": {
      "prefix": "SetEntityAnimationWeight",
      "body": "SetEntityAnimationWeight(${1:#Entity}, ${2:Animation.s})$3",
      "description": "Set the #Entity animation weight"
    },
    "SetEntityAttribute (#Entity, Attribute, Value)": {
      "prefix": "SetEntityAttribute",
      "body": "SetEntityAttribute(${1:#Entity}, ${2:Attribute})$3",
      "description": "Set an #Entity attribute value"
    },
    "SetEntityCollisionFilter (#Entity, Group, Mask)": {
      "prefix": "SetEntityCollisionFilter",
      "body": "SetEntityCollisionFilter(${1:#Entity}, ${2:Group})$3",
      "description": "Set the entity collision group and mask"
    },
    "SetEntityMaterial (#Entity, MaterialID [, SubEntity])": {
      "prefix": "SetEntityMaterial",
      "body": "SetEntityMaterial(${1:#Entity})$2",
      "description": "Set the #Entity material"
    },
    "SetEnvironmentVariable (Name$, Value$)": {
      "prefix": "SetEnvironmentVariable",
      "body": "SetEnvironmentVariable(${1:Name.s})$2",
      "description": "Assign the given Value$ to the environment variable"
    },
    "SetFileAttributes (FileName$, Attributes)": {
      "prefix": "SetFileAttributes",
      "body": "SetFileAttributes(${1:FileName.s})$2",
      "description": "Changes the attributes of the specified file"
    },
    "SetFileDate (FileName$, Type, Date)": {
      "prefix": "SetFileDate",
      "body": "SetFileDate(${1:FileName.s}, ${2:Type})$3",
      "description": "Changes the modified/created/accessed date of the specified file"
    },
    "SetFrameRate (FrameRate)": {
      "prefix": "SetFrameRate",
      "body": "SetFrameRate(${1:FrameRate})$2",
      "description": "Set the frame rate (in frames per second) for the current screen"
    },
    "SetFTPDirectory (#Ftp, Directory$)": {
      "prefix": "SetFTPDirectory",
      "body": "SetFTPDirectory(${1:#Ftp})$2",
      "description": "Change the current directory"
    },
    "SetGadgetAttribute (#Gadget, Attribute, Value)": {
      "prefix": "SetGadgetAttribute",
      "body": "SetGadgetAttribute(${1:#Gadget}, ${2:Attribute})$3",
      "description": "Change the specified #Gadget attribute"
    },
    "SetGadgetAttribute3D (#Gadget3D, Attribute, Value)": {
      "prefix": "SetGadgetAttribute3D",
      "body": "SetGadgetAttribute3D(${1:#Gadget3D}, ${2:Attribute})$3",
      "description": "Change the specified #Gadget3D attribute"
    },
    "SetGadgetColor (#Gadget, ColorType, Color)": {
      "prefix": "SetGadgetColor",
      "body": "SetGadgetColor(${1:#Gadget}, ${2:ColorType})$3",
      "description": "Change a color in the Gadget"
    },
    "SetGadgetData (#Gadget, Value)": {
      "prefix": "SetGadgetData",
      "body": "SetGadgetData(${1:#Gadget})$2",
      "description": "Stores a value for the Gadget"
    },
    "SetGadgetData3D (#Gadget3D, Value)": {
      "prefix": "SetGadgetData3D",
      "body": "SetGadgetData3D(${1:#Gadget3D})$2",
      "description": "Stores a value for the Gadget"
    },
    "SetGadgetItemAttribute (#Gadget, Item, Attribute, Value [, Column])": {
      "prefix": "SetGadgetItemAttribute",
      "body": "SetGadgetItemAttribute(${1:#Gadget}, ${2:Item}, ${3:Attribute})$4",
      "description": "Change the specified #Gadget item attribute"
    },
    "SetGadgetItemColor (#Gadget, Item, ColorType, Color [, Column])": {
      "prefix": "SetGadgetItemColor",
      "body": "SetGadgetItemColor(${1:#Gadget}, ${2:Item}, ${3:ColorType})$4",
      "description": "Change a color in the Gadget item"
    },
    "SetGadgetItemData (#Gadget, Item, Value)": {
      "prefix": "SetGadgetItemData",
      "body": "SetGadgetItemData(${1:#Gadget}, ${2:Item})$3",
      "description": "Stores a Long value with this Gadget item"
    },
    "SetGadgetItemData3D (#Gadget3D, Item, Value)": {
      "prefix": "SetGadgetItemData3D",
      "body": "SetGadgetItemData3D(${1:#Gadget3D}, ${2:Item})$3",
      "description": "Stores a Long value with this Gadget item"
    },
    "SetGadgetItemImage (#Gadget, Item, ImageID)": {
      "prefix": "SetGadgetItemImage",
      "body": "SetGadgetItemImage(${1:#Gadget}, ${2:Item})$3",
      "description": "Change the image of the specified gadget item"
    },
    "SetGadgetItemState (#Gadget, Position, State)": {
      "prefix": "SetGadgetItemState",
      "body": "SetGadgetItemState(${1:#Gadget}, ${2:Position})$3",
      "description": "Change the #Gadget item state"
    },
    "SetGadgetItemState3D (#Gadget3D, Position, State)": {
      "prefix": "SetGadgetItemState3D",
      "body": "SetGadgetItemState3D(${1:#Gadget3D}, ${2:Position})$3",
      "description": "Change the #Gadget3D item state"
    },
    "SetGadgetItemText (#Gadget, Position, Text$ [, Column])": {
      "prefix": "SetGadgetItemText",
      "body": "SetGadgetItemText(${1:#Gadget}, ${2:Position})$3",
      "description": "Change the #Gadget item text content"
    },
    "SetGadgetItemText3D (#Gadget3D, Position, Text$ [, Column])": {
      "prefix": "SetGadgetItemText3D",
      "body": "SetGadgetItemText3D(${1:#Gadget3D}, ${2:Position})$3",
      "description": "Change the #Gadget3D item text content"
    },
    "SetGadgetState (#Gadget, State)": {
      "prefix": "SetGadgetState",
      "body": "SetGadgetState(${1:#Gadget})$2",
      "description": "Change the #Gadget current state"
    },
    "SetGadgetState3D (#Gadget3D, State)": {
      "prefix": "SetGadgetState3D",
      "body": "SetGadgetState3D(${1:#Gadget3D})$2",
      "description": "Change the #Gadget3D current state"
    },
    "SetGadgetText (#Gadget, Text$)": {
      "prefix": "SetGadgetText",
      "body": "SetGadgetText(${1:#Gadget})$2",
      "description": "Change the gadget text content of the specified #Gadget"
    },
    "SetGadgetText3D (#Gadget3D, Text$)": {
      "prefix": "SetGadgetText3D",
      "body": "SetGadgetText3D(${1:#Gadget3D})$2",
      "description": "Change the gadget text content of the specified #Gadget3D"
    },
    "SetGUITheme3D (ThemeName$, FontName$)": {
      "prefix": "SetGUITheme3D",
      "body": "SetGUITheme3D(${1:ThemeName.s})$2",
      "description": "Sets the 3D GUI theme"
    },
    "SetJSONArray (*JSONValue)": {
      "prefix": "SetJSONArray",
      "body": "SetJSONArray(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain an (empty) array"
    },
    "SetJSONBoolean (*JSONValue, Value)": {
      "prefix": "SetJSONBoolean",
      "body": "SetJSONBoolean(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a boolean"
    },
    "SetJSONDouble (*JSONValue, Value.d)": {
      "prefix": "SetJSONDouble",
      "body": "SetJSONDouble(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a double"
    },
    "SetJSONFloat (*JSONValue, Value.f)": {
      "prefix": "SetJSONFloat",
      "body": "SetJSONFloat(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a float"
    },
    "SetJSONInteger (*JSONValue, Value)": {
      "prefix": "SetJSONInteger",
      "body": "SetJSONInteger(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain an integer"
    },
    "SetJSONNull (*JSONValue)": {
      "prefix": "SetJSONNull",
      "body": "SetJSONNull(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a null"
    },
    "SetJSONObject (*JSONValue)": {
      "prefix": "SetJSONObject",
      "body": "SetJSONObject(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain an (empty) object"
    },
    "SetJSONQuad (*JSONValue, Value.q)": {
      "prefix": "SetJSONQuad",
      "body": "SetJSONQuad(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a quad"
    },
    "SetJSONString (*JSONValue, String$)": {
      "prefix": "SetJSONString",
      "body": "SetJSONString(${1:*JSONValue})$2",
      "description": "Set a JSON value to contain a string"
    },
    "SetLightColor (#Light, Type, Color)": {
      "prefix": "SetLightColor",
      "body": "SetLightColor(${1:#Light}, ${2:Type})$3",
      "description": "Change the #Light color value"
    },
    "SetMailAttribute (#Mail, Attribute, Value$)": {
      "prefix": "SetMailAttribute",
      "body": "SetMailAttribute(${1:#Mail}, ${2:Attribute})$3",
      "description": "Change the specified #Mail attribute"
    },
    "SetMailBody (#Mail, Body$)": {
      "prefix": "SetMailBody",
      "body": "SetMailBody(${1:#Mail})$2",
      "description": "Changes the mail body"
    },
    "SetMaterialAttribute (#Material, Attribute, Value)": {
      "prefix": "SetMaterialAttribute",
      "body": "SetMaterialAttribute(${1:#Material}, ${2:Attribute})$3",
      "description": "Get the specified #Material attribute"
    },
    "SetMaterialColor (#Material, Type, Color)": {
      "prefix": "SetMaterialColor",
      "body": "SetMaterialColor(${1:#Material}, ${2:Type})$3",
      "description": "Change the specified #Material color"
    },
    "SetMenuItemState (#Menu, MenuItem, State)": {
      "prefix": "SetMenuItemState",
      "body": "SetMenuItemState(${1:#Menu}, ${2:MenuItem})$3",
      "description": "Change the specified #Menu item state"
    },
    "SetMenuItemText (#Menu, MenuItem, Text$)": {
      "prefix": "SetMenuItemText",
      "body": "SetMenuItemText(${1:#Menu}, ${2:MenuItem})$3",
      "description": "Change the specified #Menu item text"
    },
    "SetMenuTitleText (#Menu, Index, Text$)": {
      "prefix": "SetMenuTitleText",
      "body": "SetMenuTitleText(${1:#Menu}, ${2:Index})$3",
      "description": "Change the specified #Menu title text"
    },
    "SetMusicPosition (#Music, Position)": {
      "prefix": "SetMusicPosition",
      "body": "SetMusicPosition(${1:#Music})$2",
      "description": "Change the current pattern position of the playing module to the new one"
    },
    "SetNodeAnimationKeyFramePosition (#NodeAnimation, KeyFrame, x, y, z)": {
      "prefix": "SetNodeAnimationKeyFramePosition",
      "body": "SetNodeAnimationKeyFramePosition(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:x}, ${4:y})$5",
      "description": "Set the keyframe position for the #NodeAnimation"
    },
    "SetNodeAnimationKeyFrameRotation (#NodeAnimation, KeyFrame, Pitch, Yaw, Roll)": {
      "prefix": "SetNodeAnimationKeyFrameRotation",
      "body": "SetNodeAnimationKeyFrameRotation(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:Pitch}, ${4:Yaw})$5",
      "description": "Set the keyframe position for the #NodeAnimation"
    },
    "SetNodeAnimationKeyFrameScale (#NodeAnimation, KeyFrame, ScaleX, ScaleY, ScaleZ)": {
      "prefix": "SetNodeAnimationKeyFrameScale",
      "body": "SetNodeAnimationKeyFrameScale(${1:#NodeAnimation}, ${2:KeyFrame}, ${3:ScaleX}, ${4:ScaleY})$5",
      "description": "Set the keyframe scale for the #NodeAnimation"
    },
    "SetNodeAnimationLength (#NodeAnimation, Length)": {
      "prefix": "SetNodeAnimationLength",
      "body": "SetNodeAnimationLength(${1:#NodeAnimation})$2",
      "description": "Set the #NodeAnimation length"
    },
    "SetNodeAnimationTime (#NodeAnimation, Time)": {
      "prefix": "SetNodeAnimationTime",
      "body": "SetNodeAnimationTime(${1:#NodeAnimation})$2",
      "description": "Set the current #NodeAnimation time"
    },
    "SetNodeAnimationWeight (#NodeAnimation, Weight)": {
      "prefix": "SetNodeAnimationWeight",
      "body": "SetNodeAnimationWeight(${1:#NodeAnimation})$2",
      "description": "Set the #NodeAnimation weight"
    },
    "SetOrientation (ObjectID, x, y, z, w)": {
      "prefix": "SetOrientation",
      "body": "SetOrientation(${1:ObjectID}, ${2:x}, ${3:y}, ${4:z})$5",
      "description": "Sets the orientation for the specified object"
    },
    "SetOrigin (x, y)": {
      "prefix": "SetOrigin",
      "body": "SetOrigin(${1:x})$2",
      "description": "Set the coordinate origin for drawing operations"
    },
    "SetRenderQueue (ObjectID, Queue [, Priority])": {
      "prefix": "SetRenderQueue",
      "body": "SetRenderQueue(${1:ObjectID})$2",
      "description": "Change the object order render"
    },
    "SetRuntimeDouble (Name, Value)": {
      "prefix": "SetRuntimeDouble",
      "body": "SetRuntimeDouble(${1:Name})$2",
      "description": "Change the runtime item value"
    },
    "SetRuntimeInteger (Name, Value)": {
      "prefix": "SetRuntimeInteger",
      "body": "SetRuntimeInteger(${1:Name})$2",
      "description": "Change the runtime item value"
    },
    "SetRuntimeString (Name, String$)": {
      "prefix": "SetRuntimeString",
      "body": "SetRuntimeString(${1:Name})$2",
      "description": "Change the runtime item string"
    },
    "SetSerialPortStatus (#SerialPort, Attribute, Value)": {
      "prefix": "SetSerialPortStatus",
      "body": "SetSerialPortStatus(${1:#SerialPort}, ${2:Attribute})$3",
      "description": "Change the #SerialPort status"
    },
    "SetSoundFrequency (#Sound, Frequency [, Channel])": {
      "prefix": "SetSoundFrequency",
      "body": "SetSoundFrequency(${1:#Sound})$2",
      "description": "Set the new frequency for the #Sound. Values are from 1000 to 100000 hz"
    },
    "SetSoundPosition (#Sound, Position [, Mode [, Channel]])": {
      "prefix": "SetSoundPosition",
      "body": "SetSoundPosition(${1:#Sound})$2",
      "description": "Set the current playing position for the #Sound"
    },
    "SetTerrainTileHeightAtPoint (#Terrain, TileX, TileY, x, y, Height)": {
      "prefix": "SetTerrainTileHeightAtPoint",
      "body": "SetTerrainTileHeightAtPoint(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "description": "Set the height of the #Terrain tile at the specified position"
    },
    "SetTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer, x, y, Value)": {
      "prefix": "SetTerrainTileLayerBlend",
      "body": "SetTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x}, ${6:y})$7",
      "description": "Set the #Terrain tile layer blend value"
    },
    "SetToolBarButtonState (#ToolBar, ButtonID, State)": {
      "prefix": "SetToolBarButtonState",
      "body": "SetToolBarButtonState(${1:#ToolBar}, ${2:ButtonID})$3",
      "description": "Change the state of the specified button"
    },
    "SetupTerrains (LightID, CompositeMapDistance, Flags)": {
      "prefix": "SetupTerrains",
      "body": "SetupTerrains(${1:LightID}, ${2:CompositeMapDistance})$3",
      "description": "Setup the default options for all terrains"
    },
    "SetURLPart (URL$, Parameter$, Value$)": {
      "prefix": "SetURLPart",
      "body": "SetURLPart(${1:URL.s}, ${2:Parameter.s})$3",
      "description": "Set the specific part of an URL"
    },
    "SetWindowColor (#Window, Color)": {
      "prefix": "SetWindowColor",
      "body": "SetWindowColor(${1:#Window})$2",
      "description": "Set the background color of the window"
    },
    "SetWindowData (#Window, Value)": {
      "prefix": "SetWindowData",
      "body": "SetWindowData(${1:#Window})$2",
      "description": "Stores a value for the window"
    },
    "SetWindowState (#Window, State)": {
      "prefix": "SetWindowState",
      "body": "SetWindowState(${1:#Window})$2",
      "description": "Set the minimized/maximized state of the window"
    },
    "SetWindowTitle (#Window, Title$)": {
      "prefix": "SetWindowTitle",
      "body": "SetWindowTitle(${1:#Window})$2",
      "description": "Changes the current #Window title"
    },
    "SetWindowTitle3D (#Window3D, Title$)": {
      "prefix": "SetWindowTitle3D",
      "body": "SetWindowTitle3D(${1:#Window3D})$2",
      "description": "Changes the current #Window3D title"
    },
    "SetXMLAttribute (Node, Attribute$, Value$)": {
      "prefix": "SetXMLAttribute",
      "body": "SetXMLAttribute(${1:Node}, ${2:Attribute.s})$3",
      "description": "Set the value of the given attribute of the XML node (creates the attribute if needed)"
    },
    "SetXMLEncoding (#XML, Encoding)": {
      "prefix": "SetXMLEncoding",
      "body": "SetXMLEncoding(${1:#XML})$2",
      "description": "Set the encoding used to export/save the XML tree"
    },
    "SetXMLNodeName (Node, Name$)": {
      "prefix": "SetXMLNodeName",
      "body": "SetXMLNodeName(${1:Node})$2",
      "description": "Set the (tag-)name of the given XML node"
    },
    "SetXMLNodeOffset (Node, Offset)": {
      "prefix": "SetXMLNodeOffset",
      "body": "SetXMLNodeOffset(${1:Node})$2",
      "description": "Set the number of characters of text between this node and the previous one in the tree"
    },
    "SetXMLNodeText (Node, Text$)": {
      "prefix": "SetXMLNodeText",
      "body": "SetXMLNodeText(${1:Node})$2",
      "description": "Set the text content of the given XML node"
    },
    "SetXMLStandalone (#XML, Standalone)": {
      "prefix": "SetXMLStandalone",
      "body": "SetXMLStandalone(${1:#XML})$2",
      "description": "Set the standalone mode of the XML document"
    },
    "ShortcutGadget (#Gadget, x, y, Width, Height, Shortcut)": {
      "prefix": "ShortcutGadget",
      "body": "ShortcutGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Gadget to select a keyboard shortcut in the current GadgetList"
    },
    "ShowAssemblyViewer ()": {
      "prefix": "ShowAssemblyViewer",
      "body": "ShowAssemblyViewer()$1",
      "description": "Show the assembly viewer window"
    },
    "ShowCallstack ()": {
      "prefix": "ShowCallstack",
      "body": "ShowCallstack()$1",
      "description": "Show the callstack window"
    },
    "ShowDebugOutput ()": {
      "prefix": "ShowDebugOutput",
      "body": "ShowDebugOutput()$1",
      "description": "Open the debug output window"
    },
    "ShowGUI (Intensity, ShowMouseCursor [, #Camera, Enable])": {
      "prefix": "ShowGUI",
      "body": "ShowGUI(${1:Intensity})$2",
      "description": "Shows or hides the GUI"
    },
    "ShowLibraryViewer ([Library$ [, Object]])": {
      "prefix": "ShowLibraryViewer",
      "body": "ShowLibraryViewer()$1",
      "description": "Show the library viewer, optionally displaying an object from a library"
    },
    "ShowMemoryViewer ([*Buffer, Length])": {
      "prefix": "ShowMemoryViewer",
      "body": "ShowMemoryViewer()$1",
      "description": "Show the memory viewer, with an optional memory buffer to display"
    },
    "ShowProfiler ()": {
      "prefix": "ShowProfiler",
      "body": "ShowProfiler()$1",
      "description": "Show the profiler window"
    },
    "ShowVariableViewer ()": {
      "prefix": "ShowVariableViewer",
      "body": "ShowVariableViewer()$1",
      "description": "Show the variable viewer window"
    },
    "ShowWatchlist ()": {
      "prefix": "ShowWatchlist",
      "body": "ShowWatchlist()$1",
      "description": "Show the watchlist window"
    },
    "Sign (Number)": {
      "prefix": "Sign",
      "body": "Sign(${1:Number})$2",
      "description": "Returns 1, 0 or -1 depending on the sign of the given number"
    },
    "SignalSemaphore (Semaphore)": {
      "prefix": "SignalSemaphore",
      "body": "SignalSemaphore(${1:Semaphore})$2",
      "description": "Signal the semaphore object once (increment the count by 1)"
    },
    "Sin (Angle)": {
      "prefix": "Sin",
      "body": "Sin(${1:Angle})$2",
      "description": "Returns the sinus of the specified angle, in radian"
    },
    "SinH (Angle)": {
      "prefix": "SinH",
      "body": "SinH(${1:Angle})$2",
      "description": "Returns the hyperbolic sine of the specified angle"
    },
    "SkewCoordinates (AngleX.d, AngleY.d [, System])": {
      "prefix": "SkewCoordinates",
      "body": "SkewCoordinates(${1:AngleX.d})$2",
      "description": "Skew the vector drawing coordinate system"
    },
    "SkyBox (Filename$ [, FogColor, FogIntensity, FogStartDistance, FogEndDistance])": {
      "prefix": "SkyBox",
      "body": "SkyBox(${1:Filename.s})$2",
      "description": "Creates a 6 faces textured cube to simulate a closed world"
    },
    "SkyDome (Filename$, Curve [, FogColor, FogIntensity, FogStartDistance, FogEndDistance])": {
      "prefix": "SkyDome",
      "body": "SkyDome(${1:Filename.s})$2",
      "description": "Creates an artificial sky dome"
    },
    "SmartWindowRefresh (#Window, State)": {
      "prefix": "SmartWindowRefresh",
      "body": "SmartWindowRefresh(${1:#Window})$2",
      "description": "Activate or deactivate the smart window refresh"
    },
    ", Options [, Start, End])": {
      "prefix": "SortList",
      "body": "SortList(${1:List()})$2",
      "description": "Sort the specified list according to the given options and range"
    },
    ", Options, Offset, Type [, Start, End])": {
      "prefix": "SortStructuredList",
      "body": "SortStructuredList(${1:List()}, ${2:Options}, ${3:Offset})$4",
      "description": "Sort the specified list according to the given options and range"
    },
    "SoundCone3D (#Sound3D, InnerCone, OuterCode, OuterGain)": {
      "prefix": "SoundCone3D",
      "body": "SoundCone3D(${1:#Sound3D}, ${2:InnerCone}, ${3:OuterCode})$4",
      "description": "Specify the sound cone"
    },
    "SoundID3D (#Sound3D)": {
      "prefix": "SoundID3D",
      "body": "SoundID3D(${1:#Sound3D})$2",
      "description": "Returns the unique system identifier for the sound"
    },
    "SoundLength (#Sound [, Mode])": {
      "prefix": "SoundLength",
      "body": "SoundLength(${1:#Sound})$2",
      "description": "Returns the length of the #Sound"
    },
    "SoundListenerLocate (x, y, z)": {
      "prefix": "SoundListenerLocate",
      "body": "SoundListenerLocate(${1:x}, ${2:y})$3",
      "description": "Change the sound listener position in the world"
    },
    "SoundPan (#Sound, Pan [, Channel])": {
      "prefix": "SoundPan",
      "body": "SoundPan(${1:#Sound})$2",
      "description": "Set the new pan for the #Sound. Values are from -100 to 100"
    },
    "SoundRange3D (#Sound3D, Minimum, Maximum)": {
      "prefix": "SoundRange3D",
      "body": "SoundRange3D(${1:#Sound3D}, ${2:Minimum})$3",
      "description": "Set the range for the #Sound3D"
    },
    "SoundStatus (#Sound [, Channel])": {
      "prefix": "SoundStatus",
      "body": "SoundStatus(${1:#Sound})$2",
      "description": "Get the specified #Sound status"
    },
    "SoundVolume (#Sound, Volume [, Channel])": {
      "prefix": "SoundVolume",
      "body": "SoundVolume(${1:#Sound})$2",
      "description": "Set the new volume for the #Sound. Values are from 0 to 100"
    },
    "SoundVolume3D (#Sound3D, Volume)": {
      "prefix": "SoundVolume3D",
      "body": "SoundVolume3D(${1:#Sound3D})$2",
      "description": "Set the new volume for the #Sound3D. Values are from 0 to 100"
    },
    "Space (Length)": {
      "prefix": "Space",
      "body": "Space(${1:Length})$2",
      "description": "Create an empty string of the given \"Length\": filled with \"space\" characters"
    },
    "SpinGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])": {
      "prefix": "SpinGadget",
      "body": "SpinGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "description": "Create a Spin gadget in the current GadgetList"
    },
    "SpinGadget3D (#Gadget3D, x, y, Width, Height, Minimum, Maximum)": {
      "prefix": "SpinGadget3D",
      "body": "SpinGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "description": "Create a Spin gadget in the current GadgetList"
    },
    "SplinePointX (#Spline, Index)": {
      "prefix": "SplinePointX",
      "body": "SplinePointX(${1:#Spline})$2",
      "description": "Return the x position of the #Spline point"
    },
    "SplinePointY (#Spline, Index)": {
      "prefix": "SplinePointY",
      "body": "SplinePointY(${1:#Spline})$2",
      "description": "Return the y position of the #Spline point"
    },
    "SplinePointZ (#Spline, Index)": {
      "prefix": "SplinePointZ",
      "body": "SplinePointZ(${1:#Spline})$2",
      "description": "Return the z position of the #Spline point"
    },
    "SplineX (#Spline)": {
      "prefix": "SplineX",
      "body": "SplineX(${1:#Spline})$2",
      "description": "Return the x position of the #Spline"
    },
    "SplineY (#Spline)": {
      "prefix": "SplineY",
      "body": "SplineY(${1:#Spline})$2",
      "description": "Return the y position of the #Spline"
    },
    "SplineZ (#Spline)": {
      "prefix": "SplineZ",
      "body": "SplineZ(${1:#Spline})$2",
      "description": "Return the z position of the #Spline"
    },
    " [, KeepCurrent])": {
      "prefix": "SplitList",
      "body": "SplitList(${1:List()})$2",
      "description": "Split List() into List() and DestinationList()"
    },
    "SplitterGadget (#Gadget, x, y, Width, Height, #Gadget1, #Gadget2 [, Flags])": {
      "prefix": "SplitterGadget",
      "body": "SplitterGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:#Gadget1})$7",
      "description": "Create a Splitter gadget in the current GadgetList"
    },
    "SpriteBlendingMode (SourceOperation, DestinationOperation)": {
      "prefix": "SpriteBlendingMode",
      "body": "SpriteBlendingMode(${1:SourceOperation})$2",
      "description": "Changes the realtime blending mode"
    },
    "SpriteCollision (#Sprite1, x1, y1, #Sprite2, x2, y2)": {
      "prefix": "SpriteCollision",
      "body": "SpriteCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6",
      "description": "Test if the two sprites are overlapped"
    },
    "SpriteDepth (#Sprite)": {
      "prefix": "SpriteDepth",
      "body": "SpriteDepth(${1:#Sprite})$2",
      "description": "Return the depth of the specified sprite"
    },
    "SpriteHeight (#Sprite)": {
      "prefix": "SpriteHeight",
      "body": "SpriteHeight(${1:#Sprite})$2",
      "description": "Return the height in pixel of the specified sprite"
    },
    "SpriteID (#Sprite)": {
      "prefix": "SpriteID",
      "body": "SpriteID(${1:#Sprite})$2",
      "description": "Returns the unique ID which identifies the sprite in the operating system"
    },
    "SpriteOutput (#Sprite)": {
      "prefix": "SpriteOutput",
      "body": "SpriteOutput(${1:#Sprite})$2",
      "description": "Return the output to the sprite, to be used with StartDrawing()"
    },
    "SpritePixelCollision (#Sprite1, x1, y1, #Sprite2, x2, y2)": {
      "prefix": "SpritePixelCollision",
      "body": "SpritePixelCollision(${1:#Sprite1}, ${2:x1}, ${3:y1}, ${4:#Sprite2}, ${5:x2})$6",
      "description": "Test if the two sprites are overlapped"
    },
    "SpriteQuality (Quality)": {
      "prefix": "SpriteQuality",
      "body": "SpriteQuality(${1:Quality})$2",
      "description": "Set the level of rendering. 0=Lowest quality, 1=Bilinear filtering"
    },
    "SpriteWidth (#Sprite)": {
      "prefix": "SpriteWidth",
      "body": "SpriteWidth(${1:#Sprite})$2",
      "description": "Return the width in pixel of the specified sprite"
    },
    "Sqr (Value)": {
      "prefix": "Sqr",
      "body": "Sqr(${1:Value})$2",
      "description": "Returns the square root of the specified number"
    },
    "StartAESCipher (#Cipher, *Key, KeyBits, *InitializationVector, Mode)": {
      "prefix": "StartAESCipher",
      "body": "StartAESCipher(${1:#Cipher}, ${2:*Key}, ${3:KeyBits}, ${4:*InitializationVector})$5",
      "description": "Create a new streaming cipher"
    },
    "StartDrawing (Output)": {
      "prefix": "StartDrawing",
      "body": "StartDrawing(${1:Output})$2",
      "description": "Change the current drawing output to the specified output"
    },
    "StartEntityAnimation (#Entity, Animation$ [, Flags])": {
      "prefix": "StartEntityAnimation",
      "body": "StartEntityAnimation(${1:#Entity})$2",
      "description": "Start the specified #Entity animation"
    },
    "StartFingerprint (#Fingerprint, Plugin [, Bits])": {
      "prefix": "StartFingerprint",
      "body": "StartFingerprint(${1:#Fingerprint})$2",
      "description": "Start a step by step fingerprint calculation"
    },
    "StartNodeAnimation (#NodeAnimation [, Flags])": {
      "prefix": "StartNodeAnimation",
      "body": "StartNodeAnimation(${1:#NodeAnimation})$2",
      "description": "Start the specified #NodeAnimation"
    },
    "StartPrinting (JobName$)": {
      "prefix": "StartPrinting",
      "body": "StartPrinting(${1:JobName.s})$2",
      "description": "Initialize the printer and start a new print job"
    },
    "StartProfiler ()": {
      "prefix": "StartProfiler",
      "body": "StartProfiler()$1",
      "description": "Start the profiler"
    },
    "StartVectorDrawing (Output)": {
      "prefix": "StartVectorDrawing",
      "body": "StartVectorDrawing(${1:Output})$2",
      "description": "Start vector drawing on the specified output"
    },
    "StatusBarHeight (#StatusBar)": {
      "prefix": "StatusBarHeight",
      "body": "StatusBarHeight(${1:#StatusBar})$2",
      "description": "Returns the height of the statusbar"
    },
    "StatusBarID (#StatusBar)": {
      "prefix": "StatusBarID",
      "body": "StatusBarID(${1:#StatusBar})$2",
      "description": "Returns the unique ID which identifies the statusbar in the operating system"
    },
    "StatusBarImage (#StatusBar, Field, ImageID [, Appearance])": {
      "prefix": "StatusBarImage",
      "body": "StatusBarImage(${1:#StatusBar}, ${2:Field})$3",
      "description": "Set an image to display in the specified statusbar field"
    },
    "StatusBarProgress (#StatusBar, Field, Value [, Appearance [, Min, Max]])": {
      "prefix": "StatusBarProgress",
      "body": "StatusBarProgress(${1:#StatusBar}, ${2:Field})$3",
      "description": "Set the specified \"Field\" to display a progressbar"
    },
    "StatusBarText (#StatusBar, Field, Text$ [, Appearance])": {
      "prefix": "StatusBarText",
      "body": "StatusBarText(${1:#StatusBar}, ${2:Field})$3",
      "description": "Change the text of the specified \"Field\" in the given "
    },
    "StickyWindow (#Window, State)": {
      "prefix": "StickyWindow",
      "body": "StickyWindow(${1:#Window})$2",
      "description": "Make the window stay in front of all other windows"
    },
    "StopAudioCD ()": {
      "prefix": "StopAudioCD",
      "body": "StopAudioCD()$1",
      "description": "Stop the current CD-Audio playback"
    },
    "StopDrawing ()": {
      "prefix": "StopDrawing",
      "body": "StopDrawing()$1",
      "description": "Must be called after a StartDrawing(), when all graphics operations are finished"
    },
    "StopEntityAnimation (#Entity, Animation$)": {
      "prefix": "StopEntityAnimation",
      "body": "StopEntityAnimation(${1:#Entity})$2",
      "description": "Stop the specified #Entity animation"
    },
    "StopMovie (#Movie)": {
      "prefix": "StopMovie",
      "body": "StopMovie(${1:#Movie})$2",
      "description": "Stop to play the movie"
    },
    "StopMusic (#Music)": {
      "prefix": "StopMusic",
      "body": "StopMusic(${1:#Music})$2",
      "description": "Stop the current module (if it was playing)"
    },
    "StopNodeAnimation (#NodeAnimation)": {
      "prefix": "StopNodeAnimation",
      "body": "StopNodeAnimation(${1:#NodeAnimation})$2",
      "description": "Stop the specified #NodeAnimation"
    },
    "StopPrinting ()": {
      "prefix": "StopPrinting",
      "body": "StopPrinting()$1",
      "description": "Finish the print session and send all the data to the printer"
    },
    "StopProfiler ()": {
      "prefix": "StopProfiler",
      "body": "StopProfiler()$1",
      "description": "Stop the profiler"
    },
    "StopSound (#Sound [, Channel])": {
      "prefix": "StopSound",
      "body": "StopSound(${1:#Sound})$2",
      "description": "Stop the specified sound (if it was playing)"
    },
    "StopSound3D (#Sound3D)": {
      "prefix": "StopSound3D",
      "body": "StopSound3D(${1:#Sound3D})$2",
      "description": "Stop the specified sound (if it was playing)"
    },
    "StopVectorDrawing ()": {
      "prefix": "StopVectorDrawing",
      "body": "StopVectorDrawing()$1",
      "description": "Stop vector drawing on the current output"
    },
    "Str (Value)": {
      "prefix": "Str",
      "body": "Str(${1:Value})$2",
      "description": "Convert a signed integer number into a string"
    },
    "StrD (Value [, NbDecimals])": {
      "prefix": "StrD",
      "body": "StrD(${1:Value})$2",
      "description": "Convert a double number into a string"
    },
    "StrF (Value [, NbDecimals])": {
      "prefix": "StrF",
      "body": "StrF(${1:Value})$2",
      "description": "Convert a float number into a string"
    },
    "StringByteLength (String$ [, Format])": {
      "prefix": "StringByteLength",
      "body": "StringByteLength(${1:String.s})$2",
      "description": "Get the length in bytes needed to store the string in the given format"
    },
    "StringField (String$, Index, Separator$)": {
      "prefix": "StringField",
      "body": "StringField(${1:String.s}, ${2:Index})$3",
      "description": "Returns the string field at the specified index"
    },
    "StringFingerprint (String, Plugin [, Bits [, Format]])": {
      "prefix": "StringFingerprint",
      "body": "StringFingerprint(${1:String})$2",
      "description": "Returns the fingerprint of the specified string"
    },
    "StringGadget (#Gadget, x, y, Width, Height, Content$ [, Flags])": {
      "prefix": "StringGadget",
      "body": "StringGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a String gadget in the current GadgetList"
    },
    "StringGadget3D (#Gadget3D, x, y, Width, Height, Content$ [, Flags])": {
      "prefix": "StringGadget3D",
      "body": "StringGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a String gadget in the current GadgetList"
    },
    "StrokePath (Width.d [, Flags])": {
      "prefix": "StrokePath",
      "body": "StrokePath(${1:Width.d})$2",
      "description": "Draw a line along the vector drawing path"
    },
    "StrU (Value [, Type])": {
      "prefix": "StrU",
      "body": "StrU(${1:Value})$2",
      "description": "Convert a value into unsigned form"
    },
    "Sun (x, y, z, Color)": {
      "prefix": "Sun",
      "body": "Sun(${1:x}, ${2:y}, ${3:z})$4",
      "description": "Changes the sun attributes"
    },
    ", *FirstElement, *SecondElement)": {
      "prefix": "SwapElements",
      "body": "SwapElements(${1:List()}, ${2:*FirstElement})$3",
      "description": "Swap the position of the specified elements"
    },
    "SwitchCamera (#Camera, #NewCamera)": {
      "prefix": "SwitchCamera",
      "body": "SwitchCamera(${1:#Camera})$2",
      "description": "Change the active #Camera with the #NewCamera"
    },
    "SysTrayIconToolTip (#SysTrayIcon, Text$)": {
      "prefix": "SysTrayIconToolTip",
      "body": "SysTrayIconToolTip(${1:#SysTrayIcon})$2",
      "description": "Associate a tooltip text to the specified icon"
    },
    "Tan (Angle)": {
      "prefix": "Tan",
      "body": "Tan(${1:Angle})$2",
      "description": "Returns the tangent of the specified angle, in radian"
    },
    "Bool (Expression)": {
      "prefix": "Bool",
      "body": "Bool(${1:Expression})$2",
      "description": "Test the expression and return #True or #False"
    },
    "ClearStructure (*Address, Structure)": {
      "prefix": "ClearStructure",
      "body": "ClearStructure(${1:*Address})$2",
      "description": "Clear the structure at the given *Address"
    },
    "CopyStructure (*Source, *Destination, Structure)": {
      "prefix": "CopyStructure",
      "body": "CopyStructure(${1:*Source}, ${2:*Destination})$3",
      "description": "Copy the structure at the given *Address"
    },
    "Defined (Name, Type)": {
      "prefix": "Defined",
      "body": "Defined(${1:Name})$2",
      "description": "Returns 1 if the object is defined, or 0 if not"
    },
    "OffsetOf (StructureField)": {
      "prefix": "OffsetOf",
      "body": "OffsetOf(${1:StructureField})$2",
      "description": "Returns the offset of the specified structure field"
    },
    "SizeOf (Structure)": {
      "prefix": "SizeOf",
      "body": "SizeOf(${1:Structure})$2",
      "description": "Returns the size of the given structure"
    },
    "TanH (Angle)": {
      "prefix": "TanH",
      "body": "TanH(${1:Angle})$2",
      "description": "Returns the hyperbolic tangent of the specified angle"
    },
    "TerrainHeight (#Terrain, x, z)": {
      "prefix": "TerrainHeight",
      "body": "TerrainHeight(${1:#Terrain}, ${2:x})$3",
      "description": "Return the height of the #Terrain at the specified coordinates"
    },
    "TerrainLocate (#Terrain, x, y, z)": {
      "prefix": "TerrainLocate",
      "body": "TerrainLocate(${1:#Terrain}, ${2:x}, ${3:y})$4",
      "description": "Change the #Terrain location"
    },
    "TerrainMousePick (#Terrain, CameraID, x, y)": {
      "prefix": "TerrainMousePick",
      "body": "TerrainMousePick(${1:#Terrain}, ${2:CameraID}, ${3:x})$4",
      "description": "Perform a mouse picking on the #Terrain"
    },
    "TerrainRenderMode (#Terrain, Flags)": {
      "prefix": "TerrainRenderMode",
      "body": "TerrainRenderMode(${1:#Terrain})$2",
      "description": "Change the #Terrain render mode"
    },
    "TerrainTileHeightAtPosition (#Terrain, TileX, TileY, Layer, x, y)": {
      "prefix": "TerrainTileHeightAtPosition",
      "body": "TerrainTileHeightAtPosition(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:Layer}, ${5:x})$6",
      "description": "Return the height of the #Terrain tile"
    },
    "TerrainTileLayerMapSize (#Terrain, TileX, TileY)": {
      "prefix": "TerrainTileLayerMapSize",
      "body": "TerrainTileLayerMapSize(${1:#Terrain}, ${2:TileX})$3",
      "description": "Return the #Terrain tile layer map size"
    },
    "TerrainTilePointX (#Terrain, TileX, TileY, x, y, z)": {
      "prefix": "TerrainTilePointX",
      "body": "TerrainTilePointX(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "description": "Return the x position in the #Terrain tile of the point"
    },
    "TerrainTilePointY (#Terrain, TileX, TileY, x, y, z)": {
      "prefix": "TerrainTilePointY",
      "body": "TerrainTilePointY(${1:#Terrain}, ${2:TileX}, ${3:TileY}, ${4:x}, ${5:y})$6",
      "description": "Return the y position in the #Terrain tile of the point"
    },
    "TerrainTileSize (#Terrain, TileX, TileY)": {
      "prefix": "TerrainTileSize",
      "body": "TerrainTileSize(${1:#Terrain}, ${2:TileX})$3",
      "description": "Return the size of the #Terrain tile"
    },
    "Text3DID (#Text3D)": {
      "prefix": "Text3DID",
      "body": "Text3DID(${1:#Text3D})$2",
      "description": "Return the unique #Text3D ID"
    },
    "Text3DX (#Text3D)": {
      "prefix": "Text3DX",
      "body": "Text3DX(${1:#Text3D})$2",
      "description": "Return the x position of the #Text3D"
    },
    "Text3DY (#Text3D)": {
      "prefix": "Text3DY",
      "body": "Text3DY(${1:#Text3D})$2",
      "description": "Return the y position of the #Text3D"
    },
    "Text3DZ (#Text3D)": {
      "prefix": "Text3DZ",
      "body": "Text3DZ(${1:#Text3D})$2",
      "description": "Return the z position of the #Text3D"
    },
    "TextGadget (#Gadget, x, y, Width, Height, Text$ [, Flags])": {
      "prefix": "TextGadget",
      "body": "TextGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Text gadget in the current GadgetList"
    },
    "TextGadget3D (#Gadget3D, x, y, Width, Height, Text$)": {
      "prefix": "TextGadget3D",
      "body": "TextGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height})$6",
      "description": "Creates a Text gadget in the current GadgetList"
    },
    "TextHeight (Text$)": {
      "prefix": "TextHeight",
      "body": "TextHeight(${1:Text.s})$2",
      "description": "Return the height (in pixel) of the given string in the current output using the current font"
    },
    "TextureHeight (#Texture)": {
      "prefix": "TextureHeight",
      "body": "TextureHeight(${1:#Texture})$2",
      "description": "Returns the height in pixel of the #Texture"
    },
    "TextureID (#Texture)": {
      "prefix": "TextureID",
      "body": "TextureID(${1:#Texture})$2",
      "description": "Returns the #Texture unique ID"
    },
    "TextureOutput (#Texture)": {
      "prefix": "TextureOutput",
      "body": "TextureOutput(${1:#Texture})$2",
      "description": "Returns the OutputID of the #Texture to perform 2D rendering operation on it"
    },
    "TextureWidth (#Texture)": {
      "prefix": "TextureWidth",
      "body": "TextureWidth(${1:#Texture})$2",
      "description": "Returns the width in pixel of the #Texture"
    },
    "TextWidth (Text$)": {
      "prefix": "TextWidth",
      "body": "TextWidth(${1:Text.s})$2",
      "description": "Return the length (in pixel) of the given string in the current output using the current font"
    },
    "ThreadID (Thread)": {
      "prefix": "ThreadID",
      "body": "ThreadID(${1:Thread})$2",
      "description": "Get the OS handle for the thread"
    },
    "ThreadPriority (Thread, Priority)": {
      "prefix": "ThreadPriority",
      "body": "ThreadPriority(${1:Thread})$2",
      "description": "Change the thread priority and returns the old priority"
    },
    "ToolBarHeight (#ToolBar)": {
      "prefix": "ToolBarHeight",
      "body": "ToolBarHeight(${1:#ToolBar})$2",
      "description": "Returns the height of the specified #ToolBar"
    },
    "ToolBarID (#ToolBar)": {
      "prefix": "ToolBarID",
      "body": "ToolBarID(${1:#ToolBar})$2",
      "description": "Returns the unique ID which identifies the toolbar in the operating system"
    },
    "ToolBarImageButton (#ButtonID, ImageID [, Mode])": {
      "prefix": "ToolBarImageButton",
      "body": "ToolBarImageButton(${1:#ButtonID})$2",
      "description": "Add an image button to the toolbar being constructed"
    },
    "ToolBarSeparator ()": {
      "prefix": "ToolBarSeparator",
      "body": "ToolBarSeparator()$1",
      "description": "Add a vertical separator to toolbar being constructed"
    },
    "ToolBarStandardButton (#ButtonID, #ButtonIcon [, Mode])": {
      "prefix": "ToolBarStandardButton",
      "body": "ToolBarStandardButton(${1:#ButtonID})$2",
      "description": "Add a standard button to the toolbar being constructed"
    },
    "ToolBarToolTip (#ToolBar, ButtonID, Text$)": {
      "prefix": "ToolBarToolTip",
      "body": "ToolBarToolTip(${1:#ToolBar}, ${2:ButtonID})$3",
      "description": "Associates the specified Text$ to the current ToolBar #ButtonID"
    },
    "TrackBarGadget (#Gadget, x, y, Width, Height, Minimum, Maximum [, Flags])": {
      "prefix": "TrackBarGadget",
      "body": "TrackBarGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:Minimum})$7",
      "description": "Create a TrackBar gadget in the current GadgetList"
    },
    "TransformSprite (#Sprite, x1, y1 [, z1], x2, y2 [, z2], x3, y3 [, z3], x4, y4 [, z4])": {
      "prefix": "TransformSprite",
      "body": "TransformSprite(${1:#Sprite}, ${2:x1})$3",
      "description": "Transform the sprite to the new given dimensions"
    },
    "TranslateCoordinates (x.d, y.d [, System])": {
      "prefix": "TranslateCoordinates",
      "body": "TranslateCoordinates(${1:x.d})$2",
      "description": "Move the origin of the vector drawing coordinate system"
    },
    "TransparentSpriteColor (#Sprite, Color)": {
      "prefix": "TransparentSpriteColor",
      "body": "TransparentSpriteColor(${1:#Sprite})$2",
      "description": "Change the sprite transparent color (when displayed with DisplayTransparentSprite)"
    },
    "TreeGadget (#Gadget, x, y, Width, Height [, Flags])": {
      "prefix": "TreeGadget",
      "body": "TreeGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a Tree gadget in the current GadgetList"
    },
    "TreeGadget3D (#Gadget3D, x, y, Width, Height [, Flags])": {
      "prefix": "TreeGadget3D",
      "body": "TreeGadget3D(${1:#Gadget3D}, ${2:x}, ${3:y}, ${4:Width})$5",
      "description": "Create a Tree gadget in the current GadgetList"
    },
    "Trim (String$ [, Character$])": {
      "prefix": "Trim",
      "body": "Trim(${1:String.s})$2",
      "description": "Removes all the \"space\" or given characters located at the beginning and at the end of a string"
    },
    "TruncateFile (#File)": {
      "prefix": "TruncateFile",
      "body": "TruncateFile(${1:#File})$2",
      "description": "End the file at the current position and cut all following data"
    },
    "TryLockMutex (Mutex)": {
      "prefix": "TryLockMutex",
      "body": "TryLockMutex(${1:Mutex})$2",
      "description": "Try to get ownership of the mutex object. Returns 0 if unsuccessful"
    },
    "TrySemaphore (Semaphore)": {
      "prefix": "TrySemaphore",
      "body": "TrySemaphore(${1:Semaphore})$2",
      "description": "Decrement the semaphore count only if it is above 0, else return 0"
    },
    "TypeOf (Object)": {
      "prefix": "TypeOf",
      "body": "TypeOf(${1:Object})$2",
      "description": "Returns the type of the given object"
    },
    "Subsystem (Name)": {
      "prefix": "Subsystem",
      "body": "Subsystem(${1:Name})$2",
      "description": "Check if a subsystem is in use"
    },
    "InitializeStructure (*Address, Structure)": {
      "prefix": "InitializeStructure",
      "body": "InitializeStructure(${1:*Address})$2",
      "description": "Initialize the structure at the given *Address"
    },
    "UCase (String$)": {
      "prefix": "UCase",
      "body": "UCase(${1:String.s})$2",
      "description": "Returns the original string converted into upper case characters"
    },
    "UnclipOutput ()": {
      "prefix": "UnclipOutput",
      "body": "UnclipOutput()$1",
      "description": "Remove any clipping from the drawing output"
    },
    "UncompressMemory (*Buffer, Size, *Output, OutputSize [, PluginID])": {
      "prefix": "UncompressMemory",
      "body": "UncompressMemory(${1:*Buffer}, ${2:Size}, ${3:*Output})$4",
      "description": "Uncompress the content of the *Buffer into *Output"
    },
    "UncompressPackFile (#Pack, Filename$ [, PackedFilename$])": {
      "prefix": "UncompressPackFile",
      "body": "UncompressPackFile(${1:#Pack})$2",
      "description": "Uncompress the current or the specified filename in the archive to the specified file"
    },
    "UncompressPackMemory (#Pack, *Buffer, Size [, PackedFilename$])": {
      "prefix": "UncompressPackMemory",
      "body": "UncompressPackMemory(${1:#Pack}, ${2:*Buffer})$3",
      "description": "Uncompress the current or the specified filename in the archive to memory"
    },
    "UnescapeString (String [, Flags])": {
      "prefix": "UnescapeString",
      "body": "UnescapeString(${1:String})$2",
      "description": "Returns the unescaped string"
    },
    "UnlockMutex (Mutex)": {
      "prefix": "UnlockMutex",
      "body": "UnlockMutex(${1:Mutex})$2",
      "description": "Release ownership of the mutex object"
    },
    "UpdateEntityAnimation (#Entity, Animation$)": {
      "prefix": "UpdateEntityAnimation",
      "body": "UpdateEntityAnimation(${1:#Entity})$2",
      "description": "Update the specified #Entity animation"
    },
    "UpdateRenderTexture (#Texture)": {
      "prefix": "UpdateRenderTexture",
      "body": "UpdateRenderTexture(${1:#Texture})$2",
      "description": "Update the #Texture content with the camera view"
    },
    "UpdateSplinePoint (#Spline, Index, x, y, z)": {
      "prefix": "UpdateSplinePoint",
      "body": "UpdateSplinePoint(${1:#Spline}, ${2:Index}, ${3:x}, ${4:y})$5",
      "description": "Update the specified #Spline point"
    },
    "UpdateTerrain (#Terrain)": {
      "prefix": "UpdateTerrain",
      "body": "UpdateTerrain(${1:#Terrain})$2",
      "description": "Update the whole #Terrain"
    },
    "UpdateTerrainTileLayerBlend (#Terrain, TileX, TileY, Layer)": {
      "prefix": "UpdateTerrainTileLayerBlend",
      "body": "UpdateTerrainTileLayerBlend(${1:#Terrain}, ${2:TileX}, ${3:TileY})$4",
      "description": "Update the #Terrain tile blend value"
    },
    "UpdateVertexPoseReference (#Mesh, Animation$, Track, Index, PoseIndex, Influence)": {
      "prefix": "UpdateVertexPoseReference",
      "body": "UpdateVertexPoseReference(${1:#Mesh}, ${2:Animation.s}, ${3:Track}, ${4:Index}, ${5:PoseIndex})$6",
      "description": "Update a new vertex pose reference to the #Mesh track"
    },
    "URLDecoder (URL$ [, Format])": {
      "prefix": "URLDecoder",
      "body": "URLDecoder(${1:URL.s})$2",
      "description": "Returns the decoded URL$"
    },
    "URLEncoder (URL$ [, Format])": {
      "prefix": "URLEncoder",
      "body": "URLEncoder(${1:URL.s})$2",
      "description": "Returns the URL$ encoded to HTTP format"
    },
    "UseAudioCD (AudioCDDrive)": {
      "prefix": "UseAudioCD",
      "body": "UseAudioCD(${1:AudioCDDrive})$2",
      "description": "Change the current AudioCD drive"
    },
    "UseBriefLZPacker ()": {
      "prefix": "UseBriefLZPacker",
      "body": "UseBriefLZPacker()$1",
      "description": "Add BriefLZ support to the packer commandset"
    },
    "UseCRC32Fingerprint ()": {
      "prefix": "UseCRC32Fingerprint",
      "body": "UseCRC32Fingerprint()$1",
      "description": "Add CRC32 fingerprint support to the cipher commandset"
    },
    "UseFLACSoundDecoder ()": {
      "prefix": "UseFLACSoundDecoder",
      "body": "UseFLACSoundDecoder()$1",
      "description": "Enables the FLAC support for CatchSound(), LoadSound()"
    },
    "UseGadgetList (WindowID)": {
      "prefix": "UseGadgetList",
      "body": "UseGadgetList(${1:WindowID})$2",
      "description": "Make the specified WindowID the current gadget list to add gadgets on it"
    },
    "UseJCALG1Packer ()": {
      "prefix": "UseJCALG1Packer",
      "body": "UseJCALG1Packer()$1",
      "description": "Add JCALG1 decompression support to the packer commandset"
    },
    "UseLZMAPacker ()": {
      "prefix": "UseLZMAPacker",
      "body": "UseLZMAPacker()$1",
      "description": "Add LZMA support to the packer commandset"
    },
    "UseMD5Fingerprint ()": {
      "prefix": "UseMD5Fingerprint",
      "body": "UseMD5Fingerprint()$1",
      "description": "Add SHA1 fingerprint support to the cipher commandset"
    },
    "UseODBCDatabase ()": {
      "prefix": "UseODBCDatabase",
      "body": "UseODBCDatabase()$1",
      "description": "Add ODBC support to the database commandset"
    },
    "UseOGGSoundDecoder ()": {
      "prefix": "UseOGGSoundDecoder",
      "body": "UseOGGSoundDecoder()$1",
      "description": "Enables the OGG support for CatchSound(), LoadSound()"
    },
    "UsePostgreSQLDatabase ()": {
      "prefix": "UsePostgreSQLDatabase",
      "body": "UsePostgreSQLDatabase()$1",
      "description": "Add PostgreSQL support to the database commandset"
    },
    "UserName ()": {
      "prefix": "UserName",
      "body": "UserName()$1",
      "description": "Returns the name of the currently logged in user"
    },
    "UseSHA1Fingerprint ()": {
      "prefix": "UseSHA1Fingerprint",
      "body": "UseSHA1Fingerprint()$1",
      "description": "Add SHA-1 fingerprint support to the cipher commandset"
    },
    "UseSHA2Fingerprint ()": {
      "prefix": "UseSHA2Fingerprint",
      "body": "UseSHA2Fingerprint()$1",
      "description": "Add SHA-2 fingerprint support to the cipher commandset"
    },
    "UseSHA3Fingerprint ()": {
      "prefix": "UseSHA3Fingerprint",
      "body": "UseSHA3Fingerprint()$1",
      "description": "Add SHA-3 fingerprint support to the cipher commandset"
    },
    "UseSQLiteDatabase ()": {
      "prefix": "UseSQLiteDatabase",
      "body": "UseSQLiteDatabase()$1",
      "description": "Add SQLite support to the database commandset"
    },
    "UseTARPacker ()": {
      "prefix": "UseTARPacker",
      "body": "UseTARPacker()$1",
      "description": "Add TAR support to the packer commandset"
    },
    "UseZipPacker ()": {
      "prefix": "UseZipPacker",
      "body": "UseZipPacker()$1",
      "description": "Add ZIP support to the packer commandset"
    },
    "Val (String$)": {
      "prefix": "Val",
      "body": "Val(${1:String.s})$2",
      "description": "Transform a string into a numeric value"
    },
    "ValD (String$)": {
      "prefix": "ValD",
      "body": "ValD(${1:String.s})$2",
      "description": "Convert a String into a double number"
    },
    "ValF (String$)": {
      "prefix": "ValF",
      "body": "ValF(${1:String.s})$2",
      "description": "Convert a String into a float number"
    },
    "VectorFont (FontID [, Size.d])": {
      "prefix": "VectorFont",
      "body": "VectorFont(${1:FontID})$2",
      "description": "Set the font to use for vector drawing"
    },
    "VectorOutputHeight ()": {
      "prefix": "VectorOutputHeight",
      "body": "VectorOutputHeight()$1",
      "description": "Returns the height of the current vector output"
    },
    "VectorOutputWidth ()": {
      "prefix": "VectorOutputWidth",
      "body": "VectorOutputWidth()$1",
      "description": "Returns the width of the current vector output"
    },
    "VectorParagraphHeight (Text$, Width.d, Height.d)": {
      "prefix": "VectorParagraphHeight",
      "body": "VectorParagraphHeight(${1:Text.s}, ${2:Width.d})$3",
      "description": "Calculate the height of a text paragraph for vector drawing"
    },
    "VectorResolutionX ()": {
      "prefix": "VectorResolutionX",
      "body": "VectorResolutionX()$1",
      "description": "Returns horizontal resolution (in DPI) of the vector drawing output"
    },
    "VectorResolutionY ()": {
      "prefix": "VectorResolutionY",
      "body": "VectorResolutionY()$1",
      "description": "Returns vertical resolution (in DPI) of the vector drawing output"
    },
    "VectorSourceCircularGradient (x.d, y.d, Radius.d, [CenterX.d, CenterY.d])": {
      "prefix": "VectorSourceCircularGradient",
      "body": "VectorSourceCircularGradient(${1:x.d}, ${2:y.d}, ${3:Radius.d})$4",
      "description": "Set a circular gradient for vector drawing"
    },
    "VectorSourceColor (Color)": {
      "prefix": "VectorSourceColor",
      "body": "VectorSourceColor(${1:Color})$2",
      "description": "Set the color for vector drawing"
    },
    "VectorSourceGradientColor (Color, Position.d)": {
      "prefix": "VectorSourceGradientColor",
      "body": "VectorSourceGradientColor(${1:Color})$2",
      "description": "Add a color to the vector drawing gradient"
    },
    "VectorSourceImage (ImageID [, Alpha [, Width.d, Height.d [, Flags]]])": {
      "prefix": "VectorSourceImage",
      "body": "VectorSourceImage(${1:ImageID})$2",
      "description": "Set an image as the vector drawing source"
    },
    "VectorSourceLinearGradient (x1.d, y1.d, x2.d, y2.d)": {
      "prefix": "VectorSourceLinearGradient",
      "body": "VectorSourceLinearGradient(${1:x1.d}, ${2:y1.d}, ${3:x2.d})$4",
      "description": "Set a linear gradient for vector drawing"
    },
    "VectorTextHeight (Text$ [, Flags])": {
      "prefix": "VectorTextHeight",
      "body": "VectorTextHeight(${1:Text.s})$2",
      "description": "Calculate the text height for vector drawing"
    },
    "VectorTextWidth (Text$ [, Flags])": {
      "prefix": "VectorTextWidth",
      "body": "VectorTextWidth(${1:Text.s})$2",
      "description": "Calculate the text width for vector drawing"
    },
    "VectorUnit ()": {
      "prefix": "VectorUnit",
      "body": "VectorUnit()$1",
      "description": "Returns the unit of measurement used by the vector drawing output"
    },
    "VertexPoseReferenceCount (#Mesh, Animation$, Track, Index)": {
      "prefix": "VertexPoseReferenceCount",
      "body": "VertexPoseReferenceCount(${1:#Mesh}, ${2:Animation.s}, ${3:Track})$4",
      "description": "Return the vertex pose reference size of the specified #Mesh track"
    },
    "WaitFastCGIRequest ()": {
      "prefix": "WaitFastCGIRequest",
      "body": "WaitFastCGIRequest()$1",
      "description": "Wait for FastCGI request to process"
    },
    "WaitProgram (Program [, Timeout])": {
      "prefix": "WaitProgram",
      "body": "WaitProgram(${1:Program})$2",
      "description": "Wait for the specified program to end"
    },
    "WaitSemaphore (Semaphore)": {
      "prefix": "WaitSemaphore",
      "body": "WaitSemaphore(${1:Semaphore})$2",
      "description": "Wait for the semaphore object once (decrement the count by 1)"
    },
    "WaitThread (Thread [, Timeout])": {
      "prefix": "WaitThread",
      "body": "WaitThread(${1:Thread})$2",
      "description": "Wait until the thread ends"
    },
    "WaitWindowEvent ([Timeout])": {
      "prefix": "WaitWindowEvent",
      "body": "WaitWindowEvent()$1",
      "description": "Waits until an event has occurs on any of the opened windows"
    },
    "WaterColor (#Camera, Color)": {
      "prefix": "WaterColor",
      "body": "WaterColor(${1:#Camera})$2",
      "description": "Create a water plane at the given position"
    },
    "WaterHeight (#Camera, x, y)": {
      "prefix": "WaterHeight",
      "body": "WaterHeight(${1:#Camera}, ${2:x})$3",
      "description": "Get the Y position of the water at the given coordinates"
    },
    "WebGadget (#Gadget, x, y, Width, Height, URL$)": {
      "prefix": "WebGadget",
      "body": "WebGadget(${1:#Gadget}, ${2:x}, ${3:y}, ${4:Width}, ${5:Height}, ${6:URL$})$7",
      "description": "Create a Web gadget in the current GadgetList"
    },
    "WindowBounds (#Window, MinimumWidth, MinimumHeight, MaximumWidth, MaximumHeight)": {
      "prefix": "WindowBounds",
      "body": "WindowBounds(${1:#Window}, ${2:MinimumWidth}, ${3:MinimumHeight}, ${4:MaximumWidth})$5",
      "description": "Set the #Window bounds"
    },
    "WindowEvent ()": {
      "prefix": "WindowEvent",
      "body": "WindowEvent()$1",
      "description": "Check if an event has occured on any of the opened windows"
    },
    "WindowEvent3D ()": {
      "prefix": "WindowEvent3D",
      "body": "WindowEvent3D()$1",
      "description": "Check if an event has occured on any of the opened windows"
    },
    "WindowHeight (#Window [, Flags])": {
      "prefix": "WindowHeight",
      "body": "WindowHeight(${1:#Window})$2",
      "description": "Returns the height, in pixels, of the specified window"
    },
    "WindowHeight3D (#Window3D)": {
      "prefix": "WindowHeight3D",
      "body": "WindowHeight3D(${1:#Window3D})$2",
      "description": "Returns the height, in pixels, of the specified window"
    },
    "WindowID (#Window)": {
      "prefix": "WindowID",
      "body": "WindowID(${1:#Window})$2",
      "description": "Returns the unique ID which identifies the window in the operating system"
    },
    "WindowID3D (#Window3D)": {
      "prefix": "WindowID3D",
      "body": "WindowID3D(${1:#Window3D})$2",
      "description": "Returns the unique ID which identifies the window in the operating system"
    },
    "WindowMouseX (#Window)": {
      "prefix": "WindowMouseX",
      "body": "WindowMouseX(${1:#Window})$2",
      "description": "Returns the mouse position relative to the left of the specified window"
    },
    "WindowMouseY (#Window)": {
      "prefix": "WindowMouseY",
      "body": "WindowMouseY(${1:#Window})$2",
      "description": "Returns the mouse position relative to the top of the specified window"
    },
    "WindowOutput (#Window)": {
      "prefix": "WindowOutput",
      "body": "WindowOutput(${1:#Window})$2",
      "description": "Returns the OutputID of the specified window to perform 2D rendering operation on it"
    },
    "WindowVectorOutput (#Window [, Unit])": {
      "prefix": "WindowVectorOutput",
      "body": "WindowVectorOutput(${1:#Window})$2",
      "description": "Returns the OutputID of the specified window to vector drawing on it"
    },
    "WindowWidth (#Window [, Flags])": {
      "prefix": "WindowWidth",
      "body": "WindowWidth(${1:#Window})$2",
      "description": "Return the width, in pixels, of the specified window"
    },
    "WindowWidth3D (#Window3D)": {
      "prefix": "WindowWidth3D",
      "body": "WindowWidth3D(${1:#Window3D})$2",
      "description": "Return the width, in pixels, of the specified window"
    },
    "WindowX (#Window [, Mode])": {
      "prefix": "WindowX",
      "body": "WindowX(${1:#Window})$2",
      "description": "Returns the left position, in pixels, of the specified window"
    },
    "WindowX3D (#Window3D)": {
      "prefix": "WindowX3D",
      "body": "WindowX3D(${1:#Window3D})$2",
      "description": "Returns the left position, in pixels, of the specified window"
    },
    "WindowY (#Window [, Mode])": {
      "prefix": "WindowY",
      "body": "WindowY(${1:#Window})$2",
      "description": "Returns the top position, in pixels, of the specified window"
    },
    "WindowY3D (#Window3D)": {
      "prefix": "WindowY3D",
      "body": "WindowY3D(${1:#Window3D})$2",
      "description": "Returns the top position, in pixels, of the specified window"
    },
    "WorldCollisionAppliedImpulse ()": {
      "prefix": "WorldCollisionAppliedImpulse",
      "body": "WorldCollisionAppliedImpulse()$1",
      "description": "Get applied impulse vector of the current collision"
    },
    "WorldCollisionContact ()": {
      "prefix": "WorldCollisionContact",
      "body": "WorldCollisionContact()$1",
      "description": "Get the contact vector of the current collision"
    },
    "WorldCollisionNormal ()": {
      "prefix": "WorldCollisionNormal",
      "body": "WorldCollisionNormal()$1",
      "description": "Get the normal vector of the current collision"
    },
    "WorldDebug (Mode)": {
      "prefix": "WorldDebug",
      "body": "WorldDebug(${1:Mode})$2",
      "description": "Change the debug mode for the whole world"
    },
    "WorldGravity (Gravity)": {
      "prefix": "WorldGravity",
      "body": "WorldGravity(${1:Gravity})$2",
      "description": "Change the gravity in the world"
    },
    "WorldShadows (ShadowType [, Distance [, Color [, TextureSize]]])": {
      "prefix": "WorldShadows",
      "body": "WorldShadows(${1:ShadowType})$2",
      "description": "Change the shadow handling in this world"
    },
    "WriteAsciiCharacter (#File, Number)": {
      "prefix": "WriteAsciiCharacter",
      "body": "WriteAsciiCharacter(${1:#File})$2",
      "description": "Write an ascii character to the specified file"
    },
    "WriteByte (#File, Number)": {
      "prefix": "WriteByte",
      "body": "WriteByte(${1:#File})$2",
      "description": "Write a byte sized number to the specified file"
    },
    "WriteCGIData (*Buffer, Size)": {
      "prefix": "WriteCGIData",
      "body": "WriteCGIData(${1:*Buffer})$2",
      "description": "Write binary data to CGI output"
    },
    "WriteCGIFile (Filename$)": {
      "prefix": "WriteCGIFile",
      "body": "WriteCGIFile(${1:Filename.s})$2",
      "description": "Write a whole file to CGI output"
    },
    "WriteCGIHeader (Name$, Value$ [, Flags])": {
      "prefix": "WriteCGIHeader",
      "body": "WriteCGIHeader(${1:Name.s})$2",
      "description": "Add a new header to the answer"
    },
    "WriteCGIString (String$ [, Encoding])": {
      "prefix": "WriteCGIString",
      "body": "WriteCGIString(${1:String.s})$2",
      "description": "Write a string to the CGI output"
    },
    "WriteCGIStringN (String$ [, Encoding])": {
      "prefix": "WriteCGIStringN",
      "body": "WriteCGIStringN(${1:String.s})$2",
      "description": "Write a string to the CGI output including a carriage return"
    },
    "WriteCharacter (#File, Number [, Format])": {
      "prefix": "WriteCharacter",
      "body": "WriteCharacter(${1:#File})$2",
      "description": "Write a character to the specified file"
    },
    "WriteConsoleData (*Buffer, Size)": {
      "prefix": "WriteConsoleData",
      "body": "WriteConsoleData(${1:*Buffer})$2",
      "description": "Write data to the console output"
    },
    "WriteData (#File, *MemoryBuffer, LengthToWrite)": {
      "prefix": "WriteData",
      "body": "WriteData(${1:#File}, ${2:*MemoryBuffer})$3",
      "description": "Write the content of the specified memory buffer to the specified file"
    },
    "WriteDouble (#File, Number)": {
      "prefix": "WriteDouble",
      "body": "WriteDouble(${1:#File})$2",
      "description": "Write a double number to the specified file"
    },
    "WriteFloat (#File, Number)": {
      "prefix": "WriteFloat",
      "body": "WriteFloat(${1:#File})$2",
      "description": "Write a float number to the specified file"
    },
    "WriteInteger (#File, Number)": {
      "prefix": "WriteInteger",
      "body": "WriteInteger(${1:#File})$2",
      "description": "Write an integer to the specified file"
    },
    "WriteLong (#File, Number)": {
      "prefix": "WriteLong",
      "body": "WriteLong(${1:#File})$2",
      "description": "Write a long number to the specified file"
    },
    "WritePreferenceDouble (Key$, Value)": {
      "prefix": "WritePreferenceDouble",
      "body": "WritePreferenceDouble(${1:Key.s})$2",
      "description": "Write the keyword and its associated double value"
    },
    "WritePreferenceFloat (Key$, Value)": {
      "prefix": "WritePreferenceFloat",
      "body": "WritePreferenceFloat(${1:Key.s})$2",
      "description": "Write the keyword and its associated value"
    },
    "WritePreferenceInteger (Key$, Value)": {
      "prefix": "WritePreferenceInteger",
      "body": "WritePreferenceInteger(${1:Key.s})$2",
      "description": "Write the keyword and its associated value"
    },
    "WritePreferenceLong (Key$, Value)": {
      "prefix": "WritePreferenceLong",
      "body": "WritePreferenceLong(${1:Key.s})$2",
      "description": "Write the keyword and its associated value"
    },
    "WritePreferenceQuad (Key$, Value)": {
      "prefix": "WritePreferenceQuad",
      "body": "WritePreferenceQuad(${1:Key.s})$2",
      "description": "Write the keyword and its associated quad value"
    },
    "WritePreferenceString (Key$, Value$)": {
      "prefix": "WritePreferenceString",
      "body": "WritePreferenceString(${1:Key.s})$2",
      "description": "Write the keyword and its associated value"
    },
    "WriteProgramData (Program, *Buffer, Size)": {
      "prefix": "WriteProgramData",
      "body": "WriteProgramData(${1:Program}, ${2:*Buffer})$3",
      "description": "Write data to the standard input of the program"
    },
    "WriteProgramString (Program, String$ [, Format])": {
      "prefix": "WriteProgramString",
      "body": "WriteProgramString(${1:Program})$2",
      "description": "Write the string to the standard input of the program"
    },
    "WriteProgramStringN (Program, String$ [, Format])": {
      "prefix": "WriteProgramStringN",
      "body": "WriteProgramStringN(${1:Program})$2",
      "description": "Write the string to the standard input of the program including a newline"
    },
    "WriteQuad (#File, Number)": {
      "prefix": "WriteQuad",
      "body": "WriteQuad(${1:#File})$2",
      "description": "Write a quad number to the specified file"
    },
    "WriteSerialPortData (#SerialPort, *Buffer, Length)": {
      "prefix": "WriteSerialPortData",
      "body": "WriteSerialPortData(${1:#SerialPort}, ${2:*Buffer})$3",
      "description": "Write an arbitrary amount of data to the #SerialPort"
    },
    "WriteSerialPortString (#SerialPort, String$ [, Format])": {
      "prefix": "WriteSerialPortString",
      "body": "WriteSerialPortString(${1:#SerialPort})$2",
      "description": "Write a string to the #SerialPort"
    },
    "WriteString (#File, Text$ [, Format])": {
      "prefix": "WriteString",
      "body": "WriteString(${1:#File})$2",
      "description": "Write a string to the specified file"
    },
    "WriteStringFormat (#File, Format)": {
      "prefix": "WriteStringFormat",
      "body": "WriteStringFormat(${1:#File})$2",
      "description": "Write a BOM (Byte Order Mark) to identify the string format used in the file"
    },
    "WriteStringN (#File, Text$ [, Format])": {
      "prefix": "WriteStringN",
      "body": "WriteStringN(${1:#File})$2",
      "description": "Write a string to the specified file and add the \"end of line\" character"
    },
    "WriteUnicodeCharacter (#File, Number)": {
      "prefix": "WriteUnicodeCharacter",
      "body": "WriteUnicodeCharacter(${1:#File})$2",
      "description": "Write an unicode character to the specified file"
    },
    "WriteWord (#File, Number)": {
      "prefix": "WriteWord",
      "body": "WriteWord(${1:#File})$2",
      "description": "Write a word number to the specified file"
    },
    "XMLAttributeName (Node)": {
      "prefix": "XMLAttributeName",
      "body": "XMLAttributeName(${1:Node})$2",
      "description": "Get the name of the current examined attribute in the XML node"
    },
    "XMLAttributeValue (Node)": {
      "prefix": "XMLAttributeValue",
      "body": "XMLAttributeValue(${1:Node})$2",
      "description": "Get the value of the current examined attribute in the XML node"
    },
    "XMLChildCount (Node)": {
      "prefix": "XMLChildCount",
      "body": "XMLChildCount(${1:Node})$2",
      "description": "Get the number of children that the given XML node has"
    },
    "XMLError (#XML)": {
      "prefix": "XMLError",
      "body": "XMLError(${1:#XML})$2",
      "description": "Get a string description for an error during XML parsing"
    },
    "XMLErrorLine (#XML)": {
      "prefix": "XMLErrorLine",
      "body": "XMLErrorLine(${1:#XML})$2",
      "description": "Get the input line where a parsing error occured"
    },
    "XMLErrorPosition (#XML)": {
      "prefix": "XMLErrorPosition",
      "body": "XMLErrorPosition(${1:#XML})$2",
      "description": "Get the input column where a parsing error occured"
    },
    "XMLNodeFromID (#XML, ID$)": {
      "prefix": "XMLNodeFromID",
      "body": "XMLNodeFromID(${1:#XML})$2",
      "description": "Get a node in the XML tree from its ID-tag"
    },
    "XMLNodeFromPath (ParentNode, Path$)": {
      "prefix": "XMLNodeFromPath",
      "body": "XMLNodeFromPath(${1:ParentNode})$2",
      "description": "Get a node in the XML tree from a path string"
    },
    "XMLNodePath (Node [, ParentNode])": {
      "prefix": "XMLNodePath",
      "body": "XMLNodePath(${1:Node})$2",
      "description": "Get the path string that represents the given XML node in the document (or relative to ParentNode)"
    },
    "XMLNodeType (Node)": {
      "prefix": "XMLNodeType",
      "body": "XMLNodeType(${1:Node})$2",
      "description": "Get the type of the given XML node"
    },
    "XMLStatus (#XML)": {
      "prefix": "XMLStatus",
      "body": "XMLStatus(${1:#XML})$2",
      "description": "Get the status (or error code) of the XML parsing"
    },
    "Yaw (ObjectID, Value.f, Mode)": {
      "prefix": "Yaw",
      "body": "Yaw(${1:ObjectID}, ${2:Value.f})$3",
      "description": "Yaw the specified object"
    },
    "Year (Date)": {
      "prefix": "Year",
      "body": "Year(${1:Date})$2",
      "description": "Returns the year value of the specified date (between 1970 and 2034)"
    },
    "ZoomSprite (#Sprite, Width, Height)": {
      "prefix": "ZoomSprite",
      "body": "ZoomSprite(${1:#Sprite}, ${2:Width})$3",
      "description": "Zoom the sprite to the new given dimensions"
    }
  }
}
